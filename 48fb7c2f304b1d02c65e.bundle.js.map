{"version":3,"file":"48fb7c2f304b1d02c65e.bundle.js","mappings":"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","sources":["webpack://kontokorrent/./src/components/AusgleichErstellen/AusgleichsZahlungDisplay.ts","webpack://kontokorrent/./src/components/AusgleichErstellen/AusgleichsZahlungDisplay.html","webpack://kontokorrent/./src/components/AusgleichErstellen/AusgleichErstellen.ts","webpack://kontokorrent/./src/components/AusgleichErstellen/AusgleichErstellen.html","webpack://kontokorrent/./src/components/Spinner/Spinner.ts","webpack://kontokorrent/./src/components/Spinner/Spinner.html","webpack://kontokorrent/./src/components/convertLinks.ts","webpack://kontokorrent/./src/lib/WorkerService.ts","webpack://kontokorrent/./src/state/actions/KontokorrentActionCreator.ts","webpack://kontokorrent/./src/utils/formatCurrency.ts","webpack://kontokorrent/./src/utils/round.ts"],"sourcesContent":["import template from \"./AusgleichsZahlungDisplay.html\";\n\nexport const BezahlendePersonNameAttribute = \"bezahlender\";\nexport const EmpfaengerPersonNameAttribute = \"empfaenger\";\nexport const WertAttribute = \"wert\";\n\nexport class AusgleichsZahlungDisplay extends HTMLElement {\n    private rendered = false;\n    private bezahlendePersonName: string;\n    private empfaengerPersonName: string;\n    private wert: string;\n    private bezahlendePersonDisplay: HTMLSpanElement;\n    private empfaengerPersonDisplay: HTMLSpanElement;\n    private zahlung: HTMLSpanElement;\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.bezahlendePersonDisplay = this.querySelector(\"#bezahlende-person\");\n            this.empfaengerPersonDisplay = this.querySelector(\"#empfaenger-person\");\n            this.zahlung = this.querySelector(\"#zahlung\");\n            this.updateAttributes();\n        }\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.bezahlendePersonName = this.getAttribute(BezahlendePersonNameAttribute);\n        this.empfaengerPersonName = this.getAttribute(EmpfaengerPersonNameAttribute);\n        this.wert = this.getAttribute(WertAttribute);\n        this.updatesStyle();\n    }\n\n    static get observedAttributes() {\n        return [BezahlendePersonNameAttribute, EmpfaengerPersonNameAttribute, WertAttribute];\n    }\n\n    private updatesStyle() {\n        if (this.rendered) {\n            this.bezahlendePersonDisplay.innerText = this.bezahlendePersonName;\n            this.empfaengerPersonDisplay.innerText = this.empfaengerPersonName;\n            this.zahlung.innerText = `bezahlt ${this.wert} an`;\n            this.zahlung.title = `bezahlt ${this.wert} an`;\n        }\n    }\n\n}\nexport const AusgleichsZahlungDisplayTagName = 'ausgleichs-zahung-display';\ncustomElements.define(AusgleichsZahlungDisplayTagName, AusgleichsZahlungDisplay);\n","// Module\nvar code = \"<span id=\\\"bezahlende-person\\\"></span> <span id=\\\"zahlung\\\"></span> <span id=\\\"empfaenger-person\\\"></span>\";\n// Exports\nexport default code;","import { ServiceLocator } from \"../../ServiceLocator\";\nimport { KontokorrentActionCreator, kontokorrentActionCreatorFactory } from \"../../state/actions/KontokorrentActionCreator\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { Store } from \"../../state/Store\";\nimport { Person, State } from \"../../state/State\";\nimport { AppBar, AppBarTagName } from \"../AppBar/AppBar\";\nimport template from \"./AusgleichErstellen.html\";\nimport \"./AusgleichErstellen.scss\";\nimport { AusgleichsZahlung } from \"../../lib/ausgleich/AusgleichsZahlung\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { AusgleichsZahlungDisplay, BezahlendePersonNameAttribute, EmpfaengerPersonNameAttribute, WertAttribute } from \"./AusgleichsZahlungDisplay\";\nimport { convertLinks } from \"../convertLinks\";\nimport { AusgleichOptions } from \"../../lib/ausgleich/AusgleichOptions\";\nimport { formatCurrency } from \"../../utils/formatCurrency\";\nimport \"../Spinner/Spinner\";\n\nexport class AusgleichErstellen extends HTMLElement {\n    private rendered = false;\n    private store: Store;\n    private routingActionCreator: RoutingActionCreator;\n    private kontokorrentActionCreator: KontokorrentActionCreator;\n    private serviceLocator: ServiceLocator;\n    private appBar: AppBar;\n    private subscription: () => void;\n    private oeffentlicherNameParameter: string;\n    private ausgleichProgress: HTMLDivElement;\n    private ausgleichProgressLabel: HTMLSpanElement;\n    private navigiertZuNichtGefunden = false;\n    private zahlungen: HTMLOListElement;\n    private zahlungenRenderer: ArrayToElementRenderer<AusgleichsZahlung, HTMLLIElement, string>;\n    private bezahlenderRenderer: ArrayToElementRenderer<Person, HTMLOptionElement, string>;\n    private empfaengerRenderer: ArrayToElementRenderer<Person, HTMLOptionElement, string>;\n    private zurueckLink: HTMLAnchorElement;\n    private optionenForm: HTMLFormElement;\n    private optionen: AusgleichOptions;\n    private optionenDisplay: HTMLDivElement;\n    private umrechnungskurs: HTMLInputElement;\n    constructor() {\n        super();\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.kontokorrentActionCreator = kontokorrentActionCreatorFactory(serviceLocator);\n        this.serviceLocator = serviceLocator;\n        this.optionen = {\n            geforderteZahlungen: [],\n            mussZahlungen: []\n        };\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.appBar = this.querySelector(AppBarTagName);\n            this.appBar.addServices(this.serviceLocator);\n            this.ausgleichProgress = this.querySelector(\"#ausgleich-progress\");\n            this.ausgleichProgressLabel = this.querySelector(\"#progress-label\");\n            this.zahlungen = this.querySelector(\"#zahlungen\");\n            this.zahlungenRenderer = new ArrayToElementRenderer(this.zahlungen,\n                (b) => `${b.bezahlendePersonId}-${b.empfaengerPersonId}`,\n                b => {\n                    let liElement = document.createElement(\"li\");\n                    let e = new AusgleichsZahlungDisplay();\n                    liElement.appendChild(e);\n                    return liElement;\n                });\n            this.bezahlenderRenderer = new ArrayToElementRenderer(this.querySelector(\"#bezahlender\"), b => b.id, b => document.createElement(\"option\"));\n            this.empfaengerRenderer = new ArrayToElementRenderer(this.querySelector(\"#empfaenger\"), b => b.id, b => document.createElement(\"option\"));\n            this.zurueckLink = this.querySelector(\"#zurueck-zum-kontokorrent\");\n            this.optionenForm = this.querySelector(\"#optionen-form\");\n            this.optionenDisplay = this.querySelector(\"#optionen\");\n            this.umrechnungskurs = this.querySelector(\"#umrechnungskurs\");\n        }\n        convertLinks([this.zurueckLink], this.routingActionCreator);\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.appBar.addEventListener(\"gotokontokorrent\", async (e: CustomEvent) => {\n            await this.routingActionCreator.navigateKontokorrentById(e.detail);\n        });\n        this.umrechnungskurs.addEventListener(\"input\", (e: Event) => {\n            this.kontokorrentActionCreator.ausgleichRechnen(this.oeffentlicherNameParameter, this.optionen);\n        });\n        this.optionenForm.addEventListener(\"submit\", e => {\n            e.preventDefault();\n            let data = new FormData(this.optionenForm);\n            if (data.get(\"typ\") == \"muss\") {\n                this.optionen.mussZahlungen.push({\n                    bezahlendePersonId: data.get(\"bezahlender\") as string,\n                    empfaengerPersonId: data.get(\"empfaenger\") as string,\n                });\n            } else {\n                this.optionen.geforderteZahlungen.push({\n                    bezahlendePersonId: data.get(\"bezahlender\") as string,\n                    empfaengerPersonId: data.get(\"empfaenger\") as string,\n                });\n            }\n            this.kontokorrentActionCreator.ausgleichRechnen(this.oeffentlicherNameParameter, this.optionen);\n        });\n        this.applyStoreState(this.store.state);\n    }\n\n    private applyStoreState(state: State) {\n        let umrechnungskurs = (parseFloat(this.umrechnungskurs.value) || 1);\n        let ausgleichProgress = false;\n        let kontokorrent = state.kontokorrents.kontokorrents[state.kontokorrents.activeKontokorrentId];\n        if (kontokorrent) {\n            document.title = `${kontokorrent.name} - Ausgleich`;\n            ausgleichProgress = kontokorrent.ausgleichBerechnen;\n            this.ausgleichProgressLabel.innerText = kontokorrent.synchronisieren ? `${kontokorrent.name} wird synchronisiert` : \"Ausgleich wird berechnet\";\n            if (kontokorrent.ausgleich) {\n                this.zahlungenRenderer.update(kontokorrent.ausgleich.ausgleichZahlungen, (li, a) => {\n                    let e: AusgleichsZahlungDisplay = <AusgleichsZahlungDisplay>li.children[0];\n                    e.setAttribute(BezahlendePersonNameAttribute, kontokorrent.personen.find(x => x.id == a.bezahlendePersonId).name);\n                    e.setAttribute(EmpfaengerPersonNameAttribute, kontokorrent.personen.find(x => x.id == a.empfaengerPersonId).name);\n                    e.setAttribute(WertAttribute, `${formatCurrency(a.wert)}${(umrechnungskurs != 1 ? ` (umgerechnet  ${formatCurrency(a.wert/umrechnungskurs)})`:\"\")}`);\n                });\n            }\n\n            this.zurueckLink.href = `kontokorrents/o/${kontokorrent.oeffentlicherName}`;\n            this.bezahlenderRenderer.update(kontokorrent.personen, (option, p) => {\n                option.value = p.id;\n                option.innerText = p.name;\n            });\n            this.empfaengerRenderer.update(kontokorrent.personen, (option, p) => {\n                option.value = p.id;\n                option.innerText = p.name;\n            });\n            this.optionenDisplay.innerHTML = \"\";\n            for (let o of this.optionen.mussZahlungen) {\n                let div = document.createElement(\"div\");\n                div.innerText = `${kontokorrent.personen.find(p => p.id == o.bezahlendePersonId).name} muss an ${kontokorrent.personen.find(p => p.id == o.empfaengerPersonId).name} zahlen`;\n                this.optionenDisplay.appendChild(div);\n            }\n            for (let o of this.optionen.geforderteZahlungen) {\n                let div = document.createElement(\"div\");\n                div.innerText = `Bevorzugte Zahlungen zwsichen ${kontokorrent.personen.find(p => p.id == o.bezahlendePersonId).name} und ${kontokorrent.personen.find(p => p.id == o.empfaengerPersonId).name}`;\n                this.optionenDisplay.appendChild(div);\n            }\n        }\n        if (state.kontokorrents.nichtGefunden && !this.navigiertZuNichtGefunden) {\n            this.navigiertZuNichtGefunden = true;\n            this.routingActionCreator.navigateNichtGefunden(state.kontokorrents.nichtGefunden.oeffentlicherName);\n        }\n        this.ausgleichProgress.style.display = ausgleichProgress ? \"\" : \"none\";\n\n    }\n\n    setRouteParameters(oeffentlicherName: string) {\n        this.oeffentlicherNameParameter = oeffentlicherName;\n        this.kontokorrentActionCreator.ausgleichRechnen(oeffentlicherName, this.optionen);\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n    }\n}\n\ncustomElements.define(\"ausgleich-erstellen\", AusgleichErstellen);\n","// Module\nvar code = \"<app-bar></app-bar> <div class=\\\"ausgleich-erstellen__ausgleich\\\"> <div class=\\\"ausgleich-menu\\\"> <a id=\\\"zurueck-zum-kontokorrent\\\" class=\\\"button\\\"> <span class=\\\"material-icons\\\"> arrow_back </span> zurück </a> </div> <h2>Ausgleich</h2> <h3>Optionen</h3> <form id=\\\"optionen-form\\\"> <div> <input type=\\\"radio\\\" name=\\\"typ\\\" value=\\\"bevorzugt\\\" id=\\\"bevorzugt\\\" required=\\\"required\\\"> <label for=\\\"bevorzugt\\\">Bevorzugt</label> <input type=\\\"radio\\\" name=\\\"typ\\\" value=\\\"muss\\\" id=\\\"muss\\\" required=\\\"required\\\"> <label for=\\\"muss\\\">Muss</label> </div> <div> <select name=\\\"bezahlender\\\" id=\\\"bezahlender\\\" required></select> bezahlt an <select name=\\\"empfaenger\\\" id=\\\"empfaenger\\\" required></select> </div> <div> <button type=\\\"submit\\\" id=\\\"option-hinzufuegen-button\\\">Option hinzufügen</button> </div> </form> <div id=\\\"optionen\\\"> </div> <div> <label for=\\\"umrechnungskurs\\\">Umrechnungskurs</label> <input type=\\\"number\\\" id=\\\"umrechnungskurs\\\" value=\\\"1\\\"> </div> <h3>Zahlungen</h3> <ol id=\\\"zahlungen\\\"> </ol> </div> <div class=\\\"ausgleich-erstellen__progress\\\" id=\\\"ausgleich-progress\\\"> <app-spinner></app-spinner> <span id=\\\"progress-label\\\"></span> </div>\";\n// Exports\nexport default code;","import template from \"./Spinner.html\";\n\nexport class Spinner extends HTMLElement {\n\n    constructor() {\n        super();\n        let shadowRoot = this.attachShadow({ mode: \"open\" });\n        shadowRoot.innerHTML = template;\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n}\n\ncustomElements.define(\"app-spinner\", Spinner);\n","// Module\nvar code = \"<style>.spinner{animation:rotate 2s linear infinite;height:100%}.spinner .path{stroke:var(--spinner-color);stroke-linecap:round;animation:dash 1.5s ease-in-out infinite}@keyframes rotate{100%{transform:rotate(360deg)}}@keyframes dash{0%{stroke-dasharray:1,150;stroke-dashoffset:0}50%{stroke-dasharray:90,150;stroke-dashoffset:-35}100%{stroke-dasharray:90,150;stroke-dashoffset:-124}}</style> <svg class=\\\"spinner\\\" viewBox=\\\"0 0 50 50\\\"> <circle class=\\\"path\\\" cx=\\\"25\\\" cy=\\\"25\\\" r=\\\"20\\\" fill=\\\"none\\\" stroke-width=\\\"4\\\"></circle> </svg>\";\n// Exports\nexport default code;","import { RoutingActionCreator } from \"../state/actions/RoutingActionCreator\";\n\nexport function convertLinks(elements: Array<HTMLAnchorElement> | NodeListOf<HTMLAnchorElement>, routingActionCreator: RoutingActionCreator) {\n    elements.forEach((e: HTMLAnchorElement) => {\n        e.addEventListener(\"click\", ev => {\n            ev.preventDefault();\n            routingActionCreator.navigate(e.getAttribute(\"href\"));\n        });\n    });\n}","import { ServiceLocator } from \"../ServiceLocator\";\nimport { Store } from \"../state/Store\";\nimport { AusgleichRechnenMessage, GetBeschreibungVorschlaegeMessage, KontokorrentOeffnenMessage, ResetBeschreibungenCacheMessage, WorkerMessageType } from \"../worker/KontokorrentWorker\";\nimport { AusgleichOptions } from \"./ausgleich/AusgleichOptions\";\nimport { GeforderteZahlung } from \"./ausgleich/GeforderteZahlung\";\n\nexport class WorkerService {\n\n    constructor(private store: Store) {\n\n    }\n    private worker: Worker;\n\n    private getWorker() {\n        if (!this.worker) {\n            this.worker = new Worker(new URL(\"../worker/KontokorrentWorker\", import.meta.url));\n            this.worker.addEventListener(\"message\", ev => {\n                if (ev.data?.type == \"statedispatch\") {\n                    let msg = ev.data.msg;\n                    this.store.dispatch(msg);\n                }\n            });\n        }\n        return this.worker;\n    }\n\n    getBeschreibungVorschlaege(kontokorrentId: string, eingabe: string) {\n        let msg: GetBeschreibungVorschlaegeMessage = {\n            kontokorrentId: kontokorrentId,\n            type: WorkerMessageType.GetBeschreibungVorschlaege,\n            eingabe: eingabe\n        };\n        this.getWorker().postMessage(msg);\n    }\n\n    resetBeschreibungenCache() {\n        let msg: ResetBeschreibungenCacheMessage = {\n            type: WorkerMessageType.ResetBeschreibungenCache,\n        };\n        this.getWorker().postMessage(msg);\n    }\n\n    kontokorrentOeffnen(oeffentlicherName: string) {\n        let msg: KontokorrentOeffnenMessage = {\n            type: WorkerMessageType.KontokorrentOeffnen,\n            oeffentlicherName: oeffentlicherName\n        };\n        this.getWorker().postMessage(msg);\n    }\n\n    ausgleichRechnen(oeffentlicherName: string, ausgleichOptions:AusgleichOptions) {\n        let msg: AusgleichRechnenMessage = {\n            type: WorkerMessageType.AusgleichRechnen,\n            oeffentlicherName: oeffentlicherName,\n            ausgleichOptions: ausgleichOptions\n        };\n        this.getWorker().postMessage(msg);\n    }\n}\n\nexport function workerServiceFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"WorkerService\",\n        serviceLocator => new WorkerService(serviceLocator.store));\n}","import { ServiceLocator } from \"../../ServiceLocator\";\nimport { WorkerService, workerServiceFactory } from \"../../lib/WorkerService\";\nimport { AusgleichRequest } from \"../../lib/ausgleich/AusgleichRequest\";\nimport { GeforderteZahlung } from \"../../lib/ausgleich/GeforderteZahlung\";\nimport { AusgleichOptions } from \"../../lib/ausgleich/AusgleichOptions\";\n\nexport class KontokorrentActionCreator {\n\n    constructor(private workerService: WorkerService) {\n\n    }\n\n    kontokorrentOeffnen(oeffentlicherName: string) {\n        this.workerService.kontokorrentOeffnen(oeffentlicherName);\n    }\n\n    ausgleichRechnen(oeffentlicherName:string, ausgleichOptions:AusgleichOptions) {\n        this.workerService.ausgleichRechnen(oeffentlicherName, ausgleichOptions);\n    }\n}\n\nexport function kontokorrentActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"KontokorrentActionCreator\",\n        serviceLocator => new KontokorrentActionCreator(\n            workerServiceFactory(serviceLocator)\n        ));\n}","import { round } from \"./round\";\n\nexport function formatCurrency(wert: number) {\n    var Betrag: string = \"\" + round(wert, 2);\n    var Kommaindex = Betrag.toString().indexOf(\".\");\n    var Nachkommastellen = 0;\n    if (Kommaindex != -1) {\n        Nachkommastellen = Betrag.toString().length - (Kommaindex + 1);\n        if (Nachkommastellen == 1)\n            Betrag += '0';\n    }\n    return Betrag;\n}\n","export function round(value: number, decimals: number) {\n\n    //Removing scientific notation if used:\n    var valueString = value.toString();\n    var indexOfE = valueString.indexOf(\"E\");\n    var indexOfe = valueString.indexOf(\"e\");\n    var power = 0;\n    if (indexOfe > -1) {\n        power = parseFloat(valueString.substring(indexOfe + 1));\n        valueString = valueString.substring(0, indexOfe)\n    } else if (indexOfE > -1) {\n        power = parseFloat(valueString.substring(indexOfE + 1));\n        valueString = valueString.substring(0, indexOfE)\n    }\n    //round\n    return Number(Math.round(Number(valueString + 'e' + (power + decimals))) + 'e-' + (decimals));\n}"],"names":["BezahlendePersonNameAttribute","EmpfaengerPersonNameAttribute","WertAttribute","AusgleichsZahlungDisplay","HTMLElement","constructor","super","rendered","connectedCallback","this","innerHTML","bezahlendePersonDisplay","querySelector","empfaengerPersonDisplay","zahlung","updateAttributes","disconnectedCallback","attributeChangedCallback","bezahlendePersonName","getAttribute","empfaengerPersonName","wert","updatesStyle","innerText","title","customElements","define","AusgleichErstellen","navigiertZuNichtGefunden","addServices","serviceLocator","store","routingActionCreator","kontokorrentActionCreator","optionen","geforderteZahlungen","mussZahlungen","appBar","AppBar","ausgleichProgress","ausgleichProgressLabel","zahlungen","zahlungenRenderer","ArrayToElementRenderer","b","bezahlendePersonId","empfaengerPersonId","liElement","document","createElement","e","appendChild","bezahlenderRenderer","id","empfaengerRenderer","zurueckLink","optionenForm","optionenDisplay","umrechnungskurs","convertLinks","subscription","subscribe","state","applyStoreState","addEventListener","async","navigateKontokorrentById","detail","ausgleichRechnen","oeffentlicherNameParameter","preventDefault","data","FormData","get","push","parseFloat","value","kontokorrent","kontokorrents","activeKontokorrentId","name","ausgleichBerechnen","synchronisieren","ausgleich","update","ausgleichZahlungen","li","a","children","setAttribute","personen","find","x","formatCurrency","href","oeffentlicherName","option","p","o","div","nichtGefunden","navigateNichtGefunden","style","display","setRouteParameters","Spinner","attachShadow","mode","elements","forEach","ev","navigate","WorkerService","getWorker","worker","Worker","URL","type","msg","dispatch","getBeschreibungVorschlaege","kontokorrentId","eingabe","postMessage","resetBeschreibungenCache","kontokorrentOeffnen","ausgleichOptions","workerServiceFactory","KontokorrentActionCreator","workerService","kontokorrentActionCreatorFactory","valueString","indexOfE","indexOfe","power","Betrag","toString","indexOf","substring","Number","Math","round","Kommaindex","length"],"sourceRoot":""}