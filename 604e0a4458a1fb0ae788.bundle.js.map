{"version":3,"file":"604e0a4458a1fb0ae788.bundle.js","mappings":"gJAKA,MAAMA,EAAoB,I,QAAI,GCJnB,wZDML,MAAO,UAAoCC,YAS7CC,cACIC,QACAC,KAAKC,iBAAmBL,EAAkBM,cAG9CC,oBACQH,KAAKC,iBAAiBG,MAAMJ,QAC5BA,KAAKK,MAAQL,KAAKM,cAAc,SAChCN,KAAKO,YAAcP,KAAKM,cAAL,sBACnBN,KAAKQ,MAAQR,KAAKM,cAAc,SAChCN,KAAKS,UAIbC,wBAIa,cAACC,GACVX,KAAKY,WAAaD,EAGZ,WAACE,GACPb,KAAKc,WAAaD,EAAME,KACxBf,KAAKgB,SAAWH,EAAMI,GACtBjB,KAAKS,SAGDA,SACAT,KAAKC,iBAAiBiB,cACtBlB,KAAKK,MAAMQ,MAAQb,KAAKgB,SACxBhB,KAAKO,YAAYY,UAAYnB,KAAKc,WAClCd,KAAKK,MAAMY,GAAKjB,KAAKgB,SACrBhB,KAAKQ,MAAMY,aAAa,MAAOpB,KAAKgB,UACpChB,KAAKK,MAAMU,KAAOf,KAAKY,aAKnCS,eAAeC,OAAO,iCAAkC,I,uGElDxD,MAAMC,EAAW,IAAIC,EAAA,ECJV,ucDMEC,EAAsB,cACtBC,EAAwB,gBAE/B,MAAO,UAAoB7B,YAI7BC,cACIC,QACAC,KAAKC,iBAAmBsB,EAASrB,cAGrCC,oBACQH,KAAKC,iBAAiBG,MAAMJ,QAC5BA,KAAK2B,cAAgB3B,KAAKM,cAAc,iCACxCN,KAAK4B,oBAIblB,wBAIAmB,2BACI7B,KAAK4B,mBAGDA,mBACA5B,KAAK2B,gBACL3B,KAAK2B,cAAcV,GAAKjB,KAAK8B,aAAaL,GAC1CzB,KAAK2B,cAAcZ,KAAOf,KAAK8B,aAAaJ,IAIvB,gCACzB,MAAO,CAACD,EAAqBC,IAIrCL,eAAeC,OAAO,eAAgB,GEvCtC,MAAM,EAAW,IAAIE,EAAA,ECNV,iDDQL,MAAO,UAA2B3B,YAQpCC,cACIC,QACAC,KAAKC,iBAAmB,EAASC,cAG3B,WAACW,GACPb,KAAKc,WAAaD,EAAME,KACxBf,KAAK+B,WAAL,qBAAgClB,EAAMI,IACtCjB,KAAKS,SAGTN,oBACQH,KAAKC,iBAAiBG,MAAMJ,QAC5BA,KAAKgC,YAAchC,KAAKM,cAAc,gBACtCN,KAAKQ,MAAQR,KAAKM,cAAc,SAChCN,KAAKS,UAIbC,wBAIQD,SACAT,KAAKC,iBAAiBiB,cACtBlB,KAAKQ,MAAMW,UAAYnB,KAAKc,WAC5Bd,KAAKQ,MAAMY,aAAa,MAAOpB,KAAK+B,YACpC/B,KAAKgC,YAAYZ,aAAa,cAAepB,KAAK+B,YAClD/B,KAAKgC,YAAYZ,aAAa,gBAAiBpB,KAAK+B,cE7C1D,SAAUE,EAAiBC,GAC7B,IAAIC,EAAQ,IAAIC,KAAKF,GAErB,OADAC,EAAME,WAAWH,EAAEI,aAAeJ,EAAEK,qBAC7BJ,EAAMK,SAASC,MAAM,EAAG,IF+CnCpB,eAAeC,OAAO,sBAAuB,G,+BGxCvC,MAAOoB,UAA+B7C,YA0BxCC,cACIC,QAjBI,KAAA4C,qBAA+B,EAK/B,KAAAC,UAAsB,GAKtB,KAAAC,YAAwB,GAExB,KAAAC,UAAW,EAEX,KAAAC,cAAe,EAMvB5C,oBACSH,KAAK8C,WACN9C,KAAK8C,UAAW,EAChB9C,KAAKgD,UC1CN,g2DD2CChD,KAAKiD,kBAAoBjD,KAAKM,cAAc,uBAC5CN,KAAKkD,uBAAyB,IAAIC,EAAA,EAC9BnD,KAAKM,cAAc,6BACnB8C,GAAKA,EAAEnC,KACPmC,GAAK,IAAIC,EAAA,IACbrD,KAAKsD,mBAAqB,IAAIH,EAAA,EAC1BnD,KAAKiD,mBACLG,GAAKA,EAAEnC,KACPmC,GAAK,IAAI,IACbpD,KAAKuD,gCAAkC,IAAIJ,EAAA,EACvCnD,KAAKM,cAAc,8BACnB8C,GAAKA,IACLA,IACI,IAAII,EAAKC,SAASC,cAAc,UAOhC,OANAF,EAAGG,UAAY,sCACfH,EAAGrC,UAAYiC,EACfI,EAAGI,KAAO,SACVJ,EAAGK,iBAAiB,SAASC,IACzB9D,KAAK+D,gBAAgBX,MAElBI,KAEfxD,KAAKgE,MAAQhE,KAAKM,cAAc,UAChCN,KAAKgE,MAAMnD,MAAQoB,EAAiB,IAAIG,MACxCpC,KAAKiE,OAASjE,KAAKM,cAAc,WACjCN,KAAKkE,QAAUlE,KAAKM,cAAc,YAClCN,KAAKmE,2BAA6BnE,KAAKM,cAAc,kCACrDN,KAAKoE,oBAAsBpE,KAAKM,cAAc,0BAC9CN,KAAKqE,mBAAqBrE,KAAKM,cAAc,yBAC7CN,KAAKsE,mBAAqBtE,KAAKM,cAAc,yBAC7CN,KAAKuE,uBAAyBvE,KAAKM,cAAc,6BACjDN,KAAKwE,KAAOxE,KAAKM,cAAc,6BAC/BN,KAAKyE,UAAYzE,KAAKM,cAAc,eACpCN,KAAKS,UAGTT,KAAK0E,kBAAoB,IAAM1E,KAAK2E,cACpC3E,KAAKwE,KAAKX,iBAAiB,QAAS7D,KAAK0E,mBACzC1E,KAAKiE,OAAOW,QACZ5E,KAAK6E,kBAAoB,IAAM7E,KAAK8E,YACpC9E,KAAKyE,UAAUZ,iBAAiB,QAAS7D,KAAK6E,mBAC9C7E,KAAK+E,qBAAuB,KACxB/E,KAAKgF,cAAc,IAAIC,YAAY,iBAAkB,CAAEC,OAAQlF,KAAKkE,QAAQrD,UAEhFb,KAAKkE,QAAQL,iBAAiB,QAAS7D,KAAK+E,sBAC5C/E,KAAKmF,uBAA0BrB,GAAqB9D,KAAKoF,eAAetB,GACxE9D,KAAKkE,QAAQL,iBAAiB,UAAW7D,KAAKmF,wBAG1CC,eAAetB,G,MACL,SAAVA,EAAEuB,OAAmC,QAAhB,EAAArF,KAAK6C,mBAAW,eAAEyC,QAAS,GAChDtF,KAAK+D,gBAAgB/D,KAAK6C,YAAY,IAItCkB,gBAAgBX,GACpBpD,KAAKkE,QAAQrD,MAAQuC,EACrBpD,KAAK+E,uBACL/E,KAAKkE,QAAQU,QACb5E,KAAKuF,4BAGDT,YACJ,IAAIU,EAAWxF,KAAKwE,KAAL,KAAuCgB,QACtD,IAAK,IAAIC,KAAKzF,KAAK0F,qBACfD,EAAED,QAAUA,EAIpB9E,uBACIV,KAAKwE,KAAKmB,oBAAoB,QAAS3F,KAAK0E,mBAC5C1E,KAAKyE,UAAUkB,oBAAoB,QAAS3F,KAAK6E,mBACjD7E,KAAKkE,QAAQyB,oBAAoB,QAAS3F,KAAK+E,sBAC/C/E,KAAKkE,QAAQyB,oBAAoB,UAAW3F,KAAKmF,wBAG7CR,cACJ3E,KAAKuF,4BAGTK,WACI,IAAK5F,KAAK8C,SACN,OAAO,EAEX9C,KAAK2C,qBAAsB,EAC3B,IAAIsB,EAASjE,KAAK6F,cACdC,EAAc7B,EAAO8B,MAGzB,OAFA/F,KAAKsE,mBAAmB0B,OAAS/B,EAAO8B,OAAS9B,EAAOgC,MAC5CjG,KAAKuF,6BAA+BO,EAI5CI,WACJ,IAAIhE,EAAIlC,KAAKgE,MAAMmC,YACnB,OAAKjE,IAAK,EAAAkE,EAAA,GAAUlE,EAAG,IAAIE,MAChB,IAAIA,MAER,EAAAiE,EAAA,GAASnE,GAGpBoE,UACI,OAAKtG,KAAK8C,SAGH,CACHmB,OAAQjE,KAAK6F,cAAchF,MAC3BqD,QAASlE,KAAKkE,QAAQrD,MACtB0F,WAAYvG,KAAKwG,mBACjBC,iBAAkBzG,KAAKyG,iBAAiB5F,MACxCmD,MAAOhE,KAAKkG,YAPL,KAWfQ,QAAQC,GACJ3G,KAAK4G,UAAYD,EACjB3G,KAAKS,SAGDoF,cACJ7F,KAAKiE,OAAO7C,aAAa,OAAQ,QACjC,IAAI6C,EAASjE,KAAKiE,OAAOpD,MAEzB,GADAb,KAAKiE,OAAO7C,aAAa,OAAQ,UACnB,IAAV6C,EACA,MAAO,CAAE8B,OAAO,EAAOE,OAAO,GAElChC,EAASA,EAAO4C,QAAQ,IAAK,KAC7B5C,EAASA,EAAO4C,QAAQ,KAAM,IAC9B,IAAIC,EAAcC,WAAW9C,GAC7B,OAAI+C,MAAMF,GACC,CAAEf,OAAO,EAAOE,OAAO,GAE3B,CAAEF,OAAO,EAAMlF,MAAOiG,GAGL,uBACxB,OAAO9G,KAAKwE,KAAK,qBAGW,2BAC5B,OAAOxE,KAAK4C,UAAUqE,KAAI7D,GAAMpD,KAAKwE,KAAK,cAAgBpB,EAAEnC,MAGlC,yBAC1B,OAAOjB,KAAK4C,UAAUsE,QAAO9D,GAAMpD,KAAKwE,KAAK,cAAgBpB,EAAEnC,IAAyBuE,UACnFyB,KAAI7D,GAAKA,EAAEnC,KAGZsE,4BACJ,IAAI4B,EAAW,CACXrB,cAAe9F,KAAKiE,OAAOpD,MAC3BuG,eAAgBpH,KAAKkE,QAAQrD,MAC7BwG,sBAAuBrH,KAAKyG,iBAAiB5F,MAC7CyG,gBAAiBtH,KAAKwG,mBAAmBlB,OAAS,GAMtD,OAJAtF,KAAKqE,mBAAmB2B,QAAUhG,KAAK2C,qBAAuBwE,EAASrB,YACvE9F,KAAKoE,oBAAoB4B,QAAUhG,KAAK2C,qBAAuBwE,EAASC,aACxEpH,KAAKmE,2BAA2B6B,QAAUhG,KAAK2C,qBAAuBwE,EAASE,oBAC/ErH,KAAKuE,uBAAuByB,QAAUhG,KAAK2C,qBAAuBwE,EAASG,iBACnEC,OAAOC,OAAOL,GAAUM,MAAK9G,GAAU,GAALA,IAGlC,aAACE,GACTb,KAAK4C,UAAY/B,EACjBb,KAAKS,SAGkB,4BAACI,GACxBb,KAAK6C,YAAchC,EACnBb,KAAKS,SAGTA,SACI,GAAKT,KAAK8C,SAAV,CAGA,IAAK9C,KAAK+C,cAAgB/C,KAAK4G,UAAW,CACtC5G,KAAK+C,cAAe,EACpB/C,KAAKkE,QAAQrD,MAAQb,KAAK4G,UAAUc,aACpC1H,KAAKyG,iBAAiB5F,MAAQb,KAAK4G,UAAUe,mBAE7C,IAAK,IAAIvE,KAAKpD,KAAK4C,UACP5C,KAAKwE,KAAK,cAAgBpB,EAAEnC,IAClCuE,UAAYxF,KAAK4G,UAAUgB,cAAcC,MAAKC,GAAKA,GAAK1E,EAAEnC,KAEhDjB,KAAKwE,KAAL,KACNgB,SAAWxF,KAAK0F,qBAAqB+B,MAAK3D,IAAMA,EAAE0B,UAC5DxF,KAAKgE,MAAMnD,MAAQoB,EAAiBjC,KAAK4G,UAAUmB,WACnD/H,KAAKiE,OAAOpD,MAAZ,UAAuBb,KAAK4G,UAAUoB,MAE1ChI,KAAKkD,uBAAuBzC,OAAOT,KAAK4C,WAAW,CAACqF,EAASC,KACzDD,EAAQC,OAASA,EACjBD,EAAQE,UAAY,uBAExBnI,KAAKsD,mBAAmB7C,OAAOT,KAAK4C,WAAW,CAACqF,EAASC,KACrDD,EAAQC,OAASA,KAErBlI,KAAKuD,gCAAgC9C,OAAOT,KAAK6C,aAAa,WAG/D,MAAMuF,EAAgC,2BAC7C/G,eAAeC,OAAO8G,EAA+B1F,I,qBElP/C,SAAU2F,EAAaC,EAAoEC,GAC7FD,EAASE,SAAS1E,IACdA,EAAED,iBAAiB,SAAS4E,IACxBA,EAAGC,iBACHH,EAAqBI,SAAS7E,EAAEhC,aAAa,e,qGCAnD,MAAO8G,EAET9I,YAAoB+I,GAAA,KAAAA,MAAAA,EAKZC,YAUJ,OATK9I,KAAK+I,SACN/I,KAAK+I,OAAS,IAAIC,OAAO,IAAIC,IAAI,kBACjCjJ,KAAK+I,OAAOlF,iBAAiB,WAAW4E,I,MACpC,GAAqB,kBAAV,QAAP,EAAAA,EAAGS,YAAI,eAAEtF,MAAyB,CAClC,IAAIuF,EAAMV,EAAGS,KAAKC,IAClBnJ,KAAK6I,MAAMO,SAASD,QAIzBnJ,KAAK+I,OAGhBM,2BAA2BC,EAAwBC,GAC/C,IAAIJ,EAAyC,CACzCG,eAAgBA,EAChB1F,KAAM,EACN2F,QAASA,GAEbvJ,KAAK8I,YAAYU,YAAYL,GAGjCM,2BAIIzJ,KAAK8I,YAAYU,YAH0B,CACvC5F,KAAM,IAKd8F,oBAAoBC,GAChB,IAAIR,EAAkC,CAClCvF,KAAM,EACN+F,kBAAmBA,GAEvB3J,KAAK8I,YAAYU,YAAYL,GAGjCS,iBAAiBD,EAA2BE,GACxC,IAAIV,EAA+B,CAC/BvF,KAAM,EACN+F,kBAAmBA,EACnBE,iBAAkBA,GAEtB7J,KAAK8I,YAAYU,YAAYL,IAI/B,SAAUW,EAAqBC,GACjC,OAAOA,EAAeC,IAAI,iBACtBD,GAAkB,IAAInB,EAAcmB,EAAelB,W,oECxDrD,MAAOoB,EAETnK,YAAoBoK,EACRC,GADQ,KAAAD,UAAAA,EACR,KAAAC,GAAAA,EAGU,uBAACb,EAAwBc,GAC3C,IAAIC,QAAerK,KAAKkK,UAAUI,cAAchB,EAAgBc,GAEhE,OADApK,KAAKmK,GAAGI,YAAYjB,EAAgB,CAACe,IAC9BA,EAGc,0BAACf,EAAwBc,GAC9C,IAAIC,QAAerK,KAAKkK,UAAUM,oBAAoBlB,EAAgBc,GAEtE,OADApK,KAAKmK,GAAGI,YAAYjB,EAAgB,CAACe,IAC9BA,EAGY,wBAACf,EAAwBmB,GAC5C,IAAIJ,QAAerK,KAAKkK,UAAUQ,kBAAkBpB,EAAgBmB,GAEpE,OADAzK,KAAKmK,GAAGI,YAAYjB,EAAgB,CAACe,IAC9BA,G,2CCXT,MAAOM,EAET7K,YAAmBwJ,GAAA,KAAAA,eAAAA,EADV,KAAA1F,KAAI,GAKX,MAAOgH,EAET9K,YAAmBwJ,EAA+BmB,EACvCI,EAA+CjE,GADvC,KAAA0C,eAAAA,EAA+B,KAAAmB,YAAAA,EACvC,KAAAI,mBAAAA,EAA+C,KAAAjE,UAAAA,EAFjD,KAAAhD,KAAI,IAMX,MAAOkH,EAEThL,YAAmBwJ,GAAA,KAAAA,eAAAA,EADV,KAAA1F,KAAI,IAKX,MAAOmH,EAETjL,YAAmBwJ,EAA+B1C,GAA/B,KAAA0C,eAAAA,EAA+B,KAAA1C,UAAAA,EADzC,KAAAhD,KAAI,IAKX,MAAOoH,EAETlL,YAAmBwJ,GAAA,KAAAA,eAAAA,EADV,KAAA1F,KAAI,IAKX,MAAOqH,EAETnL,YAAmBwJ,EAA+BmB,GAA/B,KAAAnB,eAAAA,EAA+B,KAAAmB,YAAAA,EADzC,KAAA7G,KAAI,IAKX,MAAOsH,EAETpL,YAAmBwJ,EAA+B6B,EAAuCvE,GAAtE,KAAA0C,eAAAA,EAA+B,KAAA6B,uBAAAA,EAAuC,KAAAvE,UAAAA,EADhF,KAAAhD,KAAI,IAKX,MAAOwH,EAETtL,YAAmBwJ,EAA+BmB,GAA/B,KAAAnB,eAAAA,EAA+B,KAAAmB,YAAAA,EADzC,KAAA7G,KAAI,IAKX,MAAOyH,EAETvL,YAAmBwJ,EAA+BmB,GAA/B,KAAAnB,eAAAA,EAA+B,KAAAmB,YAAAA,EADzC,KAAA7G,KAAI,IAKX,MAAO0H,EAETxL,YAAmBwJ,EAA+BiC,GAA/B,KAAAjC,eAAAA,EAA+B,KAAAiC,sBAAAA,EADzC,KAAA3H,KAAI,IAKX,MAAO4H,EAET1L,YAAmBwJ,EAA+BmB,GAA/B,KAAAnB,eAAAA,EAA+B,KAAAmB,YAAAA,EADzC,KAAA7G,KAAI,IAqBX,MAAO6H,EACT3L,YAAoB+I,EACRsB,EACAuB,EACAC,EACApD,GAJQ,KAAAM,MAAAA,EACR,KAAAsB,GAAAA,EACA,KAAAuB,mBAAAA,EACA,KAAAC,cAAAA,EACA,KAAApD,qBAAAA,EAIY,yBAACoB,EAA2Bc,GAChD,IAAImB,QAAW5L,KAAKmK,GAAG0B,sBAAsBlC,GAC7C,GAAKiC,EAEE,CACH,IAAIjF,QAAU3G,KAAKmK,GAAG2B,sBAAsBF,EAAG3K,GAAIwJ,GAC/C7D,EAAuB,KAC3B,GAAID,EAAE0D,OAAQ,CACV,IAAI0B,EAAkBpF,EAAE0D,OACxBzD,EAAY,CACRc,aAAcqE,EAAgBnF,UAAUc,aACxCC,mBAAoBoE,EAAgBnF,UAAUe,mBAC9CC,cAAemE,EAAgBnF,UAAUgB,cACzC3G,GAAI8K,EAAgBnF,UAAU3F,GAC9B+K,OAAQ,gBACRhE,KAAM+D,EAAgBnF,UAAUoB,KAChCD,UAAWgE,EAAgBnF,UAAUmB,WAG7C/H,KAAK6I,MAAMO,SAAS,IAAIwB,EAAmBgB,EAAG3K,GAAIwJ,EAAa9D,EAAEqF,OAAQpF,IACzE5G,KAAK2L,cAActC,2BAA2BuC,EAAG3K,GAAI2F,EAAYA,EAAUc,aAAe,WAjB1F1H,KAAKuI,qBAAqB0D,eAqBD,oCAC7B,IAAIhL,EAAKjB,KAAK6I,MAAMqD,MAAMC,cAAcC,4BAA8BpM,KAAKmK,GAAGkC,oCAC9ErM,KAAK6I,MAAMO,SAAS,IAAIuB,EAAuC1J,IAC/DjB,KAAK2L,cAActC,2BAA2BpI,EAAI,MAGX,4CAACA,GACxCjB,KAAK6I,MAAMO,SAAS,IAAIuB,EAAuC1J,UACzDjB,KAAKmK,GAAGmC,kCAAkCrL,GAChDjB,KAAK2L,cAActC,2BAA2BpI,EAAI,MAG5B,2BAACqI,EACvB1C,GACA,IAAI3F,GAAK,eACGjB,KAAKuM,4BAA4BjD,EAAgBrI,EAAI2F,UACvD5G,KAAKwM,2BAA2BlD,EAAgB1C,EAAW3F,GAErEjB,KAAK2L,cAAclC,2BAGkB,kCAACH,EACtCrI,EACA2F,GACA,KAAI,kBAAmB6F,cAAa,gBAAiBC,QA8BjD,OADAC,QAAQC,IAAI,kCACL,EA9BkD,CACzD,IAAIC,QAAYJ,UAAUK,cAAcC,MACxC,IACI,IAAIC,EAA4C,CAC5CtF,aAAcd,EAAU1C,QACxByD,mBAAoBf,EAAUH,iBAC9BmB,cAAehB,EAAUL,WACzBtF,GAAIA,EACJ+G,KAAMpB,EAAU3C,OAChB8D,UAAWnB,EAAU5C,MACrBsF,eAAgBA,SAEdtJ,KAAKmK,GAAG8C,2BAA2BD,SACnCH,EAAIK,KAAKC,SAAS,KACxBnN,KAAK6I,MAAMO,SAAS,IAAI2B,EAAsBzB,EAAgB,CAC1D5B,aAAcsF,EAAoBtF,aAClCC,mBAAoBqF,EAAoBrF,mBACxCC,cAAeoF,EAAoBpF,cACnC3G,GAAI+L,EAAoB/L,GACxB+G,KAAMgF,EAAoBhF,KAC1BD,UAAWiF,EAAoBjF,UAC/BiE,OAAQ,2BAEd,MAAOoB,GAGL,OAFAT,QAAQU,KAAK,qCACPrN,KAAKmK,GAAGmD,sCAAsCrM,IAC7C,GAMf,OAAO,EAGqB,iCAACqI,EAC7B1C,EAA2B3F,EAAa,MACxC,IAAImJ,EAAgC,CAChC1C,aAAcd,EAAU1C,QACxByD,mBAAoBf,EAAUH,iBAC9BmB,cAAehB,EAAUL,WACzBtF,GAAIA,IAAM,SACV+G,KAAMpB,EAAU3C,OAChB8D,UAAWnB,EAAU5C,OAEzBhE,KAAK6I,MAAMO,SAAS,IAAI0B,EAAqBxB,IAC7C,IACI,IAAIe,QAAerK,KAAK0L,mBAAmB6B,iBAAiBjE,EAAgBc,GAC5EpK,KAAK6I,MAAMO,SAAS,IAAI2B,EAAsBzB,EAAgB,CAC1D5B,aAAc2C,EAAOzD,UAAUc,aAC/BC,mBAAoB0C,EAAOzD,UAAUe,mBACrCC,cAAeyC,EAAOzD,UAAUgB,cAChC3G,GAAIoJ,EAAOzD,UAAU3F,GACrB+G,KAAMqC,EAAOzD,UAAUoB,KACvBD,UAAWsC,EAAOzD,UAAUmB,UAC5BiE,OAAQ,mBAGhB,MAAOoB,GAGH,MAFAT,QAAQa,MAAMJ,GACdpN,KAAK6I,MAAMO,SAAS,IAAI4B,EAA2B1B,IAC7C8D,GAIW,0BAAC9D,EACtBmB,EACA7D,GACA,IAAIwD,EAAsC,CACtC1C,aAAcd,EAAU1C,QACxByD,mBAAoBf,EAAUH,iBAC9BmB,cAAehB,EAAUL,WACzBtF,GAAIwJ,EACJzC,KAAMpB,EAAU3C,OAChB8D,UAAWnB,EAAU5C,OAEzBhE,KAAK6I,MAAMO,SAAS,IAAI6B,EAAoB3B,EAAgBmB,IAC5D,IACI,IAAIJ,QAAerK,KAAK0L,mBAAmBlB,oBAAoBlB,EAAgBc,GAC/EpK,KAAK6I,MAAMO,SAAS,IAAI8B,EAAoB5B,EAAgBe,EAAOc,uBAAwB,CACvFzD,aAAc2C,EAAOzD,UAAUc,aAC/BC,mBAAoB0C,EAAOzD,UAAUe,mBACrCC,cAAeyC,EAAOzD,UAAUgB,cAChC3G,GAAIoJ,EAAOzD,UAAU3F,GACrB+G,KAAMqC,EAAOzD,UAAUoB,KACvBD,UAAWsC,EAAOzD,UAAUmB,UAC5BiE,OAAQ,mBAGhB,MAAOoB,GAGH,MAFAT,QAAQa,MAAMJ,GACdpN,KAAK6I,MAAMO,SAAS,IAAIgC,EAA0B9B,EAAgBmB,IAC5D2C,EAEVpN,KAAK2L,cAAclC,2BAGA,wBAACH,EACpBmB,GACAzK,KAAK6I,MAAMO,SAAS,IAAIiC,EAAkB/B,EAAgBmB,IAC1D,IACI,IAAIJ,QAAerK,KAAK0L,mBAAmBhB,kBAAkBpB,EAAgBmB,GAC7EzK,KAAK6I,MAAMO,SAAS,IAAIkC,EAAmBhC,EAAgBe,EAAOkB,wBAEtE,MAAO6B,GAGH,MAFAT,QAAQa,MAAMJ,GACdpN,KAAK6I,MAAMO,SAAS,IAAIoC,EAAwBlC,EAAgBmB,IAC1D2C,GAId/D,2BAA2BC,EAAwBC,GAC/CvJ,KAAK2L,cAActC,2BAA2BC,EAAgBC,IAIhE,SAAUkE,EAA8B1D,GAC1C,OAAOA,EAAeC,IAAI,0BACtBD,GAAkB,IAAI0B,EAAuB1B,EAAelB,MACxDkB,EAAeI,GDpPrB,SAAoCJ,GACtC,OAAOA,EAAeC,IAAI,wBACtBD,GAAkB,IAAIE,EAAmBF,EAAeG,UACpDH,EAAeI,MCkPfuD,CAA0B3D,IAC1B,OAAqBA,IACrB,OAA4BA,Q,qDCjRlC,MAAOvI,EAET1B,YAA6ByB,GAAA,KAAAA,SAAAA,EAGrBoM,OAKJ,OAJI,MAAQ3N,KAAK4N,WACb5N,KAAK4N,SAAWnK,SAASC,cAAc,YACvC1D,KAAK4N,SAAS5K,UAAYhD,KAAKuB,UAE5BkC,SAASoK,WAAW7N,KAAK4N,SAASE,SAAS,GAGtD5N,cAmBI,OAAO,IAlBP,MAGIJ,YAAoBiO,GAAA,KAAAA,EAAAA,EAFZ,KAAAC,SAAU,EAKlB5N,MAAM0D,GACF,OAAI9D,KAAKgO,UAGTlK,EAAEmK,YAAYjO,KAAK+N,EAAEJ,QACrB3N,KAAKgO,SAAU,GACR,GAEX9M,YACI,OAAOlB,KAAKgO,UAGQhO","sources":["webpack://kontokorrent/./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.ts","webpack://kontokorrent/./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.html","webpack://kontokorrent/./src/components/MdcCheckbox/MdcCheckbox.ts","webpack://kontokorrent/./src/components/MdcCheckbox/MdcCheckbox.html","webpack://kontokorrent/./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.ts","webpack://kontokorrent/./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.html","webpack://kontokorrent/./src/utils/toDateInputValue.ts","webpack://kontokorrent/./src/components/BezahlungEintragenForm/BezahlungEintragenForm.ts","webpack://kontokorrent/./src/components/BezahlungEintragenForm/BezahlungEintragenForm.html","webpack://kontokorrent/./src/components/convertLinks.ts","webpack://kontokorrent/./src/lib/WorkerService.ts","webpack://kontokorrent/./src/lib/BezahlungenService.ts","webpack://kontokorrent/./src/state/actions/BezahlungActionCreator.ts","webpack://kontokorrent/./src/utils/ReuseableTemplate.ts"],"sourcesContent":["import { Person } from \"../../state/State\";\nimport { ReuseableTemplate, TemplateInstance } from \"../../utils/ReuseableTemplate\";\nimport template from \"./BezahlendePersonRadioButton.html\";\nimport \"./BezahlendePersonRadioButton.scss\";\n\nconst reuseableTemplate = new ReuseableTemplate(template);\n\nexport class BezahlendePersonRadioButton extends HTMLElement {\n    private input: HTMLInputElement;\n    private personLabel: HTMLLabelElement;\n    private label: HTMLLabelElement;\n    private templateInstance: TemplateInstance;\n    private _radioName: string;\n    private personName: string;\n    private personId: string;\n\n    constructor() {\n        super();\n        this.templateInstance = reuseableTemplate.getInstance();\n    }\n\n    connectedCallback() {\n        if (this.templateInstance.apply(this)) {\n            this.input = this.querySelector(\"input\");\n            this.personLabel = this.querySelector(`[data-ref=\"label\"]`);\n            this.label = this.querySelector(\"label\");\n            this.update();\n        }\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    set radioName(v: string) {\n        this._radioName = v;\n    }\n\n    set person(value: Person) {\n        this.personName = value.name;\n        this.personId = value.id;\n        this.update();\n    }\n\n    private update() {\n        if (this.templateInstance.isApplied()) {\n            this.input.value = this.personId;\n            this.personLabel.innerText = this.personName;\n            this.input.id = this.personId;\n            this.label.setAttribute(\"for\", this.personId);\n            this.input.name = this._radioName;\n        }\n    }\n}\n\ncustomElements.define(\"bezahlende-person-radio-button\", BezahlendePersonRadioButton);\n","// Module\nvar code = \"<input type=\\\"radio\\\" class=\\\"bezahlende-person-radio__input\\\"/> <label class=\\\"bezahlende-person-radio\\\"> <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\"> <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/> <path d=\\\"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z\\\"/> </svg> <span data-ref=\\\"label\\\"></span> </label>\";\n// Exports\nexport default code;","import { isThursday } from \"date-fns\";\nimport { ReuseableTemplate, TemplateInstance } from \"../../utils/ReuseableTemplate\";\nimport templateContent from \"./MdcCheckbox.html\";\nimport \"./MdcCheckbox.scss\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport const CheckboxIdAttribute = \"checkbox-id\";\nexport const CheckboxNameAttribute = \"checkbox-name\";\n\nexport class MdcCheckbox extends HTMLElement {\n    private nativeControl: HTMLInputElement;\n    private templateInstance: TemplateInstance;\n\n    constructor() {\n        super();\n        this.templateInstance = template.getInstance();\n    }\n\n    connectedCallback() {\n        if (this.templateInstance.apply(this)) {\n            this.nativeControl = this.querySelector(\".mdc-checkbox__native-control\");\n            this.updateAttributes();\n        }\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        if (this.nativeControl) {\n            this.nativeControl.id = this.getAttribute(CheckboxIdAttribute);\n            this.nativeControl.name = this.getAttribute(CheckboxNameAttribute);\n        }\n    }\n\n    static get observedAttributes() {\n        return [CheckboxIdAttribute, CheckboxNameAttribute];\n    }\n}\n\ncustomElements.define(\"mdc-checkbox\", MdcCheckbox);\n","// Module\nvar code = \"<div class=\\\"mdc-touch-target-wrapper\\\"> <div class=\\\"mdc-checkbox mdc-checkbox--touch\\\"> <input type=\\\"checkbox\\\" class=\\\"mdc-checkbox__native-control\\\"/> <div class=\\\"mdc-checkbox__background\\\"> <svg class=\\\"mdc-checkbox__checkmark\\\" viewBox=\\\"0 0 24 24\\\"> <path class=\\\"mdc-checkbox__checkmark-path\\\" fill=\\\"none\\\" d=\\\"M1.73,12.91 8.1,19.28 22.79,4.59\\\"/> </svg> <div class=\\\"mdc-checkbox__mixedmark\\\"></div> </div> <div class=\\\"mdc-checkbox__ripple\\\"></div> </div> </div>\";\n// Exports\nexport default code;","import templateContent from \"./EmpfaengerCheckbox.html\";\nimport \"./EmpfaengerCheckbox.scss\";\nimport \"../MdcCheckbox/MdcCheckbox\";\nimport { MdcCheckbox } from \"../MdcCheckbox/MdcCheckbox\";\nimport { Person } from \"../../state/State\";\nimport { ReuseableTemplate, TemplateInstance } from \"../../utils/ReuseableTemplate\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport class EmpfaengerCheckbox extends HTMLElement {\n    private mdcCheckBox: MdcCheckbox;\n    private label: HTMLLabelElement;\n    private templateInstance: TemplateInstance;\n\n    private checkboxId:string;\n    private personName:string;\n\n    constructor() {\n        super();\n        this.templateInstance = template.getInstance();\n    }\n\n    set person(value: Person) {\n        this.personName = value.name;\n        this.checkboxId = `empfaenger-${value.id}`;\n        this.update();\n    }\n\n    connectedCallback() {\n        if (this.templateInstance.apply(this)) {\n            this.mdcCheckBox = this.querySelector(\"mdc-checkbox\");\n            this.label = this.querySelector(\"label\");\n            this.update();\n        }\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    private update() {\n        if (this.templateInstance.isApplied()) {\n            this.label.innerText = this.personName;\n            this.label.setAttribute(\"for\", this.checkboxId);\n            this.mdcCheckBox.setAttribute(\"checkbox-id\", this.checkboxId);\n            this.mdcCheckBox.setAttribute(\"checkbox-name\", this.checkboxId);\n        }\n    }\n}\n\ncustomElements.define(\"empfaenger-checkbox\", EmpfaengerCheckbox);\n","// Module\nvar code = \"<mdc-checkbox></mdc-checkbox> <label></label>\";\n// Exports\nexport default code;","export function toDateInputValue(d: Date) {\n    var local = new Date(d);\n    local.setMinutes(d.getMinutes() - d.getTimezoneOffset());\n    return local.toJSON().slice(0, 10);\n}","import { Bezahlung, Person } from \"../../state/State\";\nimport template from \"./BezahlungEintragenForm.html\";\nimport \"./BezahlungEintragenForm.scss\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { BezahlendePersonRadioButton } from \"../BezahlendePersonRadioButton/BezahlendePersonRadioButton\";\nimport { EmpfaengerCheckbox } from \"../EmpfaengerCheckbox/EmpfaengerCheckbox\";\nimport { toDateInputValue } from \"../../utils/toDateInputValue\";\nimport { endOfDay, isSameDay } from \"date-fns\";\nimport { MdcCheckbox } from \"../MdcCheckbox/MdcCheckbox\";\n\nexport class BezahlungEintragenForm extends HTMLElement {\n    private zahlendePersonRenderer: ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>;\n    private empfaengerRenderer: ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>;\n    private datum: HTMLInputElement;\n    private betreff: HTMLInputElement;\n    private betrag: HTMLInputElement;\n    private zahlendePersonMissingError: HTMLSpanElement;\n    private betreffMissingError: HTMLDivElement;\n    private betragMissingError: HTMLDivElement;\n    private empfaengerMissingError: HTMLDivElement;\n    private validationRequested: boolean = false;\n    private form: HTMLFormElement;\n    private formInputListener: () => void;\n    private betragInvalidError: HTMLDivElement;\n    private empfaengerAuswahl: HTMLDivElement;\n    private _personen: Person[] = [];\n    private alleCheck: MdcCheckbox;\n    private alleClickListener: () => void;\n    private betreffInputListener: () => void;\n    private beschreibungVorschlaegeRenderer: ArrayToElementRenderer<string, HTMLElement, string>;\n    private vorschlaege: string[] = [];\n    private betreffKeyDownListener: (e: KeyboardEvent) => void;\n    private rendered = false;\n    private bezahlung: Bezahlung;\n    private bezahlungSet = false;\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.empfaengerAuswahl = this.querySelector(\"#empfaenger-auswahl\");\n            this.zahlendePersonRenderer = new ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>(\n                this.querySelector(\"#zahlende-person-auswahl\"),\n                p => p.id,\n                p => new BezahlendePersonRadioButton());\n            this.empfaengerRenderer = new ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>(\n                this.empfaengerAuswahl,\n                p => p.id,\n                p => new EmpfaengerCheckbox());\n            this.beschreibungVorschlaegeRenderer = new ArrayToElementRenderer<string, HTMLElement, string>(\n                this.querySelector(\"#beschreibung-vorschlaege\"),\n                p => p,\n                p => {\n                    let el = document.createElement(\"button\");\n                    el.className = \"bezahlung-eintragen-form__vorschlag\";\n                    el.innerText = p;\n                    el.type = \"button\";\n                    el.addEventListener(\"click\", e => {\n                        this.completeBetreff(p);\n                    });\n                    return el;\n                });\n            this.datum = this.querySelector(\"#datum\");\n            this.datum.value = toDateInputValue(new Date());\n            this.betrag = this.querySelector(\"#betrag\");\n            this.betreff = this.querySelector(\"#betreff\");\n            this.zahlendePersonMissingError = this.querySelector(\"#zahlende-person-missing-error\");\n            this.betreffMissingError = this.querySelector(\"#betreff-missing-error\");\n            this.betragMissingError = this.querySelector(\"#betrag-missing-error\");\n            this.betragInvalidError = this.querySelector(\"#betrag-invalid-error\");\n            this.empfaengerMissingError = this.querySelector(\"#empfaenger-missing-error\");\n            this.form = this.querySelector(\"#bezahlung-eintragen-form\");\n            this.alleCheck = this.querySelector(\"#alle-check\");\n            this.update();\n        }\n\n        this.formInputListener = () => this.onFormInput();\n        this.form.addEventListener(\"input\", this.formInputListener);\n        this.betrag.focus();\n        this.alleClickListener = () => this.alleClick();\n        this.alleCheck.addEventListener(\"input\", this.alleClickListener);\n        this.betreffInputListener = () => {\n            this.dispatchEvent(new CustomEvent(\"betreffChanged\", { detail: this.betreff.value }));\n        };\n        this.betreff.addEventListener(\"input\", this.betreffInputListener);\n        this.betreffKeyDownListener = (e: KeyboardEvent) => this.betreffKeyDown(e);\n        this.betreff.addEventListener(\"keydown\", this.betreffKeyDownListener)\n    }\n\n    private betreffKeyDown(e: KeyboardEvent) {\n        if (e.code == \"Enter\" && this.vorschlaege?.length > 0) {\n            this.completeBetreff(this.vorschlaege[0]);\n        }\n    }\n\n    private completeBetreff(p: string) {\n        this.betreff.value = p;\n        this.betreffInputListener();\n        this.betreff.focus();\n        this.validateWhileManipulating();\n    }\n\n    private alleClick() {\n        let checked = (this.form[\"alle\"] as HTMLInputElement).checked;\n        for (let c of this.empfaengerCheckboxen) {\n            c.checked = checked;\n        }\n    }\n\n    disconnectedCallback() {\n        this.form.removeEventListener(\"input\", this.formInputListener);\n        this.alleCheck.removeEventListener(\"input\", this.alleClickListener);\n        this.betreff.removeEventListener(\"input\", this.betreffInputListener);\n        this.betreff.removeEventListener(\"keydown\", this.betreffKeyDownListener)\n    }\n\n    private onFormInput() {\n        this.validateWhileManipulating();\n    }\n\n    validate() {\n        if (!this.rendered) {\n            return false;\n        }\n        this.validationRequested = true;\n        let betrag = this.parseBetrag();\n        let betragValid = betrag.valid;\n        this.betragInvalidError.hidden = betrag.valid || betrag.empty;\n        let valid = this.validateWhileManipulating() && betragValid;\n        return valid;\n    }\n\n    private getDatum() {\n        let d = this.datum.valueAsDate;\n        if (!d || isSameDay(d, new Date())) {\n            return new Date();\n        }\n        return endOfDay(d);\n    }\n\n    getData() {\n        if (!this.rendered) {\n            return null;\n        }\n        return {\n            betrag: this.parseBetrag().value,\n            betreff: this.betreff.value,\n            empfaenger: this.selectedEmpfaenger,\n            bezahlendePerson: this.bezahlendePerson.value,\n            datum: this.getDatum()\n        }\n    }\n\n    setData(b: Bezahlung) {\n        this.bezahlung = b;\n        this.update();\n    }\n\n    private parseBetrag() {\n        this.betrag.setAttribute(\"type\", \"text\");\n        let betrag = this.betrag.value;\n        this.betrag.setAttribute(\"type\", \"number\");\n        if (betrag == \"\") {\n            return { valid: false, empty: true };\n        }\n        betrag = betrag.replace(\",\", \".\");\n        betrag = betrag.replace(/ /g, \"\");\n        let betragFloat = parseFloat(betrag);\n        if (isNaN(betragFloat)) {\n            return { valid: false, empty: false };\n        }\n        return { valid: true, value: betragFloat };\n    }\n\n    private get bezahlendePerson(): HTMLInputElement {\n        return this.form[\"bezahlende-person\"];\n    }\n\n    private get empfaengerCheckboxen(): HTMLInputElement[] {\n        return this._personen.map(p => (this.form[\"empfaenger-\" + p.id] as HTMLInputElement));\n    }\n\n    private get selectedEmpfaenger(): string[] {\n        return this._personen.filter(p => (this.form[\"empfaenger-\" + p.id] as HTMLInputElement).checked)\n            .map(p => p.id);\n    }\n\n    private validateWhileManipulating() {\n        let validity = {\n            betragValid: !!this.betrag.value,\n            betreffValid: !!this.betreff.value,\n            zahlendePersonValid: !!this.bezahlendePerson.value,\n            empfaengerValid: this.selectedEmpfaenger.length > 0\n        };\n        this.betragMissingError.hidden = !this.validationRequested || validity.betragValid;\n        this.betreffMissingError.hidden = !this.validationRequested || validity.betreffValid;\n        this.zahlendePersonMissingError.hidden = !this.validationRequested || validity.zahlendePersonValid;\n        this.empfaengerMissingError.hidden = !this.validationRequested || validity.empfaengerValid;\n        return !Object.values(validity).some(v => v == false);\n    }\n\n    set personen(value: Person[]) {\n        this._personen = value;\n        this.update();\n    }\n\n    set beschreibungVorschlaege(value: string[]) {\n        this.vorschlaege = value;\n        this.update();\n    }\n\n    update() {\n        if (!this.rendered) {\n            return;\n        }\n        if (!this.bezahlungSet && this.bezahlung) {\n            this.bezahlungSet = true;\n            this.betreff.value = this.bezahlung.beschreibung;\n            this.bezahlendePerson.value = this.bezahlung.bezahlendePersonId;\n            // this can fail if personen not yet loaded\n            for (let p of this._personen) {\n                let e = this.form[\"empfaenger-\" + p.id] as HTMLInputElement;\n                e.checked = !!this.bezahlung.empfaengerIds.find(i => i == p.id);\n            }\n            let alleInput = this.form[\"alle\"] as HTMLInputElement;\n            alleInput.checked = !this.empfaengerCheckboxen.some(e => !e.checked);\n            this.datum.value = toDateInputValue(this.bezahlung.zeitpunkt);\n            this.betrag.value = `${this.bezahlung.wert}`;\n        }\n        this.zahlendePersonRenderer.update(this._personen, (element, person) => {\n            element.person = person;\n            element.radioName = \"bezahlende-person\";\n        });\n        this.empfaengerRenderer.update(this._personen, (element, person) => {\n            element.person = person;\n        });\n        this.beschreibungVorschlaegeRenderer.update(this.vorschlaege, () => { });\n    }\n}\nexport const BezahlungEintragenFormTagName = \"bezahlung-eintragen-form\";\ncustomElements.define(BezahlungEintragenFormTagName, BezahlungEintragenForm);\n","// Module\nvar code = \"<form novalidate class=\\\"bezahlung-eintragen-form\\\" id=\\\"bezahlung-eintragen-form\\\"> <div id=\\\"betreff-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Es muss ein <label class=\\\"alert__field-label\\\" for=\\\"betreff\\\">Betreff</label> angegeben werden.</div> <div id=\\\"betrag-invalid-error\\\" class=\\\"alert alert--error\\\" hidden> Der <label class=\\\"alert__field-label\\\" for=\\\"betrag\\\">Betrag</label> ist ungültig.</div> <div id=\\\"betrag-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Es muss ein <label class=\\\"alert__field-label\\\" for=\\\"betrag\\\">Betrag</label> angegeben werden.</div> <span id=\\\"zahlende-person-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Wähle eine Person aus die bezahlt. </span> <div id=\\\"empfaenger-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Wähle Personen aus für die bezahlt wird. </div> <label for=\\\"betrag\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Betrag</label> <input name=\\\"betrag\\\" id=\\\"betrag\\\" type=\\\"number\\\" novalidate step=\\\"any\\\"> <label for=\\\"zahlende-person\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Diese Person zahlt</label> <div id=\\\"zahlende-person-auswahl\\\"></div> <div class=\\\"bezahlung-eintragen-form__empfaenger-row\\\"> <label for=\\\"empfaenger\\\" class=\\\"bezahlung-eintragen-form__label\\\">für diese Personen</label> <mdc-checkbox checkbox-id=\\\"alle\\\" checkbox-name=\\\"alle\\\" id=\\\"alle-check\\\"></mdc-checkbox> <label for=\\\"alle\\\">alle</label> </div> <div id=\\\"empfaenger-auswahl\\\"></div> <label for=\\\"betreff\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Betreff</label> <div id=\\\"beschreibung-vorschlaege\\\" class=\\\"bezahlung-eintragen-form__vorschlaege\\\"></div> <input name=\\\"betreff\\\" id=\\\"betreff\\\" required=\\\"\\\" autocomplete=\\\"off\\\" type=\\\"text\\\"> <label for=\\\"datum\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Datum</label> <input name=\\\"datum\\\" id=\\\"datum\\\" required=\\\"\\\" type=\\\"date\\\"> </form>\";\n// Exports\nexport default code;","import { RoutingActionCreator } from \"../state/actions/RoutingActionCreator\";\n\nexport function convertLinks(elements: Array<HTMLAnchorElement> | NodeListOf<HTMLAnchorElement>, routingActionCreator: RoutingActionCreator) {\n    elements.forEach((e: HTMLAnchorElement) => {\n        e.addEventListener(\"click\", ev => {\n            ev.preventDefault();\n            routingActionCreator.navigate(e.getAttribute(\"href\"));\n        });\n    });\n}","import { ServiceLocator } from \"../ServiceLocator\";\nimport { Store } from \"../state/Store\";\nimport { AusgleichRechnenMessage, GetBeschreibungVorschlaegeMessage, KontokorrentOeffnenMessage, ResetBeschreibungenCacheMessage, WorkerMessageType } from \"../worker/KontokorrentWorker\";\nimport { AusgleichOptions } from \"./ausgleich/AusgleichOptions\";\nimport { GeforderteZahlung } from \"./ausgleich/GeforderteZahlung\";\n\nexport class WorkerService {\n\n    constructor(private store: Store) {\n\n    }\n    private worker: Worker;\n\n    private getWorker() {\n        if (!this.worker) {\n            this.worker = new Worker(new URL(\"../worker/KontokorrentWorker\", import.meta.url));\n            this.worker.addEventListener(\"message\", ev => {\n                if (ev.data?.type == \"statedispatch\") {\n                    let msg = ev.data.msg;\n                    this.store.dispatch(msg);\n                }\n            });\n        }\n        return this.worker;\n    }\n\n    getBeschreibungVorschlaege(kontokorrentId: string, eingabe: string) {\n        let msg: GetBeschreibungVorschlaegeMessage = {\n            kontokorrentId: kontokorrentId,\n            type: WorkerMessageType.GetBeschreibungVorschlaege,\n            eingabe: eingabe\n        };\n        this.getWorker().postMessage(msg);\n    }\n\n    resetBeschreibungenCache() {\n        let msg: ResetBeschreibungenCacheMessage = {\n            type: WorkerMessageType.ResetBeschreibungenCache,\n        };\n        this.getWorker().postMessage(msg);\n    }\n\n    kontokorrentOeffnen(oeffentlicherName: string) {\n        let msg: KontokorrentOeffnenMessage = {\n            type: WorkerMessageType.KontokorrentOeffnen,\n            oeffentlicherName: oeffentlicherName\n        };\n        this.getWorker().postMessage(msg);\n    }\n\n    ausgleichRechnen(oeffentlicherName: string, ausgleichOptions:AusgleichOptions) {\n        let msg: AusgleichRechnenMessage = {\n            type: WorkerMessageType.AusgleichRechnen,\n            oeffentlicherName: oeffentlicherName,\n            ausgleichOptions: ausgleichOptions\n        };\n        this.getWorker().postMessage(msg);\n    }\n}\n\nexport function workerServiceFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"WorkerService\",\n        serviceLocator => new WorkerService(serviceLocator.store));\n}","import { ApiClient } from \"../api/ApiClient\";\nimport { BezahlungBearbeitenRequest } from \"../api/BezahlungBearbeitenRequest\";\nimport { NeueBezahlungRequest } from \"../api/NeueBezahlungRequest\";\nimport { ServiceLocator } from \"../ServiceLocator\";\nimport { KontokorrentDatabase } from \"./KontokorrentDatabase\";\n\nexport class BezahlungenService {\n\n    constructor(private apiClient: ApiClient,\n        private db: KontokorrentDatabase) {\n    }\n\n    async bezahlungAnlegen(kontokorrentId: string, request: NeueBezahlungRequest) {\n        let aktion = await this.apiClient.neueBezahlung(kontokorrentId, request);\n        this.db.addAktionen(kontokorrentId, [aktion]);\n        return aktion;\n    }\n\n    async bezahlungBearbeiten(kontokorrentId: string, request: BezahlungBearbeitenRequest) {\n        let aktion = await this.apiClient.bezahlungBearbeiten(kontokorrentId, request);\n        this.db.addAktionen(kontokorrentId, [aktion]);\n        return aktion;\n    }\n\n    async bezahlungLoeschen(kontokorrentId: string, bezahlungId: string) {\n        let aktion = await this.apiClient.bezahlungLoeschen(kontokorrentId, bezahlungId);\n        this.db.addAktionen(kontokorrentId, [aktion]);\n        return aktion;\n    }\n}\n\nexport function bezahlungenServiceFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"NeueBezahlungService\",\n        serviceLocator => new BezahlungenService(serviceLocator.apiClient,\n            serviceLocator.db));\n}","import { Store } from \"../Store\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { Action } from \"../lib/Action\";\nimport { ActionNames } from \"./ActionNames\";\nimport { NeueBezahlungBackgroundSyncTag } from \"../../sw.constants\";\nimport { BezahlungenService, bezahlungenServiceFactory } from \"../../lib/BezahlungenService\";\nimport { NeueBezahlungRequest } from \"../../api/NeueBezahlungRequest\";\nimport { v4 as uuid } from \"uuid\";\nimport { NeueBezahlungDbModel } from \"../../lib/NeueBezahlungDbModel\";\nimport { Bezahlung, BezahlungStatus } from \"../State\";\nimport { WorkerService, workerServiceFactory } from \"../../lib/WorkerService\";\nimport { BearbeitungsStatus } from \"../../lib/BearbeitungsStatus\";\nimport { BezahlungBearbeitenRequest } from \"../../api/BezahlungBearbeitenRequest\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"./RoutingActionCreator\";\n\nexport class BezahlungEintragenKontokorrentGeandert implements Action {\n    readonly type = ActionNames.BezahlungEintragenKontokorrentGeandert;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport class BezahlungGeoeffnet implements Action {\n    readonly type = ActionNames.BezahlungGeoeffnet;\n    constructor(public kontokorrentId: string, public bezahlungId: string,\n        public bearbeitungsStatus: BearbeitungsStatus, public bezahlung: Bezahlung | null) {\n    }\n}\n\nexport class NeueBezahlungAnlegen implements Action {\n    readonly type = ActionNames.NeueBezahlungAnlegen;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport class NeueBezahlungAngelegt implements Action {\n    readonly type = ActionNames.NeueBezahlungAngelegt;\n    constructor(public kontokorrentId: string, public bezahlung: Bezahlung) {\n    }\n}\n\nexport class NeueBezahlungAnlegenFailed implements Action {\n    readonly type = ActionNames.NeueBezahlungAnlegenFailed;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport class BezahlungBearbeiten implements Action {\n    readonly type = ActionNames.BezahlungBearbeiten;\n    constructor(public kontokorrentId: string, public bezahlungId: string) {\n    }\n}\n\nexport class BezahlungBearbeitet implements Action {\n    readonly type = ActionNames.BezahlungBearbeitet;\n    constructor(public kontokorrentId: string, public bearbeiteteBezahlungId: string, public bezahlung: Bezahlung) {\n    }\n}\n\nexport class BezahlungBearbeitenFailed implements Action {\n    readonly type = ActionNames.BezahlungBearbeitenFailed;\n    constructor(public kontokorrentId: string, public bezahlungId: string) {\n    }\n}\n\nexport class BezahlungLoeschen implements Action {\n    readonly type = ActionNames.BezahlungLoeschen;\n    constructor(public kontokorrentId: string, public bezahlungId: string) {\n    }\n}\n\nexport class BezahlungGeloescht implements Action {\n    readonly type = ActionNames.BezahlungGeloescht;\n    constructor(public kontokorrentId: string, public geloeschteBezahlungId: string) {\n    }\n}\n\nexport class BezahlungLoeschenFailed implements Action {\n    readonly type = ActionNames.BezahlungLoeschenFailed;\n    constructor(public kontokorrentId: string, public bezahlungId: string) {\n    }\n}\n\nexport type BezahlungActions = BezahlungEintragenKontokorrentGeandert\n    | NeueBezahlungAnlegenFailed\n    | NeueBezahlungAnlegen\n    | NeueBezahlungAngelegt\n    | BezahlungGeoeffnet\n    | BezahlungBearbeiten\n    | BezahlungBearbeitet\n    | BezahlungBearbeitenFailed\n    | BezahlungLoeschen\n    | BezahlungGeloescht\n    | BezahlungLoeschenFailed;\n\nexport interface BezahlungModel {\n    betreff: string, betrag: number, datum: Date, bezahlendePerson: string, empfaenger: string[]\n}\n\nexport class BezahlungActionCreator {\n    constructor(private store: Store,\n        private db: KontokorrentDatabase,\n        private bezahlungenService: BezahlungenService,\n        private workerService: WorkerService,\n        private routingActionCreator: RoutingActionCreator) {\n    }\n\n\n    async bezahlungGeoeffnet(oeffentlicherName: string, bezahlungId: string) {\n        let kk = await this.db.getPerOeffentlichName(oeffentlicherName);\n        if (!kk) {\n            this.routingActionCreator.navigateHome();\n        } else {\n            let b = await this.db.getBearbeitungsStatus(kk.id, bezahlungId);\n            let bezahlung: Bezahlung = null;\n            if (b.aktion) {\n                let bezahlungAktion = b.aktion;\n                bezahlung = {\n                    beschreibung: bezahlungAktion.bezahlung.beschreibung,\n                    bezahlendePersonId: bezahlungAktion.bezahlung.bezahlendePersonId,\n                    empfaengerIds: bezahlungAktion.bezahlung.empfaengerIds,\n                    id: bezahlungAktion.bezahlung.id,\n                    status: BezahlungStatus.Gespeichert,\n                    wert: bezahlungAktion.bezahlung.wert,\n                    zeitpunkt: bezahlungAktion.bezahlung.zeitpunkt\n                };\n            }\n            this.store.dispatch(new BezahlungGeoeffnet(kk.id, bezahlungId, b.status, bezahlung));\n            this.workerService.getBeschreibungVorschlaege(kk.id, bezahlung ? bezahlung.beschreibung : null);\n        }\n    }\n\n    async bezahlungEintragenGeoeffnet() {\n        let id = this.store.state.kontokorrents.activeKontokorrentId || await this.db.getZuletztGesehenerKontokorrentId();\n        this.store.dispatch(new BezahlungEintragenKontokorrentGeandert(id));\n        this.workerService.getBeschreibungVorschlaege(id, null);\n    }\n\n    async bezahlungEintragenKontokorrentChanged(id: string) {\n        this.store.dispatch(new BezahlungEintragenKontokorrentGeandert(id));\n        await this.db.setZuletztGesehenerKontokorrentId(id);\n        this.workerService.getBeschreibungVorschlaege(id, null);\n    }\n\n    async bezahlungHinzufuegen(kontokorrentId: string,\n        bezahlung: BezahlungModel) {\n        let id = uuid();\n        if (!(await this.bezahlungPerSyncHinzufuegen(kontokorrentId, id, bezahlung))) {\n            await this.bezahlungDirektHinzufuegen(kontokorrentId, bezahlung, id);\n        }\n        this.workerService.resetBeschreibungenCache();\n    }\n\n    private async bezahlungPerSyncHinzufuegen(kontokorrentId: string,\n        id: string,\n        bezahlung: BezahlungModel) {\n        if (\"serviceWorker\" in navigator && \"SyncManager\" in window) {\n            let reg = await navigator.serviceWorker.ready;\n            try {\n                let zwischengespeichert: NeueBezahlungDbModel = {\n                    beschreibung: bezahlung.betreff,\n                    bezahlendePersonId: bezahlung.bezahlendePerson,\n                    empfaengerIds: bezahlung.empfaenger,\n                    id: id,\n                    wert: bezahlung.betrag,\n                    zeitpunkt: bezahlung.datum,\n                    kontokorrentId: kontokorrentId\n                }\n                await this.db.bezahlungZwischenspeichern(zwischengespeichert);\n                await reg.sync.register(NeueBezahlungBackgroundSyncTag);\n                this.store.dispatch(new NeueBezahlungAngelegt(kontokorrentId, {\n                    beschreibung: zwischengespeichert.beschreibung,\n                    bezahlendePersonId: zwischengespeichert.bezahlendePersonId,\n                    empfaengerIds: zwischengespeichert.empfaengerIds,\n                    id: zwischengespeichert.id,\n                    wert: zwischengespeichert.wert,\n                    zeitpunkt: zwischengespeichert.zeitpunkt,\n                    status: BezahlungStatus.Zwischengespeichert\n                }));\n            } catch (err) {\n                console.warn(\"background sync not allowed\");\n                await this.db.zwischengespeicherteBezahlungErledigt(id);\n                return false;\n            }\n        } else {\n            console.log(\"background sync not supported\");\n            return false;\n        }\n        return true;\n    }\n\n    async bezahlungDirektHinzufuegen(kontokorrentId: string,\n        bezahlung: BezahlungModel, id: string = null) {\n        let request: NeueBezahlungRequest = {\n            beschreibung: bezahlung.betreff,\n            bezahlendePersonId: bezahlung.bezahlendePerson,\n            empfaengerIds: bezahlung.empfaenger,\n            id: id || uuid(),\n            wert: bezahlung.betrag,\n            zeitpunkt: bezahlung.datum\n        };\n        this.store.dispatch(new NeueBezahlungAnlegen(kontokorrentId));\n        try {\n            let aktion = await this.bezahlungenService.bezahlungAnlegen(kontokorrentId, request);\n            this.store.dispatch(new NeueBezahlungAngelegt(kontokorrentId, {\n                beschreibung: aktion.bezahlung.beschreibung,\n                bezahlendePersonId: aktion.bezahlung.bezahlendePersonId,\n                empfaengerIds: aktion.bezahlung.empfaengerIds,\n                id: aktion.bezahlung.id,\n                wert: aktion.bezahlung.wert,\n                zeitpunkt: aktion.bezahlung.zeitpunkt,\n                status: BezahlungStatus.Gespeichert\n            }));\n        }\n        catch (err) {\n            console.error(err);\n            this.store.dispatch(new NeueBezahlungAnlegenFailed(kontokorrentId));\n            throw err;\n        }\n    }\n\n    async bezahlungBearbeiten(kontokorrentId: string,\n        bezahlungId: string,\n        bezahlung: BezahlungModel) {\n        let request: BezahlungBearbeitenRequest = {\n            beschreibung: bezahlung.betreff,\n            bezahlendePersonId: bezahlung.bezahlendePerson,\n            empfaengerIds: bezahlung.empfaenger,\n            id: bezahlungId,\n            wert: bezahlung.betrag,\n            zeitpunkt: bezahlung.datum\n        };\n        this.store.dispatch(new BezahlungBearbeiten(kontokorrentId, bezahlungId));\n        try {\n            let aktion = await this.bezahlungenService.bezahlungBearbeiten(kontokorrentId, request);\n            this.store.dispatch(new BezahlungBearbeitet(kontokorrentId, aktion.bearbeiteteBezahlungId, {\n                beschreibung: aktion.bezahlung.beschreibung,\n                bezahlendePersonId: aktion.bezahlung.bezahlendePersonId,\n                empfaengerIds: aktion.bezahlung.empfaengerIds,\n                id: aktion.bezahlung.id,\n                wert: aktion.bezahlung.wert,\n                zeitpunkt: aktion.bezahlung.zeitpunkt,\n                status: BezahlungStatus.Gespeichert\n            }));\n        }\n        catch (err) {\n            console.error(err);\n            this.store.dispatch(new BezahlungBearbeitenFailed(kontokorrentId, bezahlungId));\n            throw err;\n        }\n        this.workerService.resetBeschreibungenCache();\n    }\n\n    async bezahlungLoeschen(kontokorrentId: string,\n        bezahlungId: string) {\n        this.store.dispatch(new BezahlungLoeschen(kontokorrentId, bezahlungId));\n        try {\n            let aktion = await this.bezahlungenService.bezahlungLoeschen(kontokorrentId, bezahlungId);\n            this.store.dispatch(new BezahlungGeloescht(kontokorrentId, aktion.geloeschteBezahlungId));\n        }\n        catch (err) {\n            console.error(err);\n            this.store.dispatch(new BezahlungLoeschenFailed(kontokorrentId, bezahlungId));\n            throw err;\n        }\n    }\n\n    getBeschreibungVorschlaege(kontokorrentId: string, eingabe: string) {\n        this.workerService.getBeschreibungVorschlaege(kontokorrentId, eingabe);\n    }\n}\n\nexport function bezahlungActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"BezahlungActionCreator\",\n        serviceLocator => new BezahlungActionCreator(serviceLocator.store,\n            serviceLocator.db,\n            bezahlungenServiceFactory(serviceLocator),\n            workerServiceFactory(serviceLocator),\n            routingActionCreatorFactory(serviceLocator)));\n}\n","export interface TemplateInstance {\n    apply(e: HTMLElement): boolean;\n    isApplied(): boolean;\n}\n\nexport class ReuseableTemplate {\n    private instance: HTMLTemplateElement;\n    constructor(private readonly template: string) {\n    }\n\n    private _get(): DocumentFragment {\n        if (null == this.instance) {\n            this.instance = document.createElement(\"template\");\n            this.instance.innerHTML = this.template;\n        }\n        return document.importNode(this.instance.content, true);\n    }\n\n    getInstance(): TemplateInstance {\n        class TemplateInstance {\n            private applied = false;\n\n            constructor(private r: ReuseableTemplate) {\n            }\n\n            apply(e: HTMLElement): boolean {\n                if (this.applied) {\n                    return false;\n                }\n                e.appendChild(this.r._get());\n                this.applied = true;\n                return true;\n            }\n            isApplied() {\n                return this.applied;\n            }\n        }\n        return new TemplateInstance(this);\n    }\n}\n\n\n"],"names":["reuseableTemplate","HTMLElement","constructor","super","this","templateInstance","getInstance","connectedCallback","apply","input","querySelector","personLabel","label","update","disconnectedCallback","v","_radioName","value","personName","name","personId","id","isApplied","innerText","setAttribute","customElements","define","template","ReuseableTemplate","CheckboxIdAttribute","CheckboxNameAttribute","nativeControl","updateAttributes","attributeChangedCallback","getAttribute","checkboxId","mdcCheckBox","toDateInputValue","d","local","Date","setMinutes","getMinutes","getTimezoneOffset","toJSON","slice","BezahlungEintragenForm","validationRequested","_personen","vorschlaege","rendered","bezahlungSet","innerHTML","empfaengerAuswahl","zahlendePersonRenderer","ArrayToElementRenderer","p","BezahlendePersonRadioButton","empfaengerRenderer","beschreibungVorschlaegeRenderer","el","document","createElement","className","type","addEventListener","e","completeBetreff","datum","betrag","betreff","zahlendePersonMissingError","betreffMissingError","betragMissingError","betragInvalidError","empfaengerMissingError","form","alleCheck","formInputListener","onFormInput","focus","alleClickListener","alleClick","betreffInputListener","dispatchEvent","CustomEvent","detail","betreffKeyDownListener","betreffKeyDown","code","length","validateWhileManipulating","checked","c","empfaengerCheckboxen","removeEventListener","validate","parseBetrag","betragValid","valid","hidden","empty","getDatum","valueAsDate","isSameDay","endOfDay","getData","empfaenger","selectedEmpfaenger","bezahlendePerson","setData","b","bezahlung","replace","betragFloat","parseFloat","isNaN","map","filter","validity","betreffValid","zahlendePersonValid","empfaengerValid","Object","values","some","beschreibung","bezahlendePersonId","empfaengerIds","find","i","zeitpunkt","wert","element","person","radioName","BezahlungEintragenFormTagName","convertLinks","elements","routingActionCreator","forEach","ev","preventDefault","navigate","WorkerService","store","getWorker","worker","Worker","URL","data","msg","dispatch","getBeschreibungVorschlaege","kontokorrentId","eingabe","postMessage","resetBeschreibungenCache","kontokorrentOeffnen","oeffentlicherName","ausgleichRechnen","ausgleichOptions","workerServiceFactory","serviceLocator","get","BezahlungenService","apiClient","db","request","aktion","neueBezahlung","addAktionen","bezahlungBearbeiten","bezahlungId","bezahlungLoeschen","BezahlungEintragenKontokorrentGeandert","BezahlungGeoeffnet","bearbeitungsStatus","NeueBezahlungAnlegen","NeueBezahlungAngelegt","NeueBezahlungAnlegenFailed","BezahlungBearbeiten","BezahlungBearbeitet","bearbeiteteBezahlungId","BezahlungBearbeitenFailed","BezahlungLoeschen","BezahlungGeloescht","geloeschteBezahlungId","BezahlungLoeschenFailed","BezahlungActionCreator","bezahlungenService","workerService","kk","getPerOeffentlichName","getBearbeitungsStatus","bezahlungAktion","status","navigateHome","state","kontokorrents","activeKontokorrentId","getZuletztGesehenerKontokorrentId","setZuletztGesehenerKontokorrentId","bezahlungPerSyncHinzufuegen","bezahlungDirektHinzufuegen","navigator","window","console","log","reg","serviceWorker","ready","zwischengespeichert","bezahlungZwischenspeichern","sync","register","err","warn","zwischengespeicherteBezahlungErledigt","bezahlungAnlegen","error","bezahlungActionCreatorFactory","bezahlungenServiceFactory","_get","instance","importNode","content","r","applied","appendChild"],"sourceRoot":""}