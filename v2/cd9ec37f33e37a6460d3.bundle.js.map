{"version":3,"sources":["webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectListEntry.ts","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectList.ts","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelect.ts","webpack://kontokorrent/./src/components/AppBar/AppBar.ts","webpack://kontokorrent/./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.ts","webpack://kontokorrent/./src/components/MdcCheckbox/MdcCheckbox.ts","webpack://kontokorrent/./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.ts","webpack://kontokorrent/./src/utils/toDateInputValue.ts","webpack://kontokorrent/./src/components/BezahlungEintragenForm/BezahlungEintragenForm.ts","webpack://kontokorrent/./src/components/convertLinks.ts","webpack://kontokorrent/./src/components/ui-components/popup/popup.ts","webpack://kontokorrent/./src/lib/WorkerService.ts","webpack://kontokorrent/./src/lib/BezahlungenService.ts","webpack://kontokorrent/./src/state/actions/BezahlungActionCreator.ts","webpack://kontokorrent/./src/utils/ArrayToElementRenderer.ts","webpack://kontokorrent/./src/utils/ReuseableTemplate.ts","webpack://kontokorrent/./src/components/AppBar/AppBar.html","webpack://kontokorrent/./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.html","webpack://kontokorrent/./src/components/BezahlungEintragenForm/BezahlungEintragenForm.html","webpack://kontokorrent/./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelect.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectList.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectListEntry.html","webpack://kontokorrent/./src/components/MdcCheckbox/MdcCheckbox.html"],"names":["KontokorrentSelectListEntry","HTMLElement","super","this","innerHTML","name","querySelector","link","clickEvent","bind","addEventListener","e","preventDefault","dispatchEvent","CustomEvent","detail","kontokorrent","id","bubbles","removeEventListener","isActive","innerText","href","classList","toggle","customElements","define","KontokorrentSelectList","list","_kontokorrents","kontokorrentsRenderer","ArrayToElementRenderer","k","li","document","createElement","appendChild","update","firstChild","_activeKontokorrentId","kontokorrents","sortBy","KontokorrentSelectListTagName","KontokorrentSelect","kontokorrentName","kontokorrentSelectList","addButton","popup","updateAttributes","contains","event","target","stopPropagation","hide","activeKontokorrentId","getAttribute","updatesStyle","length","activeKontokorrent","find","KontokorrentSelectTagName","AppBar","kontokorrentSelect","logoutDialog","async","accountActionCreator","logout","convertLinks","querySelectorAll","routingActionCreator","subscription","store","subscribe","state","applyStoreState","navigateLogin","Object","values","setAttribute","serviceLocator","AppBarTagName","BezahlendePersonRadioButton","input","personLabel","label","v","value","template","ReuseableTemplate","CheckboxIdAttribute","CheckboxNameAttribute","get","nativeControl","mdcCheckBox","toDateInputValue","d","local","Date","setMinutes","getMinutes","getTimezoneOffset","toJSON","slice","BezahlungEintragenForm","validationRequested","empfaengerAuswahl","zahlendePersonRenderer","p","empfaengerRenderer","beschreibungVorschlaegeRenderer","el","className","type","completeBetreff","datum","betrag","betreff","zahlendePersonMissingError","betreffMissingError","betragMissingError","betragInvalidError","empfaengerMissingError","form","alleCheck","formInputListener","onFormInput","focus","alleClickListener","alleClick","betreffInputListener","betreffKeyDownListener","betreffKeyDown","code","vorschlaege","validateWhileManipulating","checked","c","empfaengerCheckboxen","parseBetrag","betragValid","valid","hidden","empty","valueAsDate","isSameDay","endOfDay","empfaenger","selectedEmpfaenger","bezahlendePerson","getDatum","b","beschreibung","bezahlendePersonId","_personen","empfaengerIds","i","some","zeitpunkt","wert","replace","betragFloat","parseFloat","isNaN","map","filter","validity","betreffValid","zahlendePersonValid","empfaengerValid","element","person","radioName","BezahlungEintragenFormTagName","elements","forEach","ev","navigate","Popup","popupShown","keyListener","clickListener","updateStyles","key","style","display","show","WorkerService","workerApi","worker","Worker","URL","data","msg","dispatch","workerServiceFactory","BezahlungenService","apiClient","db","kontokorrentId","request","aktion","neueBezahlung","addAktionen","bezahlungBearbeiten","bezahlungId","bezahlungLoeschen","BezahlungEintragenKontokorrentGeandert","BezahlungGeoeffnet","bearbeitungsStatus","bezahlung","NeueBezahlungAnlegen","NeueBezahlungAngelegt","NeueBezahlungAnlegenFailed","BezahlungBearbeiten","BezahlungBearbeitet","bearbeiteteBezahlungId","BezahlungBearbeitenFailed","BezahlungLoeschen","BezahlungGeloescht","geloeschteBezahlungId","BezahlungLoeschenFailed","BezahlungActionCreator","bezahlungenService","workerService","getBearbeitungsStatus","bezahlungAktion","status","getWorker","getBeschreibungVorschlaege","getZuletztGesehenerKontokorrentId","setZuletztGesehenerKontokorrentId","bezahlungPerSyncHinzufuegen","bezahlungDirektHinzufuegen","navigator","window","console","log","reg","serviceWorker","ready","zwischengespeichert","bezahlungZwischenspeichern","sync","register","err","warn","zwischengespeicherteBezahlungErledigt","bezahlungAnlegen","error","eingabe","bezahlungActionCreatorFactory","bezahlungenServiceFactory","listElement","keySelector","keyToElement","Map","elementToKey","WeakMap","updateElement","keyCache","getKey","set","x","Array","from","children","removeChild","before","nextKeyToElement","t","childElement","firstElementChild","prepend","nextElementSibling","insertAdjacentElement","instance","importNode","content","module","exports"],"mappings":"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","file":"cd9ec37f33e37a6460d3.bundle.js","sourcesContent":["import template from \"./KontokorrentSelectListEntry.html\";\nimport { KontokorrentState } from \"../../state/State\";\n\n\nexport class KontokorrentSelectListEntry extends HTMLElement {\n    private name: HTMLSpanElement;\n    private link: HTMLAnchorElement;\n    private kontokorrent: KontokorrentState;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.name = this.querySelector(`[data-ref=\"name\"]`);\n        this.link = this.querySelector(`[data-ref=\"link\"]`);\n        this.clickEvent = this.clickEvent.bind(this);\n    }\n\n    connectedCallback() {\n        this.link.addEventListener(\"click\", this.clickEvent);\n    }\n\n    private clickEvent(e: MouseEvent): void {\n        e.preventDefault();\n        this.dispatchEvent(new CustomEvent(\"gotokontokorrent\", { detail: this.kontokorrent.id, bubbles: true }));\n    }\n\n    disconnectedCallback() {\n        this.link.removeEventListener(\"click\", this.clickEvent);\n    }\n\n    update(kontokorrent: KontokorrentState, isActive: boolean) {\n        this.kontokorrent = kontokorrent;\n        this.name.innerText = kontokorrent.name;\n        this.link.href = `kontokorrents/${kontokorrent.id}`;\n        this.link.classList.toggle(\"kontokorrent-select-list__entry--active\", isActive);\n    }\n}\nexport const KontokorrentSelectListEntryTagName = \"kontokorrent-select-list-entry\";\ncustomElements.define(KontokorrentSelectListEntryTagName, KontokorrentSelectListEntry);\n","import template from \"./KontokorrentSelectList.html\";\nimport \"./KontokorrentSelectList.scss\";\nimport { KontokorrentState } from \"../../state/State\";\nimport { sortByAlphabetically } from \"../../utils/sortBy\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { KontokorrentSelectListEntry } from \"./KontokorrentSelectListEntry\";\n\nexport class KontokorrentSelectList extends HTMLElement {\n    private list: HTMLOListElement;\n    private _kontokorrents: KontokorrentState[];\n    private _activeKontokorrentId: string;\n    private kontokorrentsRenderer: ArrayToElementRenderer<KontokorrentState, HTMLLIElement, string>;\n\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.list = this.querySelector(`[data-ref=\"list\"]`);\n        this._kontokorrents = [];\n        this.kontokorrentsRenderer = new ArrayToElementRenderer(this.list,\n            (k: KontokorrentState) => k.id,\n            () => {\n                let li = document.createElement(\"li\");\n                li.appendChild(new KontokorrentSelectListEntry());\n                return li;\n            });\n    }\n\n    connectedCallback() {\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    private update() {\n        this.kontokorrentsRenderer.update(this._kontokorrents,\n            (li, kontokorrent) => {\n                let x: KontokorrentSelectListEntry = <KontokorrentSelectListEntry>li.firstChild;\n                x.update(kontokorrent, this._activeKontokorrentId == kontokorrent.id);\n            });\n    }\n\n    set kontokorrents(kontokorrents: KontokorrentState[]) {\n        this._kontokorrents = sortByAlphabetically(kontokorrents, k => k.name);\n        this.update();\n    }\n\n    set activeKontokorrentId(id: string) {\n        this._activeKontokorrentId = id;\n        this.update();\n    }\n}\nexport const KontokorrentSelectListTagName = \"kontokorrent-select-list\";\ncustomElements.define(KontokorrentSelectListTagName, KontokorrentSelectList);\n","import template from \"./KontokorrentSelect.html\";\nimport \"./KontokorrentSelect.scss\";\nimport \"./KontokorrentSelectList\";\nimport { KontokorrentState } from \"../../state/State\";\nimport { KontokorrentSelectListTagName, KontokorrentSelectList } from \"./KontokorrentSelectList\";\nimport { Popup } from \"../ui-components/popup/popup\";\nimport \"../ui-components/popup/popup\";\n\nexport class KontokorrentSelect extends HTMLElement {\n    private kontokorrentName: HTMLHeadingElement;\n    private popup: Popup;\n    private kontokorrentSelectList: KontokorrentSelectList;\n    private addButton: HTMLButtonElement;\n    private activeKontokorrentId: string;\n    private _kontokorrents: KontokorrentState[];\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.kontokorrentName = this.querySelector(`[data-ref=\"kontokorrent-name\"]`);\n        this.kontokorrentSelectList = this.querySelector(KontokorrentSelectListTagName);\n        this.addButton = this.querySelector(`#add-kontokorrent`);\n        this._kontokorrents = null;\n    }\n\n    connectedCallback() {\n        this.popup = this.querySelector(`app-popup`);\n        this.updateAttributes();\n        this.addEventListener(\"click\", e => {\n            if (!this.popup.contains(<Element>(event.target))) {\n                this.popup.toggle();\n                e.stopPropagation();\n            }\n        });\n        this.addButton.addEventListener(\"click\", e => {\n            this.dispatchEvent(new CustomEvent(\"addkontokorrent\"));\n        });\n        this.kontokorrentSelectList.addEventListener(\"gotokontokorrent\", () => {\n            this.popup.hide();\n        })\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.activeKontokorrentId = this.getAttribute(\"active-kontokorrent-id\");\n        this.kontokorrentSelectList.activeKontokorrentId = this.activeKontokorrentId;\n        this.updatesStyle();\n    }\n\n    static get observedAttributes() {\n        return [\"active-kontokorrent-id\"];\n    }\n\n    set kontokorrents(kontokorrents: KontokorrentState[]) {\n        this.kontokorrentSelectList.kontokorrents = kontokorrents;\n        this._kontokorrents = kontokorrents;\n        this.updatesStyle();\n    }\n\n    private updatesStyle() {\n        if (this._kontokorrents && this._kontokorrents.length) {\n            let activeKontokorrent = this._kontokorrents.find(k => k.id == this.activeKontokorrentId);\n            if (activeKontokorrent) {\n                this.kontokorrentName.innerText = activeKontokorrent.name;\n            }\n            else {\n                this.kontokorrentName.innerText = \"(Kontokorrent wählen)\";\n            }\n        }\n    }\n\n}\nexport const KontokorrentSelectTagName = \"kontokorrent-select\";\ncustomElements.define(KontokorrentSelectTagName, KontokorrentSelect);\n","import template from \"./AppBar.html\";\nimport \"./AppBar.scss\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { convertLinks } from \"../convertLinks\";\nimport \"../KontokorrentSelect/KontokorrentSelect\";\nimport { KontokorrentSelectTagName, KontokorrentSelect } from \"../KontokorrentSelect/KontokorrentSelect\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { AccountActionCreator, accountActionCreatorFactory } from \"../../state/actions/AccountActionCreator\";\nimport { Store } from \"../../state/Store\";\nimport { State } from \"../../state/State\";\nimport { Popup } from \"../ui-components/popup/popup\";\n\nexport class AppBar extends HTMLElement {\n    private kontokorrentSelect: KontokorrentSelect;\n    private store: Store;\n    private routingActionCreator: RoutingActionCreator;\n    private accountActionCreator: AccountActionCreator;\n    private logoutDialog: Popup;\n    private subscription: () => void;\n\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.kontokorrentSelect = this.querySelector(KontokorrentSelectTagName);\n        this.logoutDialog = this.querySelector(\"#logout-dialog\");\n    }\n\n    connectedCallback() {\n        this.querySelector(\"#logout-button\").addEventListener(\"click\", (e: MouseEvent) => {\n            this.logoutDialog.toggle();\n            e.stopPropagation();\n        });\n        this.querySelector(\"#confirm-logout\").addEventListener(\"click\", async () => {\n            await this.accountActionCreator.logout();\n        });\n        this.querySelector(\"#abort-logout\").addEventListener(\"click\", () => {\n            this.logoutDialog.hide();\n        });\n        convertLinks(this.querySelectorAll(\"a\"), this.routingActionCreator);\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.applyStoreState(this.store.state);\n        this.kontokorrentSelect.addEventListener(\"addkontokorrent\", () => {\n            this.routingActionCreator.navigateLogin();\n        });\n    }\n\n    applyStoreState(state: State): void {\n        this.kontokorrentSelect.kontokorrents = Object.values(state.kontokorrents.kontokorrents);\n        this.kontokorrentSelect.setAttribute(\"active-kontokorrent-id\", state.kontokorrents.activeKontokorrentId);\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.accountActionCreator = accountActionCreatorFactory(serviceLocator);\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n    }\n}\nexport const AppBarTagName = \"app-bar\";\ncustomElements.define(AppBarTagName, AppBar);\n","import { Person } from \"../../state/State\";\nimport template from \"./BezahlendePersonRadioButton.html\";\nimport \"./BezahlendePersonRadioButton.scss\";\n\nexport class BezahlendePersonRadioButton extends HTMLElement {\n    private input: HTMLInputElement;\n    private personLabel: HTMLLabelElement;\n    private label: HTMLLabelElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.input = this.querySelector(\"input\");\n        this.personLabel = this.querySelector(`[data-ref=\"label\"]`);\n        this.label = this.querySelector(\"label\");\n    }\n\n    connectedCallback() {\n\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    set radioName(v: string) {\n        this.input.name = v;\n    }\n\n    set person(value: Person) {\n        this.input.value = value.id;\n        this.personLabel.innerText = value.name;\n        this.input.id = value.id;\n        this.label.setAttribute(\"for\", value.id);\n    }\n}\n\ncustomElements.define(\"bezahlende-person-radio-button\", BezahlendePersonRadioButton);\n","import { ReuseableTemplate } from \"../../utils/ReuseableTemplate\";\nimport templateContent from \"./MdcCheckbox.html\";\nimport \"./MdcCheckbox.scss\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport const CheckboxIdAttribute = \"checkbox-id\";\nexport const CheckboxNameAttribute = \"checkbox-name\";\n\nexport class MdcCheckbox extends HTMLElement {\n    private nativeControl: HTMLInputElement;\n\n    constructor() {\n        super();\n        this.appendChild(template.get());\n        this.nativeControl = this.querySelector(\".mdc-checkbox__native-control\");\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.nativeControl.id = this.getAttribute(CheckboxIdAttribute);\n        this.nativeControl.name = this.getAttribute(CheckboxNameAttribute);\n    }\n\n    static get observedAttributes() {\n        return [CheckboxIdAttribute, CheckboxNameAttribute];\n    }\n}\n\ncustomElements.define(\"mdc-checkbox\", MdcCheckbox);\n","import templateContent from \"./EmpfaengerCheckbox.html\";\nimport \"./EmpfaengerCheckbox.scss\";\nimport \"../MdcCheckbox/MdcCheckbox\";\nimport { MdcCheckbox } from \"../MdcCheckbox/MdcCheckbox\";\nimport { Person } from \"../../state/State\";\nimport { ReuseableTemplate } from \"../../utils/ReuseableTemplate\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport class EmpfaengerCheckbox extends HTMLElement {\n    private mdcCheckBox: MdcCheckbox;\n    private label: HTMLLabelElement;\n\n    constructor() {\n        super();\n        this.appendChild(template.get());\n        this.mdcCheckBox = this.querySelector(\"mdc-checkbox\");\n        this.label = this.querySelector(\"label\");\n    }\n\n    set person(value: Person) {\n        this.label.innerText = value.name;\n        const id = `empfaenger-${value.id}`;\n        this.label.setAttribute(\"for\", id);\n        this.mdcCheckBox.setAttribute(\"checkbox-id\", id);\n        this.mdcCheckBox.setAttribute(\"checkbox-name\", id);\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n}\n\ncustomElements.define(\"empfaenger-checkbox\", EmpfaengerCheckbox);\n","export function toDateInputValue(d: Date) {\n    var local = new Date(d);\n    local.setMinutes(d.getMinutes() - d.getTimezoneOffset());\n    return local.toJSON().slice(0, 10);\n}","import { Bezahlung, Person } from \"../../state/State\";\nimport template from \"./BezahlungEintragenForm.html\";\nimport \"./BezahlungEintragenForm.scss\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { BezahlendePersonRadioButton } from \"../BezahlendePersonRadioButton/BezahlendePersonRadioButton\";\nimport { EmpfaengerCheckbox } from \"../EmpfaengerCheckbox/EmpfaengerCheckbox\";\nimport { toDateInputValue } from \"../../utils/toDateInputValue\";\nimport { endOfDay, isSameDay } from \"date-fns\";\nimport { MdcCheckbox } from \"../MdcCheckbox/MdcCheckbox\";\n\nexport class BezahlungEintragenForm extends HTMLElement {\n    private zahlendePersonRenderer: ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>;\n    private empfaengerRenderer: ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>;\n    private datum: HTMLInputElement;\n    private betreff: HTMLInputElement;\n    private betrag: HTMLInputElement;\n    private zahlendePersonMissingError: HTMLSpanElement;\n    private betreffMissingError: HTMLDivElement;\n    private betragMissingError: HTMLDivElement;\n    private empfaengerMissingError: HTMLDivElement;\n    private validationRequested: boolean = false;\n    private form: HTMLFormElement;\n    private formInputListener: () => void;\n    private betragInvalidError: HTMLDivElement;\n    private empfaengerAuswahl: HTMLDivElement;\n    private _personen: Person[];\n    private alleCheck: MdcCheckbox;\n    private alleClickListener: () => void;\n    private betreffInputListener: () => void;\n    private beschreibungVorschlaegeRenderer: ArrayToElementRenderer<string, HTMLElement, string>;\n    private vorschlaege: string[];\n    private betreffKeyDownListener: (e: KeyboardEvent) => void;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.empfaengerAuswahl = this.querySelector(\"#empfaenger-auswahl\");\n        this.zahlendePersonRenderer = new ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>(\n            this.querySelector(\"#zahlende-person-auswahl\"),\n            p => p.id,\n            p => new BezahlendePersonRadioButton());\n        this.empfaengerRenderer = new ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>(\n            this.empfaengerAuswahl,\n            p => p.id,\n            p => new EmpfaengerCheckbox());\n        this.beschreibungVorschlaegeRenderer = new ArrayToElementRenderer<string, HTMLElement, string>(\n            this.querySelector(\"#beschreibung-vorschlaege\"),\n            p => p,\n            p => {\n                let el = document.createElement(\"button\");\n                el.className = \"bezahlung-eintragen-form__vorschlag\";\n                el.innerText = p;\n                el.type = \"button\";\n                el.addEventListener(\"click\", e => {\n                    this.completeBetreff(p);\n                });\n                return el;\n            });\n        this.datum = this.querySelector(\"#datum\");\n        this.datum.value = toDateInputValue(new Date());\n        this.betrag = this.querySelector(\"#betrag\");\n        this.betreff = this.querySelector(\"#betreff\");\n        this.zahlendePersonMissingError = this.querySelector(\"#zahlende-person-missing-error\");\n        this.betreffMissingError = this.querySelector(\"#betreff-missing-error\");\n        this.betragMissingError = this.querySelector(\"#betrag-missing-error\");\n        this.betragInvalidError = this.querySelector(\"#betrag-invalid-error\");\n        this.empfaengerMissingError = this.querySelector(\"#empfaenger-missing-error\");\n        this.form = this.querySelector(\"#bezahlung-eintragen-form\");\n        this.alleCheck = this.querySelector(\"#alle-check\");\n    }\n\n    connectedCallback() {\n        this.formInputListener = () => this.onFormInput();\n        this.form.addEventListener(\"input\", this.formInputListener);\n        this.betrag.focus();\n        this.alleClickListener = () => this.alleClick();\n        this.alleCheck.addEventListener(\"input\", this.alleClickListener);\n        this.betreffInputListener = () => {\n            this.dispatchEvent(new CustomEvent(\"betreffChanged\", { detail: this.betreff.value }));\n        };\n        this.betreff.addEventListener(\"input\", this.betreffInputListener);\n        this.betreffKeyDownListener = (e: KeyboardEvent) => this.betreffKeyDown(e);\n        this.betreff.addEventListener(\"keydown\", this.betreffKeyDownListener)\n    }\n\n    betreffKeyDown(e: KeyboardEvent) {\n        if (e.code == \"Enter\" && this.vorschlaege?.length > 0) {\n            this.completeBetreff(this.vorschlaege[0]);\n        }\n    }\n\n    private completeBetreff(p: string) {\n        this.betreff.value = p;\n        this.betreffInputListener();\n        this.betreff.focus();\n        this.validateWhileManipulating();\n    }\n\n    private alleClick() {\n        let checked = (this.form[\"alle\"] as HTMLInputElement).checked;\n        for (let c of this.empfaengerCheckboxen) {\n            c.checked = checked;\n        }\n    }\n\n    disconnectedCallback() {\n        this.form.removeEventListener(\"input\", this.formInputListener);\n        this.alleCheck.removeEventListener(\"input\", this.alleClickListener);\n        this.betreff.removeEventListener(\"input\", this.betreffInputListener);\n        this.betreff.removeEventListener(\"keydown\", this.betreffKeyDownListener)\n    }\n\n    onFormInput() {\n        this.validateWhileManipulating();\n    }\n\n    validate() {\n        this.validationRequested = true;\n        let betrag = this.parseBetrag();\n        let betragValid = betrag.valid;\n        this.betragInvalidError.hidden = betrag.valid || betrag.empty;\n        let valid = this.validateWhileManipulating() && betragValid;\n        return valid;\n    }\n\n    private getDatum() {\n        let d = this.datum.valueAsDate;\n        if (!d || isSameDay(d, new Date())) {\n            return new Date();\n        }\n        return endOfDay(d);\n    }\n\n    getData() {\n        return {\n            betrag: this.parseBetrag().value,\n            betreff: this.betreff.value,\n            empfaenger: this.selectedEmpfaenger,\n            bezahlendePerson: this.bezahlendePerson.value,\n            datum: this.getDatum()\n        }\n    }\n\n    setData(b: Bezahlung) {\n        this.betreff.value = b.beschreibung;\n        this.bezahlendePerson.value = b.bezahlendePersonId;\n        // this can fail if personen not yet loaded\n        for (let p of this._personen) {\n            let e = this.form[\"empfaenger-\" + p.id] as HTMLInputElement;\n            e.checked = !!b.empfaengerIds.find(i => i == p.id);\n        }\n        let alleInput = this.form[\"alle\"] as HTMLInputElement;\n        alleInput.checked = !this.empfaengerCheckboxen.some(e => !e.checked);\n        this.datum.value = toDateInputValue(b.zeitpunkt);\n        this.betrag.value = `${b.wert}`;\n    }\n\n    private parseBetrag() {\n        this.betrag.setAttribute(\"type\", \"text\");\n        let betrag = this.betrag.value;\n        this.betrag.setAttribute(\"type\", \"number\");\n        if (betrag == \"\") {\n            return { valid: false, empty: true };\n        }\n        betrag = betrag.replace(\",\", \".\");\n        betrag = betrag.replace(/ /g, \"\");\n        let betragFloat = parseFloat(betrag);\n        if (isNaN(betragFloat)) {\n            return { valid: false, empty: false };\n        }\n        return { valid: true, value: betragFloat };\n    }\n\n    private get bezahlendePerson(): HTMLInputElement {\n        return this.form[\"bezahlende-person\"];\n    }\n\n    private get empfaengerCheckboxen(): HTMLInputElement[] {\n        return this._personen.map(p => (this.form[\"empfaenger-\" + p.id] as HTMLInputElement));\n    }\n\n    private get selectedEmpfaenger(): string[] {\n        return this._personen.filter(p => (this.form[\"empfaenger-\" + p.id] as HTMLInputElement).checked)\n            .map(p => p.id);\n    }\n\n    private validateWhileManipulating() {\n        let validity = {\n            betragValid: !!this.betrag.value,\n            betreffValid: !!this.betreff.value,\n            zahlendePersonValid: !!this.bezahlendePerson.value,\n            empfaengerValid: this.selectedEmpfaenger.length > 0\n        };\n        this.betragMissingError.hidden = !this.validationRequested || validity.betragValid;\n        this.betreffMissingError.hidden = !this.validationRequested || validity.betreffValid;\n        this.zahlendePersonMissingError.hidden = !this.validationRequested || validity.zahlendePersonValid;\n        this.empfaengerMissingError.hidden = !this.validationRequested || validity.empfaengerValid;\n        return !Object.values(validity).some(v => v == false);\n    }\n\n    set personen(value: Person[]) {\n        this._personen = value;\n        this.zahlendePersonRenderer.update(value, (element, person) => {\n            element.person = person;\n            element.radioName = \"bezahlende-person\";\n        });\n        this.empfaengerRenderer.update(value, (element, person) => {\n            element.person = person;\n        });\n    }\n\n    set beschreibungVorschlaege(value: string[]) {\n        this.vorschlaege = value;\n        this.beschreibungVorschlaegeRenderer.update(value, () => { });\n    }\n}\nexport const BezahlungEintragenFormTagName = \"bezahlung-eintragen-form\";\ncustomElements.define(BezahlungEintragenFormTagName, BezahlungEintragenForm);\n","import { RoutingActionCreator } from \"../state/actions/RoutingActionCreator\";\n\nexport function convertLinks(elements: Array<HTMLAnchorElement> | NodeListOf<HTMLAnchorElement>, routingActionCreator: RoutingActionCreator) {\n    elements.forEach((e: HTMLAnchorElement) => {\n        e.addEventListener(\"click\", ev => {\n            ev.preventDefault();\n            routingActionCreator.navigate(e.getAttribute(\"href\"));\n        });\n    });\n}","export class Popup extends HTMLElement {\n    private popupShown: boolean = false;\n    constructor() {\n        super();\n        this.keyListener = this.keyListener.bind(this);\n        this.clickListener = this.clickListener.bind(this);\n    }\n\n    connectedCallback() {\n        this.updateStyles();\n    }\n\n    private keyListener(ev: KeyboardEvent) {\n        if (ev.key == \"Escape\") {\n            this.hide();\n        }\n    }\n\n    private clickListener(ev: MouseEvent | TouchEvent) {\n        if (!this.contains(<Element>(event.target))) {\n            this.hide();\n        }\n    }\n\n    public hide() {\n        if (this.popupShown) {\n            document.removeEventListener(\"keydown\", this.keyListener);\n            document.removeEventListener(\"click\", this.clickListener);\n            this.popupShown = false;\n            this.updateStyles();\n        }\n    }\n\n    public show() {\n        if (!this.popupShown) {\n            document.addEventListener(\"keydown\", this.keyListener);\n            document.addEventListener(\"click\", this.clickListener);\n            this.popupShown = true;\n            this.updateStyles();\n        }\n    }\n\n    private updateStyles() {\n        this.style.display = this.popupShown ? \"block\" : \"none\";\n    }\n\n    public toggle() {\n        if (!this.popupShown) {\n            this.show();\n        }\n        else {\n            this.hide();\n\n        }\n    }\n\n    disconnectedCallback() {\n        this.hide();\n    }\n}\ncustomElements.define(\"app-popup\", Popup);\n","type KontokorrentWorkerApi = import(\"../worker/KontokorrentWorker\").KontokorrentWorkerApi;\nimport { wrap } from \"comlink\";\nimport { ServiceLocator } from \"../ServiceLocator\";\nimport { Store } from \"../state/Store\";\n\nexport class WorkerService {\n    constructor(private store: Store) {\n\n    }\n    private workerApi: KontokorrentWorkerApi;\n\n    async getWorker() {\n        if (this.workerApi) {\n            return this.workerApi;\n        }\n        const worker = new Worker(new URL(\"../worker/KontokorrentWorker\", import.meta.url));\n        worker.addEventListener(\"message\", ev => {\n            if (ev.data?.type == \"statedispatch\") {\n                let msg = ev.data.msg;\n                this.store.dispatch(msg);\n            }\n        })\n        this.workerApi = wrap<KontokorrentWorkerApi>(worker);\n        return this.workerApi;\n    }\n}\n\nexport function workerServiceFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"WorkerService\",\n        serviceLocator => new WorkerService(serviceLocator.store));\n}","import { ApiClient } from \"../api/ApiClient\";\nimport { BezahlungBearbeitenRequest } from \"../api/BezahlungBearbeitenRequest\";\nimport { NeueBezahlungRequest } from \"../api/NeueBezahlungRequest\";\nimport { ServiceLocator } from \"../ServiceLocator\";\nimport { KontokorrentDatabase } from \"./KontokorrentDatabase\";\n\nexport class BezahlungenService {\n\n    constructor(private apiClient: ApiClient,\n        private db: KontokorrentDatabase) {\n    }\n\n    async bezahlungAnlegen(kontokorrentId: string, request: NeueBezahlungRequest) {\n        let aktion = await this.apiClient.neueBezahlung(kontokorrentId, request);\n        this.db.addAktionen(kontokorrentId, [aktion]);\n        return aktion;\n    }\n\n    async bezahlungBearbeiten(kontokorrentId: string, request: BezahlungBearbeitenRequest) {\n        let aktion = await this.apiClient.bezahlungBearbeiten(kontokorrentId, request);\n        this.db.addAktionen(kontokorrentId, [aktion]);\n        return aktion;\n    }\n\n    async bezahlungLoeschen(kontokorrentId: string, bezahlungId: string) {\n        let aktion = await this.apiClient.bezahlungLoeschen(kontokorrentId, bezahlungId);\n        this.db.addAktionen(kontokorrentId, [aktion]);\n        return aktion;\n    }\n}\n\nexport function bezahlungenServiceFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"NeueBezahlungService\",\n        serviceLocator => new BezahlungenService(serviceLocator.apiClient,\n            serviceLocator.db));\n}","import { Store } from \"../Store\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { Action } from \"../lib/Action\";\nimport { ActionNames } from \"./ActionNames\";\nimport { NeueBezahlungBackgroundSyncTag } from \"../../sw.constants\";\nimport { BezahlungenService, bezahlungenServiceFactory } from \"../../lib/BezahlungenService\";\nimport { NeueBezahlungRequest } from \"../../api/NeueBezahlungRequest\";\nimport { v4 as uuid } from \"uuid\";\nimport { NeueBezahlungDbModel } from \"../../lib/NeueBezahlungDbModel\";\nimport { Bezahlung, BezahlungStatus } from \"../State\";\nimport { WorkerService, workerServiceFactory } from \"../../lib/WorkerService\";\nimport { BearbeitungsStatus } from \"../../lib/BearbeitungsStatus\";\nimport { BezahlungBearbeitenRequest } from \"../../api/BezahlungBearbeitenRequest\";\n\nexport class BezahlungEintragenKontokorrentGeandert implements Action {\n    readonly type = ActionNames.BezahlungEintragenKontokorrentGeandert;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport class BezahlungGeoeffnet implements Action {\n    readonly type = ActionNames.BezahlungGeoeffnet;\n    constructor(public kontokorrentId: string, public bezahlungId: string,\n        public bearbeitungsStatus: BearbeitungsStatus, public bezahlung: Bezahlung | null) {\n    }\n}\n\nexport class NeueBezahlungAnlegen implements Action {\n    readonly type = ActionNames.NeueBezahlungAnlegen;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport class NeueBezahlungAngelegt implements Action {\n    readonly type = ActionNames.NeueBezahlungAngelegt;\n    constructor(public kontokorrentId: string, public bezahlung: Bezahlung) {\n    }\n}\n\nexport class NeueBezahlungAnlegenFailed implements Action {\n    readonly type = ActionNames.NeueBezahlungAnlegenFailed;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport class BezahlungBearbeiten implements Action {\n    readonly type = ActionNames.BezahlungBearbeiten;\n    constructor(public kontokorrentId: string, public bezahlungId: string) {\n    }\n}\n\nexport class BezahlungBearbeitet implements Action {\n    readonly type = ActionNames.BezahlungBearbeitet;\n    constructor(public kontokorrentId: string, public bearbeiteteBezahlungId: string, public bezahlung: Bezahlung) {\n    }\n}\n\nexport class BezahlungBearbeitenFailed implements Action {\n    readonly type = ActionNames.BezahlungBearbeitenFailed;\n    constructor(public kontokorrentId: string, public bezahlungId: string) {\n    }\n}\n\nexport class BezahlungLoeschen implements Action {\n    readonly type = ActionNames.BezahlungLoeschen;\n    constructor(public kontokorrentId: string, public bezahlungId: string) {\n    }\n}\n\nexport class BezahlungGeloescht implements Action {\n    readonly type = ActionNames.BezahlungGeloescht;\n    constructor(public kontokorrentId: string, public geloeschteBezahlungId: string) {\n    }\n}\n\nexport class BezahlungLoeschenFailed implements Action {\n    readonly type = ActionNames.BezahlungLoeschenFailed;\n    constructor(public kontokorrentId: string, public bezahlungId: string) {\n    }\n}\n\nexport type BezahlungActions = BezahlungEintragenKontokorrentGeandert\n    | NeueBezahlungAnlegenFailed\n    | NeueBezahlungAnlegen\n    | NeueBezahlungAngelegt\n    | BezahlungGeoeffnet\n    | BezahlungBearbeiten\n    | BezahlungBearbeitet\n    | BezahlungBearbeitenFailed\n    | BezahlungLoeschen\n    | BezahlungGeloescht\n    | BezahlungLoeschenFailed;\n\nexport interface BezahlungModel {\n    betreff: string, betrag: number, datum: Date, bezahlendePerson: string, empfaenger: string[]\n}\n\nexport class BezahlungActionCreator {\n    constructor(private store: Store,\n        private db: KontokorrentDatabase,\n        private bezahlungenService: BezahlungenService,\n        private workerService: WorkerService) {\n    }\n\n\n    async bezahlungGeoeffnet(kontokorrentId: string, bezahlungId: string) {\n        let b = await this.db.getBearbeitungsStatus(kontokorrentId, bezahlungId);\n        let bezahlung: Bezahlung = null;\n        if (b.aktion) {\n            let bezahlungAktion = b.aktion;\n            bezahlung = {\n                beschreibung: bezahlungAktion.bezahlung.beschreibung,\n                bezahlendePersonId: bezahlungAktion.bezahlung.bezahlendePersonId,\n                empfaengerIds: bezahlungAktion.bezahlung.empfaengerIds,\n                id: bezahlungAktion.bezahlung.id,\n                status: BezahlungStatus.Gespeichert,\n                wert: bezahlungAktion.bezahlung.wert,\n                zeitpunkt: bezahlungAktion.bezahlung.zeitpunkt\n            };\n        }\n        this.store.dispatch(new BezahlungGeoeffnet(kontokorrentId, bezahlungId, b.status, bezahlung));\n        await (await this.workerService.getWorker()).getBeschreibungVorschlaege(kontokorrentId, null);\n    }\n\n    async bezahlungEintragenGeoeffnet() {\n        let id = this.store.state.kontokorrents.activeKontokorrentId || await this.db.getZuletztGesehenerKontokorrentId();\n        this.store.dispatch(new BezahlungEintragenKontokorrentGeandert(id));\n        await (await this.workerService.getWorker()).getBeschreibungVorschlaege(id, null);\n    }\n\n    async bezahlungEintragenKontokorrentChanged(id: string) {\n        this.store.dispatch(new BezahlungEintragenKontokorrentGeandert(id));\n        await this.db.setZuletztGesehenerKontokorrentId(id);\n        await (await this.workerService.getWorker()).getBeschreibungVorschlaege(id, null);\n    }\n\n    async bezahlungHinzufuegen(kontokorrentId: string,\n        bezahlung: BezahlungModel) {\n        let id = uuid();\n        if (!(await this.bezahlungPerSyncHinzufuegen(kontokorrentId, id, bezahlung))) {\n            await this.bezahlungDirektHinzufuegen(kontokorrentId, bezahlung, id);\n        }\n    }\n\n    private async bezahlungPerSyncHinzufuegen(kontokorrentId: string,\n        id: string,\n        bezahlung: BezahlungModel) {\n        if (\"serviceWorker\" in navigator && \"SyncManager\" in window) {\n            let reg = await navigator.serviceWorker.ready;\n            try {\n                let zwischengespeichert: NeueBezahlungDbModel = {\n                    beschreibung: bezahlung.betreff,\n                    bezahlendePersonId: bezahlung.bezahlendePerson,\n                    empfaengerIds: bezahlung.empfaenger,\n                    id: id,\n                    wert: bezahlung.betrag,\n                    zeitpunkt: bezahlung.datum,\n                    kontokorrentId: kontokorrentId\n                }\n                await this.db.bezahlungZwischenspeichern(zwischengespeichert);\n                await reg.sync.register(NeueBezahlungBackgroundSyncTag);\n                this.store.dispatch(new NeueBezahlungAngelegt(kontokorrentId, {\n                    beschreibung: zwischengespeichert.beschreibung,\n                    bezahlendePersonId: zwischengespeichert.bezahlendePersonId,\n                    empfaengerIds: zwischengespeichert.empfaengerIds,\n                    id: zwischengespeichert.id,\n                    wert: zwischengespeichert.wert,\n                    zeitpunkt: zwischengespeichert.zeitpunkt,\n                    status: BezahlungStatus.Zwischengespeichert\n                }));\n            } catch (err) {\n                console.warn(\"background sync not allowed\");\n                await this.db.zwischengespeicherteBezahlungErledigt(id);\n                return false;\n            }\n        } else {\n            console.log(\"background sync not supported\");\n            return false;\n        }\n        return true;\n    }\n\n    async bezahlungDirektHinzufuegen(kontokorrentId: string,\n        bezahlung: BezahlungModel, id: string = null) {\n        let request: NeueBezahlungRequest = {\n            beschreibung: bezahlung.betreff,\n            bezahlendePersonId: bezahlung.bezahlendePerson,\n            empfaengerIds: bezahlung.empfaenger,\n            id: id || uuid(),\n            wert: bezahlung.betrag,\n            zeitpunkt: bezahlung.datum\n        };\n        this.store.dispatch(new NeueBezahlungAnlegen(kontokorrentId));\n        try {\n            let aktion = await this.bezahlungenService.bezahlungAnlegen(kontokorrentId, request);\n            this.store.dispatch(new NeueBezahlungAngelegt(kontokorrentId, {\n                beschreibung: aktion.bezahlung.beschreibung,\n                bezahlendePersonId: aktion.bezahlung.bezahlendePersonId,\n                empfaengerIds: aktion.bezahlung.empfaengerIds,\n                id: aktion.bezahlung.id,\n                wert: aktion.bezahlung.wert,\n                zeitpunkt: aktion.bezahlung.zeitpunkt,\n                status: BezahlungStatus.Gespeichert\n            }));\n        }\n        catch (err) {\n            console.error(err);\n            this.store.dispatch(new NeueBezahlungAnlegenFailed(kontokorrentId));\n            throw err;\n        }\n    }\n\n    async bezahlungBearbeiten(kontokorrentId: string,\n        bezahlungId: string,\n        bezahlung: BezahlungModel) {\n        let request: BezahlungBearbeitenRequest = {\n            beschreibung: bezahlung.betreff,\n            bezahlendePersonId: bezahlung.bezahlendePerson,\n            empfaengerIds: bezahlung.empfaenger,\n            id: bezahlungId,\n            wert: bezahlung.betrag,\n            zeitpunkt: bezahlung.datum\n        };\n        this.store.dispatch(new BezahlungBearbeiten(kontokorrentId, bezahlungId));\n        try {\n            let aktion = await this.bezahlungenService.bezahlungBearbeiten(kontokorrentId, request);\n            this.store.dispatch(new BezahlungBearbeitet(kontokorrentId, aktion.bearbeiteteBezahlungId, {\n                beschreibung: aktion.bezahlung.beschreibung,\n                bezahlendePersonId: aktion.bezahlung.bezahlendePersonId,\n                empfaengerIds: aktion.bezahlung.empfaengerIds,\n                id: aktion.bezahlung.id,\n                wert: aktion.bezahlung.wert,\n                zeitpunkt: aktion.bezahlung.zeitpunkt,\n                status: BezahlungStatus.Gespeichert\n            }));\n        }\n        catch (err) {\n            console.error(err);\n            this.store.dispatch(new BezahlungBearbeitenFailed(kontokorrentId, bezahlungId));\n            throw err;\n        }\n    }\n\n    async bezahlungLoeschen(kontokorrentId: string,\n        bezahlungId: string) {\n        this.store.dispatch(new BezahlungLoeschen(kontokorrentId, bezahlungId));\n        try {\n            let aktion = await this.bezahlungenService.bezahlungLoeschen(kontokorrentId, bezahlungId);\n            this.store.dispatch(new BezahlungGeloescht(kontokorrentId, aktion.geloeschteBezahlungId));\n        }\n        catch (err) {\n            console.error(err);\n            this.store.dispatch(new BezahlungLoeschenFailed(kontokorrentId, bezahlungId));\n            throw err;\n        }\n    }\n\n    async getBeschreibungVorschlaege(kontokorrentId: string, eingabe: string) {\n        (await this.workerService.getWorker()).getBeschreibungVorschlaege(kontokorrentId, eingabe);\n    }\n}\n\nexport function bezahlungActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"BezahlungActionCreator\",\n        serviceLocator => new BezahlungActionCreator(serviceLocator.store,\n            serviceLocator.db,\n            bezahlungenServiceFactory(serviceLocator),\n            workerServiceFactory(serviceLocator)));\n}\n","export class ArrayToElementRenderer<T, E extends Element, K>{\n    private keyToElement: Map<K, E>;\n    private elementToKey: WeakMap<E, K>;\n    \n    constructor(private listElement: HTMLElement,\n        private keySelector: (x: T) => K,\n        private createElement: (x: T) => E) {\n        this.keyToElement = new Map<K, E>();\n        this.elementToKey = new WeakMap<E, K>();\n    }\n\n    update(list: T[], updateElement: (x: E, data: T) => void) {\n        let keyCache = new Map<T, K>();\n        let getKey = (d: T) => keyCache.get(d) || (() => {\n            let key = this.keySelector(d);\n            keyCache.set(d, key);\n            return key;\n        })();\n        for (let x of Array.from(this.listElement.children)) {\n            let el: E = <E>x;\n            let data = list.find(i => this.elementToKey.get(el) == getKey(i));\n            if (data) {\n                updateElement(<E>el, data);\n            }\n            else {\n                this.listElement.removeChild(el);\n            }\n        }\n        let before: Element = null;\n        let nextKeyToElement = new Map<K, E>();\n        for (let t of list) {\n            let key = getKey(t);\n            let childElement: E = this.keyToElement.get(key);\n            if (!childElement) {\n                childElement = this.createElement(t);\n                updateElement(childElement, t);\n                this.elementToKey.set(childElement, key);\n            }\n            nextKeyToElement.set(key, childElement);\n            if (null == before && childElement != this.listElement.firstElementChild) {\n                this.listElement.prepend(childElement);\n            }\n            else if (null != before && before.nextElementSibling != childElement) {\n                before.insertAdjacentElement(\"afterend\", childElement);\n            }\n            before = childElement;\n        }\n        this.keyToElement = nextKeyToElement;\n    }\n\n}","export class ReuseableTemplate {\n    private instance: HTMLTemplateElement;\n    constructor(private readonly template: string) {\n    }\n\n    get(): DocumentFragment {\n        if (null == this.instance) {\n            this.instance = document.createElement(\"template\");\n            this.instance.innerHTML = this.template;\n        }\n        return document.importNode(this.instance.content, true);\n    }\n}\n","// Module\nvar code = \"<header class=\\\"app-bar\\\"> <kontokorrent-select class=\\\"app-bar__kontokorrent-select\\\"></kontokorrent-select> <nav class=\\\"app-bar__links\\\"> <button id=\\\"logout-button\\\" class=\\\"app-bar__link\\\" title=\\\"Logout\\\"> <span class=\\\"material-icons\\\"> exit_to_app </span> </button> <a href=\\\"info\\\" class=\\\"app-bar__link\\\" title=\\\"Informationen über diese App\\\"> <span class=\\\"material-icons\\\"> info </span> </a> </nav> </header> <app-popup id=\\\"logout-dialog\\\"> <div class=\\\"dialog__backdrop\\\"></div> <div class=\\\"dialog\\\"> <p> Wirklich aus allen Kontokorrents ausloggen? </p> <div class=\\\"dialog__button-pane\\\"> <button id=\\\"abort-logout\\\" class=\\\"button\\\">Abbrechen</button> <button id=\\\"confirm-logout\\\" class=\\\"button\\\">Ausloggen</button> </div> </div> </app-popup>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<input type=\\\"radio\\\" class=\\\"bezahlende-person-radio__input\\\"/> <label class=\\\"bezahlende-person-radio\\\"> <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\"> <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/> <path d=\\\"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z\\\"/> </svg> <span data-ref=\\\"label\\\"></span> </label>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<form novalidate class=\\\"bezahlung-eintragen-form\\\" id=\\\"bezahlung-eintragen-form\\\"> <div id=\\\"betreff-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Es muss ein <label class=\\\"alert__field-label\\\" for=\\\"betreff\\\">Betreff</label> angegeben werden.</div> <div id=\\\"betrag-invalid-error\\\" class=\\\"alert alert--error\\\" hidden> Der <label class=\\\"alert__field-label\\\" for=\\\"betrag\\\">Betrag</label> ist ungültig.</div> <div id=\\\"betrag-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Es muss ein <label class=\\\"alert__field-label\\\" for=\\\"betrag\\\">Betrag</label> angegeben werden.</div> <span id=\\\"zahlende-person-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Wähle eine Person aus die bezahlt. </span> <div id=\\\"empfaenger-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Wähle Personen aus für die bezahlt wird. </div> <label for=\\\"betrag\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Betrag</label> <input name=\\\"betrag\\\" id=\\\"betrag\\\" type=\\\"number\\\" novalidate step=\\\"any\\\"> <label for=\\\"zahlende-person\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Diese Person zahlt</label> <div id=\\\"zahlende-person-auswahl\\\"></div> <div class=\\\"bezahlung-eintragen-form__empfaenger-row\\\"> <label for=\\\"empfaenger\\\" class=\\\"bezahlung-eintragen-form__label\\\">für diese Personen</label> <mdc-checkbox checkbox-id=\\\"alle\\\" checkbox-name=\\\"alle\\\" id=\\\"alle-check\\\"></mdc-checkbox> <label for=\\\"alle\\\">alle</label> </div> <div id=\\\"empfaenger-auswahl\\\"></div> <label for=\\\"betreff\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Betreff</label> <div id=\\\"beschreibung-vorschlaege\\\" class=\\\"bezahlung-eintragen-form__vorschlaege\\\"></div> <input name=\\\"betreff\\\" id=\\\"betreff\\\" required=\\\"\\\" autocomplete=\\\"off\\\" type=\\\"text\\\"> <label for=\\\"datum\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Datum</label> <input name=\\\"datum\\\" id=\\\"datum\\\" required=\\\"\\\" type=\\\"date\\\"> </form>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<mdc-checkbox></mdc-checkbox> <label></label>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<div class=\\\"kontokorrent-select-wrapper\\\"> <div class=\\\"kontokorrent-select\\\"> <h1 data-ref=\\\"kontokorrent-name\\\" class=\\\"kontokorrent-select__name\\\">Kontokorrent</h1> <button class=\\\"kontokorrent-select__choose\\\" title=\\\"anderen Kontokorrent wählen\\\"> <span class=\\\"material-icons\\\"> arrow_drop_down </span> </button> </div> <app-popup class=\\\"kontokorrent-select__popup\\\"> <kontokorrent-select-list></kontokorrent-select-list> <div class=\\\"kontokorrent-select__buttons\\\"> <button id=\\\"add-kontokorrent\\\" class=\\\"button\\\">weiteren hinzufügen</button> </div> </app-popup> </div>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<ol data-ref=\\\"list\\\" class=\\\"kontokorrent-select-list\\\"> </ol>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<a data-ref=\\\"link\\\" class=\\\"kontokorrent-select-list__entry\\\"> <span data-ref=\\\"name\\\"></span> </a>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<div class=\\\"mdc-touch-target-wrapper\\\"> <div class=\\\"mdc-checkbox mdc-checkbox--touch\\\"> <input type=\\\"checkbox\\\" class=\\\"mdc-checkbox__native-control\\\"/> <div class=\\\"mdc-checkbox__background\\\"> <svg class=\\\"mdc-checkbox__checkmark\\\" viewBox=\\\"0 0 24 24\\\"> <path class=\\\"mdc-checkbox__checkmark-path\\\" fill=\\\"none\\\" d=\\\"M1.73,12.91 8.1,19.28 22.79,4.59\\\"/> </svg> <div class=\\\"mdc-checkbox__mixedmark\\\"></div> </div> <div class=\\\"mdc-checkbox__ripple\\\"></div> </div> </div>\";\n// Exports\nmodule.exports = code;"],"sourceRoot":""}