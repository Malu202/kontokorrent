{"version":3,"sources":["webpack://kontokorrent/webpack/runtime/startup chunk dependencies","webpack://kontokorrent/../src/comlink.ts","webpack://kontokorrent/./src/utils/groupBy.ts","webpack://kontokorrent/./src/lib/BalanceCalculator.ts","webpack://kontokorrent/./src/lib/filterBezahlungen.ts","webpack://kontokorrent/./src/lib/KontokorrentDatabase.ts","webpack://kontokorrent/./src/lib/KontokorrentSynchronizer.ts","webpack://kontokorrent/./src/state/actions/BeschreibungVorschlagActionCreator.ts","webpack://kontokorrent/./src/worker/KontokorrentWorker.ts","webpack://kontokorrent/./src/utils/sortBy.ts","webpack://kontokorrent/./node_modules/core-js/internals/object-define-property.js","webpack://kontokorrent/./node_modules/core-js/internals/object-get-own-property-names.js","webpack://kontokorrent/webpack/bootstrap","webpack://kontokorrent/webpack/runtime/define property getters","webpack://kontokorrent/webpack/runtime/ensure chunk","webpack://kontokorrent/webpack/runtime/get javascript chunk filename","webpack://kontokorrent/webpack/runtime/get mini-css chunk filename","webpack://kontokorrent/webpack/runtime/global","webpack://kontokorrent/webpack/runtime/hasOwnProperty shorthand","webpack://kontokorrent/webpack/runtime/publicPath","webpack://kontokorrent/webpack/runtime/importScripts chunk loading","webpack://kontokorrent/webpack/startup"],"names":["next","proxyMarker","Symbol","createEndpoint","releaseProxy","throwMarker","isObject","val","transferHandlers","Map","canHandle","obj","port1","port2","MessageChannel","expose","deserialize","port","start","createProxy","target","value","serialized","Error","isError","message","name","stack","Object","assign","ep","self","addEventListener","callback","ev","data","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","set","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","endpoint","constructor","isMessagePort","close","throwIfProxyReleased","isReleased","isProxyReleased","Proxy","_target","requestResponseMessage","p","toString","length","r","bind","_thisArg","rawArgumentList","last","processArguments","processed","v","arr","Array","prototype","concat","WeakMap","handler","serializedValue","serialize","get","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","groupBy","list","key","forEach","item","k","collection","push","GeteilteZahlung","wert","empfaengerAnzahl","isEmpfaenger","BalanceCalculator","db","summe","nenner","andere","c","n","kontokorrentId","gespeicherte","aktionen","bezahlungenMap","ordered","sort","a","b","laufendeNummer","bearbeiteteBezahlungId","geloeschteBezahlungId","bezahlung","values","filterBezahlungen","this","getAktionen","bezahlungen","getZwischengespeicherteBezahlungenForKontokorrent","kk","getKontokorrent","geteilteZahlungen","personen","e","empfaengerIds","bezahlendePersonId","balance","gruppen","alleNenner","from","keys","gesamtNenner","gesamtSumme","g","erweitern","KontokorrentsStore","AppStateStore","AktionenStore","NeueBezahlungenStore","KontokorrentSynchronizer","i","sorted","BeschreibungsVorschlaege","vorschlaege","storeAdapter","action","cb","oldVersion","newVersion","createObjectStore","keyPath","createIndex","put","zuletztGesehenerKontokorrentId","accesstokens","accountinfo","objectStoreNames","contains","deleteObjectStore","withInitialized","async","getAll","keySelector","toLowerCase","localeCompare","mapped","unwrapped","reject","tx","transaction","onerror","err","console","error","oncomplete","request","objectStore","add","log","preventDefault","stopPropagation","appState","kks","getKontokorrents","kontokorrents","existing","filter","some","d","delete","newIds","ex","find","combined","oeffentlicherName","getFromIndex","getAllFromIndex","clear","tokenType","t","lastTimeStamp","durability","store","timestamp","done","accountInfo","bezahlungId","m","beschreibungVorschlagActionCreator","beschreibungenCache","beschreibungen","s","replace","min","eingabe","beschreibung","search","formatSearchString","result","trim","entries","occurence","formatted","indexOf","score","sameChars","dispatch","calculateBalance","getLaufendeNummer","getBeschreibungVorschlaege","getVorschlaege","DESCRIPTORS","IE8_DOM_DEFINE","anObject","toPrimitive","nativeDefineProperty","defineProperty","exports","f","O","P","Attributes","TypeError","internalObjectKeys","hiddenKeys","getOwnPropertyNames","__webpack_module_cache__","__webpack_require__","moduleId","module","__webpack_modules__","x","definition","o","enumerable","chunkId","all","promises","u","miniCssF","globalThis","Function","window","hasOwnProperty","call","installedChunks","458","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","chunkIds","moreModules","runtime","pop"],"mappings":"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","file":"19efd8f5ea14a29f72ec.bundle.js","sourcesContent":["var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(858).then(next);\n};","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer(obj: any, transfers: Transferable[]) {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n","export function groupBy<T, K extends keyof T>(list: T[], key: K) {\n    const map = new Map<T[K], T[]>();\n    list.forEach((item) => {\n        const k = item[key];\n        const collection = map.get(k);\n        if (!collection) {\n            map.set(k, [item]);\n        } else {\n            collection.push(item);\n        }\n    });\n    return map;\n}\n","import { KontokorrentDatabase } from \"./KontokorrentDatabase\";\nimport { KontokorrentBalance } from \"./KontokorrentBalance\";\nimport { filterBezahlungen } from \"./filterBezahlungen\";\nimport { groupBy } from \"../utils/groupBy\";\n\nclass GeteilteZahlung {\n    constructor(public wert: number,\n        public empfaengerAnzahl: number,\n        public isEmpfaenger: boolean) {\n\n    }\n}\n\ntype Bezahlung = { empfaengerIds: string[], bezahlendePersonId: string, wert: number };\n\nexport class BalanceCalculator {\n    constructor(private db: KontokorrentDatabase) {\n    }\n\n    erweitern(summe: number, nenner: number, andere: number[]) {\n        let c = 1;\n        for (let n of andere) {\n            if (n != nenner) {\n                c *= n;\n            }\n        }\n        return summe * c;\n    }\n\n    async calculateBalance(kontokorrentId: string) {\n        let aktionen = await this.db.getAktionen(kontokorrentId);\n        let gespeicherte: Bezahlung[] = filterBezahlungen(aktionen);\n        let zwischengespeicherte: Bezahlung[] = await this.db.getZwischengespeicherteBezahlungenForKontokorrent(kontokorrentId);\n        let bezahlungen = [...zwischengespeicherte, ...gespeicherte];\n        let kk = await this.db.getKontokorrent(kontokorrentId);\n        let geteilteZahlungen: { [id: string]: GeteilteZahlung[] } = {};\n        for (let p of kk.personen) {\n            geteilteZahlungen[p.id] = [];\n        }\n        for (let b of bezahlungen) {\n            for (let e of b.empfaengerIds) {\n                geteilteZahlungen[e].push(new GeteilteZahlung(b.wert, b.empfaengerIds.length, true));\n                geteilteZahlungen[b.bezahlendePersonId].push(new GeteilteZahlung(b.wert, b.empfaengerIds.length, false));\n            }\n        }\n        let balance: KontokorrentBalance = {};\n        for (let p of kk.personen) {\n            let gruppen = groupBy(geteilteZahlungen[p.id], \"empfaengerAnzahl\");\n            let alleNenner = Array.from(gruppen.keys());\n            let gesamtNenner = Array.from(gruppen.keys()).reduce((p, c) => p * c, 1);\n            if (gesamtNenner < 362880) {\n                let gesamtSumme = 0;\n                for (let g of gruppen.keys()) {\n                    let zahlungen = gruppen.get(g);\n                    let summe = zahlungen.reduce((p, c) => p + (c.isEmpfaenger ? c.wert : -c.wert), 0);\n                    gesamtSumme += this.erweitern(summe, g, alleNenner);\n                }\n                balance[p.id] = gesamtSumme / gesamtNenner;\n            }\n            else {\n                let gesamtSumme = 0;\n                for (let g of gruppen.keys()) {\n                    let zahlungen = gruppen.get(g);\n                    let summe = zahlungen.reduce((p, c) => p + (c.isEmpfaenger ? c.wert : -c.wert), 0);\n                    gesamtSumme += summe / g;\n                }\n                balance[p.id] = gesamtSumme;\n            }\n        }\n        return balance;\n    }\n}","import { BezahlungDbModel } from \"./BezahlungDbModel\";\nimport { AktionDbModel } from \"./AktionDbModel\";\n\nexport function filterBezahlungen(aktionen: AktionDbModel[]) {\n    let bezahlungenMap: { [id: string]: BezahlungDbModel } = {};\n    let ordered = aktionen.sort((a,b)=> a.laufendeNummer - b.laufendeNummer);\n    for (let b of ordered) {\n        if (b.bearbeiteteBezahlungId) {\n            delete bezahlungenMap[b.bearbeiteteBezahlungId];\n        }\n        if (b.geloeschteBezahlungId) {\n            delete bezahlungenMap[b.geloeschteBezahlungId];\n        }\n        else {\n            bezahlungenMap[b.bezahlung.id] = b.bezahlung;\n        }\n    }\n    let bezahlungen = Object.values(bezahlungenMap);\n    return bezahlungen;\n}","import { openDB, IDBPDatabase, DBSchema, unwrap } from \"idb\";\nimport { KontokorrentDbModel } from \"./KontokorrentDbModel\";\nimport { sortByAlphabetically } from \"../utils/sortBy\";\nimport { Aktion } from \"../api/Aktion\";\nimport { AktionDbModel } from \"./AktionDbModel\";\nimport { AccountInfo } from \"./AccountInfo\";\nimport { NeueBezahlungDbModel } from \"./NeueBezahlungDbModel\";\n\n\nconst KontokorrentsStore = \"KontokorrentsStore\";\nconst AppStateStore = \"AppStateStore\";\nconst AktionenStore = \"AktionenStore\";\nconst NeueBezahlungenStore = \"NeueBezahlungenStore\";\n\ninterface AccessTokenInfo {\n    timestamp: number;\n    value: string;\n    type: \"google\" | \"anonymous\";\n}\n\ninterface AppSettings {\n    id: number;\n    zuletztGesehenerKontokorrentId: string\n    accesstokens: AccessTokenInfo[];\n    accountinfo: AccountInfo;\n}\n\ninterface KontokorrentDbSchema extends DBSchema {\n    KontokorrentsStore: {\n        key: string;\n        value: KontokorrentDbModel;\n        indexes: { \"oeffentlicherName\": string };\n    };\n    AppStateStore: {\n        value: AppSettings;\n        key: number;\n    };\n    AktionenStore: {\n        key: [number, string],\n        value: AktionDbModel,\n        indexes: { \"kontokorrentId\": string };\n    };\n    NeueBezahlungenStore: {\n        key: string,\n        value: NeueBezahlungDbModel,\n        indexes: { \"kontokorrentId\": string };\n    }\n}\n\n\nconst initialSettings: (() => AppSettings) = () => { return { id: 0, zuletztGesehenerKontokorrentId: null, accesstokens: [], accountinfo: null } };\nexport class KontokorrentDatabase {\n\n    private async withInitialized<T>(cb: (db: IDBPDatabase<KontokorrentDbSchema>) => Promise<T>) {\n        let db = await openDB<KontokorrentDbSchema>(\"kontokorrent-db\", 5, {\n            upgrade(db, oldVersion: number, newVersion: number) {\n                if (oldVersion < 1) {\n                    let store = db.createObjectStore(KontokorrentsStore, { keyPath: \"id\" });\n                    store.createIndex(\"oeffentlicherName\", \"oeffentlicherName\");\n                }\n                if (oldVersion < 2) {\n                    let store = db.createObjectStore(AppStateStore, { keyPath: \"id\" });\n                    store.put(initialSettings());\n                }\n                if (oldVersion < 3) {\n                    let store = db.createObjectStore(AktionenStore, { keyPath: [\"laufendeNummer\", \"kontokorrentId\"] });\n                    store.createIndex(\"kontokorrentId\", \"kontokorrentId\");\n                }\n                if (oldVersion < 5) {\n                    if (db.objectStoreNames.contains(NeueBezahlungenStore)) {\n                        db.deleteObjectStore(NeueBezahlungenStore)\n                    }\n                    let store = db.createObjectStore(NeueBezahlungenStore, { keyPath: \"id\" });\n                    store.createIndex(\"kontokorrentId\", \"kontokorrentId\");\n                }\n            },\n        });\n        try {\n            return await cb(db);\n        }\n        finally {\n            db.close();\n        }\n    }\n\n    async getKontokorrents(): Promise<KontokorrentDbModel[]> {\n        return await this.withInitialized(async db => {\n            return sortByAlphabetically((await db.getAll(KontokorrentsStore)), k => k.name);\n        });\n    }\n\n    async addAktionen(id: string, aktionen: Aktion[]): Promise<void> {\n        if (!aktionen.length) {\n            return;\n        }\n        let mapped = aktionen\n            .map(v => {\n                let a: AktionDbModel = {\n                    ...v,\n                    kontokorrentId: id\n                };\n                return a;\n            });\n        return await this.withInitialized(db => {\n            const unwrapped = unwrap(<IDBPDatabase>db);\n            return new Promise((resolve, reject) => {\n                const tx = unwrapped.transaction(AktionenStore, \"readwrite\");\n                tx.onerror = err => {\n                    console.error(\"addAktionen failed\", err, tx.error);\n                    reject(tx.error);\n                };\n                tx.oncomplete = () => {\n                    resolve();\n                }\n                for (let a of mapped) {\n                    let request = tx.objectStore(AktionenStore).add(a);\n                    request.onerror = ev => {\n                        if (request.error.name == \"ConstraintError\") {\n                            console.log(`Aktion ${a.laufendeNummer} für Kontokorrent ${id} bereits gespeichert.`, ev, request.error);\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                        } else {\n                            console.error(`Aktion ${a.laufendeNummer} für Kontokorrent ${id} konnte nicht gespeichert werden.`, ev, request.error);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    async getZuletztGesehenerKontokorrentId(): Promise<string> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            if (appState.zuletztGesehenerKontokorrentId) {\n                return appState.zuletztGesehenerKontokorrentId;\n            }\n            else {\n                let kks = await (await this.getKontokorrents());\n                if (kks.length) {\n                    return kks[0].id;\n                }\n                return null;\n            }\n        });\n    }\n\n    async setZuletztGesehenerKontokorrentId(id: string): Promise<void> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            appState.zuletztGesehenerKontokorrentId = id;\n            await db.put(AppStateStore, appState);\n        });\n    }\n\n    async setKontokorrents(kontokorrents: {\n        name: string, id: string, personen: { name: string, id: string }[],\n        oeffentlicherName: string\n    }[]): Promise<string[]> {\n        return await this.withInitialized(async db => {\n            let existing: KontokorrentDbModel[] = (await db.getAll(KontokorrentsStore));\n            for (let v of existing.filter(e => !kontokorrents.some(d => e.id === d.id))) {\n                await db.delete(KontokorrentsStore, v.id);\n            }\n            let newIds: string[] = [];\n            for (let v of kontokorrents) {\n                let ex = existing.find(d => d.id == v.id);\n                if (!ex) {\n                    newIds.push(v.id);\n                }\n                let combined = {\n                    ...ex, name: v.name, personen: v.personen, id: v.id,\n                    oeffentlicherName: v.oeffentlicherName\n                };\n                await db.put(KontokorrentsStore, combined);\n            }\n            return newIds;\n        });\n    }\n\n    async addKontokorrent(kk: KontokorrentDbModel): Promise<void> {\n        return await this.withInitialized(async db => {\n            if (!await db.get(KontokorrentsStore, kk.id)) {\n                await db.add(KontokorrentsStore, kk);\n            }\n        });\n    }\n\n    async getKontokorrent(id: string): Promise<KontokorrentDbModel> {\n        return await this.withInitialized(async db => {\n            return <KontokorrentDbModel>await db.get(KontokorrentsStore, id);\n        });\n    }\n\n    async getPerOeffentlichName(id: string): Promise<KontokorrentDbModel> {\n        return await this.withInitialized(async db => {\n            return <KontokorrentDbModel>await db.getFromIndex(KontokorrentsStore, \"oeffentlicherName\", id);\n        });\n    }\n\n    async getAktionen(id: string): Promise<AktionDbModel[]> {\n        return await this.withInitialized(async db => {\n            return await db.getAllFromIndex(AktionenStore, \"kontokorrentId\", id);\n        });\n    }\n\n    async clear() {\n        return await this.withInitialized(async db => {\n            await db.clear(AktionenStore);\n            await db.clear(KontokorrentsStore);\n            await db.put(AppStateStore, initialSettings());\n        });\n    }\n\n    async getAccessToken(tokenType: \"anonymous\" | \"google\"): Promise<AccessTokenInfo> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            return (appState.accesstokens || []).find(t => t.type === tokenType);\n        });\n    }\n\n    async updateAccessTokenIfNewer(tokenType: \"anonymous\" | \"google\", value: string, lastTimeStamp: number): Promise<boolean> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\", { durability: \"strict\" });\n            let appState = await tx.store.get(0);\n            if (!appState.accesstokens) {\n                appState.accesstokens = [];\n            }\n            let existing = appState.accesstokens.find(t => t.type === tokenType);\n            if (!existing) {\n                appState.accesstokens.push({\n                    timestamp: 1,\n                    type: tokenType,\n                    value: value\n                });\n            } else if (existing.timestamp == lastTimeStamp) {\n                existing.value = value;\n                existing.timestamp++;\n            }\n            else {\n                console.error(`The accesstoken of type ${tokenType} was already updated since reading.`);\n                await tx.done;\n                return false;\n            }\n            await tx.store.put(appState);\n            await tx.done;\n            return true;\n        });\n    }\n\n    async setAccountInfo(accountInfo: AccountInfo): Promise<void> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\");\n            let appState = await tx.store.get(0);\n            appState.accountinfo = accountInfo;\n            await tx.store.put(appState);\n            await tx.done;\n        });\n    }\n\n    async getAccountInfo(): Promise<AccountInfo> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readonly\");\n            let appState = await tx.store.get(0);\n            return appState?.accountinfo;\n        });\n    }\n\n    async clearAccountInfo(): Promise<void> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\");\n            let appState = await tx.store.get(0);\n            appState.accountinfo = null;\n            appState.accesstokens = [];\n            await tx.store.put(appState);\n            await tx.done;\n        });\n    }\n\n    async getZwischengespeicherteBezahlungen(): Promise<NeueBezahlungDbModel[]> {\n        return await this.withInitialized(async db => {\n            return (await db.getAll(NeueBezahlungenStore));\n        });\n    }\n\n    async getBezahlungAktion(kontokorrentId: string, bezahlungId: string) {\n        return await this.withInitialized(async db => {\n            var aktionen = db.getAllFromIndex(AktionenStore, \"kontokorrentId\", kontokorrentId);\n            return (await aktionen).find(a => a.bezahlung && a.bezahlung.id == bezahlungId);\n        });\n    }\n\n    async getZwischengespeicherteBezahlungenForKontokorrent(kontokorrentId: string): Promise<NeueBezahlungDbModel[]> {\n        return await this.withInitialized(async db => {\n            return await db.getAllFromIndex(NeueBezahlungenStore, \"kontokorrentId\", kontokorrentId);\n        });\n    }\n\n    async bezahlungZwischenspeichern(m: NeueBezahlungDbModel) {\n        return await this.withInitialized(async db => {\n            db.add(NeueBezahlungenStore, m);\n        });\n    }\n\n    async zwischengespeicherteBezahlungErledigt(id: string) {\n        await this.withInitialized(async db => {\n            db.delete(NeueBezahlungenStore, id);\n        });\n    }\n}\n","import { KontokorrentDatabase } from \"./KontokorrentDatabase\";\n\nexport class KontokorrentSynchronizer {\n    constructor(private db: KontokorrentDatabase) {\n    }\n\n    async getLaufendeNummer(kontokorrentId: string) {\n        let aktionen = await this.db.getAktionen(kontokorrentId);\n        let sorted = aktionen.map(v => v.laufendeNummer).sort((a, b) => a - b);\n        let i: number;\n        for (i = 0; i < sorted.length - 1; i++) {\n            if (sorted[i] + 1 !== sorted[i + 1]) {\n                break;\n            }\n        }\n        return sorted[i];\n    }\n}","import { Store } from \"../lib/Store\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ActionNames } from \"./ActionNames\";\nimport { Action } from \"../lib/Action\";\nimport { groupBy } from \"../../utils/groupBy\";\nimport { markAsUntransferable } from \"worker_threads\";\n\nexport class BeschreibungsVorschlaege implements Action {\n    readonly type = ActionNames.BeschreibungsVorschlaege;\n    constructor(public kontokorrentId: string, public vorschlaege: string[]) {\n\n    }\n}\n\nexport type BeschreibungVorschlagActions =\n    | BeschreibungsVorschlaege;\n\nexport class BeschreibungVorschlagActionCreator {\n    private beschreibungenCache: { kontokorrentId: string, beschreibungen: { search: string, result: string, occurence: number }[] };\n    constructor(private db: KontokorrentDatabase, private store: Store) {\n        this.beschreibungenCache = { kontokorrentId: null, beschreibungen: [] };\n    }\n\n\n    private formatSearchString(s: string) {\n        return s.toLowerCase().replace(/\\s|-/g, \"\");\n    }\n\n    private sameChars(s: string, d: string) {\n        let i;\n        for (i = 0; i < Math.min(s.length, d.length); i++) {\n            if (s[i] != d[i]) {\n                break;\n            }\n        }\n        return i;\n    }\n\n    async getVorschlaege(kontokorrentId: string, eingabe: string) {\n        if (this.beschreibungenCache.kontokorrentId != kontokorrentId) {\n            let aktionen = await this.db.getAktionen(kontokorrentId);\n            let beschreibungen = aktionen.filter(a => null != a.bezahlung?.beschreibung).map(a => {\n                return { search: this.formatSearchString(a.bezahlung.beschreibung), result: a.bezahlung.beschreibung.trim() }\n            });\n            this.beschreibungenCache.kontokorrentId = kontokorrentId;\n            let map = groupBy(beschreibungen, \"search\");\n            this.beschreibungenCache.beschreibungen = Array.from(map.entries()).map(([search, r]) => {\n\n                return {\n                    search,\n                    result: r[0].result,\n                    occurence: r.length\n                };\n            }).sort((a, b) => b.occurence - a.occurence);\n        }\n        if (eingabe) {\n            let formatted = this.formatSearchString(eingabe);\n            let vorschlaege = this.beschreibungenCache.beschreibungen\n                .filter(({ search }) => search.indexOf(formatted) > -1)\n                .map(({ search, result }) => {\n                    return { result, score: this.sameChars(formatted, search) }\n                }).sort((a, b) => b.score - a.score);\n            this.store.dispatch(new BeschreibungsVorschlaege(kontokorrentId, vorschlaege.map(b => b.result)));\n        }\n        else {\n            let vorschlaege = this.beschreibungenCache.beschreibungen.slice(0, 10).map(b => b.result);\n            this.store.dispatch(new BeschreibungsVorschlaege(kontokorrentId, vorschlaege));\n        }\n    }\n}","import { expose } from \"comlink\";\nimport { BalanceCalculator } from \"../lib/BalanceCalculator\";\nimport { KontokorrentDatabase } from \"../lib/KontokorrentDatabase\";\nimport { KontokorrentSynchronizer } from \"../lib/KontokorrentSynchronizer\";\nimport { BeschreibungVorschlagActionCreator } from \"../state/actions/BeschreibungVorschlagActionCreator\";\nimport { Action } from \"../state/lib/Action\";\n\nlet storeAdapter = {\n    dispatch(action: Action): void {\n        self.postMessage({ type: \"statedispatch\", msg: action });\n    }\n}\n\nconst db = new KontokorrentDatabase();\nconst beschreibungVorschlagActionCreator = new BeschreibungVorschlagActionCreator(db, storeAdapter);\n\nexport async function calculateBalance(kontokorrentId: string) {\n    return await (new BalanceCalculator(db).calculateBalance(kontokorrentId));\n}\n\nexport async function getLaufendeNummer(kontokorrentId: string) {\n    return await (new KontokorrentSynchronizer(db).getLaufendeNummer(kontokorrentId));\n}\n\nexport async function getBeschreibungVorschlaege(kontokorrentId: string, eingabe: string) {\n    await beschreibungVorschlagActionCreator.getVorschlaege(kontokorrentId, eingabe);\n}\n\nconst exports = {\n    calculateBalance,\n    getLaufendeNummer,\n    getBeschreibungVorschlaege\n};\nexport type KontokorrentWorkerApi = typeof exports;\nexpose(exports, self);","export function sortByAlphabetically<T, P extends keyof T>(collection: T[], keySelector: (x: T) => string): T[] {\n    return collection.sort((a, b) => keySelector(a).toLowerCase().localeCompare(keySelector(b).toLowerCase()));\n}","var DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\nvar nativeDefineProperty = Object.defineProperty;\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return nativeDefineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertynames\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module\n\t__webpack_require__(8356);\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"\" + \"eaec552c6841364e2f3d\" + \".bundle.js\";\n};","// This function allow to reference all chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"858\":\"31d6cfe0d16ae931b73c\"}[chunkId] + \".css\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/v2/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t458: 1\n};\n\n// importScripts chunk loading\nvar chunkLoadingCallback = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\timportScripts(\"\" + __webpack_require__.u(chunkId));\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkkontokorrent\"] = self[\"webpackChunkkontokorrent\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = chunkLoadingCallback;\n\n// no HMR\n\n// no HMR manifest","// run startup\nreturn __webpack_require__.x();\n"],"sourceRoot":""}