{"version":3,"sources":["webpack://kontokorrent/./node_modules/comlink/dist/esm/comlink.mjs","webpack://kontokorrent/./node_modules/idb/build/esm/index.js","webpack://kontokorrent/./node_modules/idb/build/esm/wrap-idb-value.js"],"names":["proxyMarker","Symbol","createEndpoint","releaseProxy","throwMarker","isObject","val","transferHandlers","Map","canHandle","obj","port1","port2","MessageChannel","expose","deserialize","port","start","createProxy","target","value","serialized","Error","isError","message","name","stack","Object","assign","ep","self","addEventListener","callback","ev","data","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","set","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","endpoint","constructor","isMessagePort","close","throwIfProxyReleased","isReleased","isProxyReleased","Proxy","_target","requestResponseMessage","p","toString","length","r","bind","_thisArg","rawArgumentList","last","processArguments","processed","v","arr","Array","prototype","concat","WeakMap","handler","serializedValue","serialize","get","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","openDB","version","blocked","upgrade","blocking","terminated","request","indexedDB","open","openPromise","w","event","result","oldVersion","newVersion","transaction","db","readMethods","writeMethods","cachedMethods","getMethod","IDBDatabase","targetFuncName","replace","useIndex","isWrite","includes","IDBIndex","IDBObjectStore","method","async","storeName","args","tx","this","store","index","shift","returnVal","done","oldTraps","receiver","has","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","IDBTransaction","objectStoreNames","objectStore","wrap","replaceTraps","transformCachableValue","func","IDBCursor","advance","continue","continuePrimaryKey","unwrap","storeNames","call","sort","reject","unlisten","complete","error","DOMException","cacheDonePromiseForTransaction","object","some","c","IDBRequest","promise","success","promisifyRequest","newValue"],"mappings":"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","file":"23bd790fa21acbb423d0.bundle.js","sourcesContent":["/**\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst proxyMarker = Symbol(\"Comlink.proxy\");\r\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\r\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\r\nconst throwMarker = Symbol(\"Comlink.thrown\");\r\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\r\n/**\r\n * Internal transfer handle to handle objects marked to proxy.\r\n */\r\nconst proxyTransferHandler = {\r\n    canHandle: (val) => isObject(val) && val[proxyMarker],\r\n    serialize(obj) {\r\n        const { port1, port2 } = new MessageChannel();\r\n        expose(obj, port1);\r\n        return [port2, [port2]];\r\n    },\r\n    deserialize(port) {\r\n        port.start();\r\n        return wrap(port);\r\n    },\r\n};\r\n/**\r\n * Internal transfer handler to handle thrown exceptions.\r\n */\r\nconst throwTransferHandler = {\r\n    canHandle: (value) => isObject(value) && throwMarker in value,\r\n    serialize({ value }) {\r\n        let serialized;\r\n        if (value instanceof Error) {\r\n            serialized = {\r\n                isError: true,\r\n                value: {\r\n                    message: value.message,\r\n                    name: value.name,\r\n                    stack: value.stack,\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            serialized = { isError: false, value };\r\n        }\r\n        return [serialized, []];\r\n    },\r\n    deserialize(serialized) {\r\n        if (serialized.isError) {\r\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\r\n        }\r\n        throw serialized.value;\r\n    },\r\n};\r\n/**\r\n * Allows customizing the serialization of certain values.\r\n */\r\nconst transferHandlers = new Map([\r\n    [\"proxy\", proxyTransferHandler],\r\n    [\"throw\", throwTransferHandler],\r\n]);\r\nfunction expose(obj, ep = self) {\r\n    ep.addEventListener(\"message\", function callback(ev) {\r\n        if (!ev || !ev.data) {\r\n            return;\r\n        }\r\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\r\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\r\n        let returnValue;\r\n        try {\r\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\r\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\r\n            switch (type) {\r\n                case 0 /* GET */:\r\n                    {\r\n                        returnValue = rawValue;\r\n                    }\r\n                    break;\r\n                case 1 /* SET */:\r\n                    {\r\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\r\n                        returnValue = true;\r\n                    }\r\n                    break;\r\n                case 2 /* APPLY */:\r\n                    {\r\n                        returnValue = rawValue.apply(parent, argumentList);\r\n                    }\r\n                    break;\r\n                case 3 /* CONSTRUCT */:\r\n                    {\r\n                        const value = new rawValue(...argumentList);\r\n                        returnValue = proxy(value);\r\n                    }\r\n                    break;\r\n                case 4 /* ENDPOINT */:\r\n                    {\r\n                        const { port1, port2 } = new MessageChannel();\r\n                        expose(obj, port2);\r\n                        returnValue = transfer(port1, [port1]);\r\n                    }\r\n                    break;\r\n                case 5 /* RELEASE */:\r\n                    {\r\n                        returnValue = undefined;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (value) {\r\n            returnValue = { value, [throwMarker]: 0 };\r\n        }\r\n        Promise.resolve(returnValue)\r\n            .catch((value) => {\r\n            return { value, [throwMarker]: 0 };\r\n        })\r\n            .then((returnValue) => {\r\n            const [wireValue, transferables] = toWireValue(returnValue);\r\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\r\n            if (type === 5 /* RELEASE */) {\r\n                // detach and deactive after sending release response above.\r\n                ep.removeEventListener(\"message\", callback);\r\n                closeEndPoint(ep);\r\n            }\r\n        });\r\n    });\r\n    if (ep.start) {\r\n        ep.start();\r\n    }\r\n}\r\nfunction isMessagePort(endpoint) {\r\n    return endpoint.constructor.name === \"MessagePort\";\r\n}\r\nfunction closeEndPoint(endpoint) {\r\n    if (isMessagePort(endpoint))\r\n        endpoint.close();\r\n}\r\nfunction wrap(ep, target) {\r\n    return createProxy(ep, [], target);\r\n}\r\nfunction throwIfProxyReleased(isReleased) {\r\n    if (isReleased) {\r\n        throw new Error(\"Proxy has been released and is not useable\");\r\n    }\r\n}\r\nfunction createProxy(ep, path = [], target = function () { }) {\r\n    let isProxyReleased = false;\r\n    const proxy = new Proxy(target, {\r\n        get(_target, prop) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            if (prop === releaseProxy) {\r\n                return () => {\r\n                    return requestResponseMessage(ep, {\r\n                        type: 5 /* RELEASE */,\r\n                        path: path.map((p) => p.toString()),\r\n                    }).then(() => {\r\n                        closeEndPoint(ep);\r\n                        isProxyReleased = true;\r\n                    });\r\n                };\r\n            }\r\n            if (prop === \"then\") {\r\n                if (path.length === 0) {\r\n                    return { then: () => proxy };\r\n                }\r\n                const r = requestResponseMessage(ep, {\r\n                    type: 0 /* GET */,\r\n                    path: path.map((p) => p.toString()),\r\n                }).then(fromWireValue);\r\n                return r.then.bind(r);\r\n            }\r\n            return createProxy(ep, [...path, prop]);\r\n        },\r\n        set(_target, prop, rawValue) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\r\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\r\n            const [value, transferables] = toWireValue(rawValue);\r\n            return requestResponseMessage(ep, {\r\n                type: 1 /* SET */,\r\n                path: [...path, prop].map((p) => p.toString()),\r\n                value,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        apply(_target, _thisArg, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const last = path[path.length - 1];\r\n            if (last === createEndpoint) {\r\n                return requestResponseMessage(ep, {\r\n                    type: 4 /* ENDPOINT */,\r\n                }).then(fromWireValue);\r\n            }\r\n            // We just pretend that `bind()` didn’t happen.\r\n            if (last === \"bind\") {\r\n                return createProxy(ep, path.slice(0, -1));\r\n            }\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: 2 /* APPLY */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        construct(_target, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: 3 /* CONSTRUCT */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n    });\r\n    return proxy;\r\n}\r\nfunction myFlat(arr) {\r\n    return Array.prototype.concat.apply([], arr);\r\n}\r\nfunction processArguments(argumentList) {\r\n    const processed = argumentList.map(toWireValue);\r\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\r\n}\r\nconst transferCache = new WeakMap();\r\nfunction transfer(obj, transfers) {\r\n    transferCache.set(obj, transfers);\r\n    return obj;\r\n}\r\nfunction proxy(obj) {\r\n    return Object.assign(obj, { [proxyMarker]: true });\r\n}\r\nfunction windowEndpoint(w, context = self, targetOrigin = \"*\") {\r\n    return {\r\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\r\n        addEventListener: context.addEventListener.bind(context),\r\n        removeEventListener: context.removeEventListener.bind(context),\r\n    };\r\n}\r\nfunction toWireValue(value) {\r\n    for (const [name, handler] of transferHandlers) {\r\n        if (handler.canHandle(value)) {\r\n            const [serializedValue, transferables] = handler.serialize(value);\r\n            return [\r\n                {\r\n                    type: 3 /* HANDLER */,\r\n                    name,\r\n                    value: serializedValue,\r\n                },\r\n                transferables,\r\n            ];\r\n        }\r\n    }\r\n    return [\r\n        {\r\n            type: 0 /* RAW */,\r\n            value,\r\n        },\r\n        transferCache.get(value) || [],\r\n    ];\r\n}\r\nfunction fromWireValue(value) {\r\n    switch (value.type) {\r\n        case 3 /* HANDLER */:\r\n            return transferHandlers.get(value.name).deserialize(value.value);\r\n        case 0 /* RAW */:\r\n            return value.value;\r\n    }\r\n}\r\nfunction requestResponseMessage(ep, msg, transfers) {\r\n    return new Promise((resolve) => {\r\n        const id = generateUUID();\r\n        ep.addEventListener(\"message\", function l(ev) {\r\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\r\n                return;\r\n            }\r\n            ep.removeEventListener(\"message\", l);\r\n            resolve(ev.data);\r\n        });\r\n        if (ep.start) {\r\n            ep.start();\r\n        }\r\n        ep.postMessage(Object.assign({ id }, msg), transfers);\r\n    });\r\n}\r\nfunction generateUUID() {\r\n    return new Array(4)\r\n        .fill(0)\r\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\r\n        .join(\"-\");\r\n}\n\nexport { createEndpoint, expose, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        const returnVal = await target[targetFuncName](...args);\n        if (isWrite)\n            await tx.done;\n        return returnVal;\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n"],"sourceRoot":""}