{"version":3,"sources":["webpack://kontokorrent/./node_modules/comlink/dist/esm/comlink.mjs","webpack://kontokorrent/./src/utils/groupBy.ts","webpack://kontokorrent/./src/lib/BalanceCalculator.ts","webpack://kontokorrent/./src/lib/filterBezahlungen.ts","webpack://kontokorrent/./node_modules/idb/build/esm/wrap-idb-value.js","webpack://kontokorrent/./node_modules/idb/build/esm/index.js","webpack://kontokorrent/./src/lib/KontokorrentDatabase.ts","webpack://kontokorrent/./src/lib/KontokorrentSynchronizer.ts","webpack://kontokorrent/./src/worker/KontokorrentWorker.ts","webpack://kontokorrent/./src/utils/sortBy.ts"],"names":["proxyMarker","Symbol","createEndpoint","releaseProxy","throwMarker","isObject","val","transferHandlers","Map","canHandle","obj","port1","port2","MessageChannel","expose","deserialize","port","start","createProxy","target","value","serialized","Error","isError","message","name","stack","Object","assign","ep","self","addEventListener","callback","ev","data","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","set","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","endpoint","constructor","isMessagePort","close","throwIfProxyReleased","isReleased","isProxyReleased","Proxy","_target","requestResponseMessage","p","toString","length","r","bind","_thisArg","rawArgumentList","last","processArguments","processed","v","arr","Array","prototype","concat","WeakMap","handler","serializedValue","serialize","get","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","groupBy","list","key","forEach","item","k","collection","push","GeteilteZahlung","wert","empfaengerAnzahl","isEmpfaenger","BalanceCalculator","db","summe","nenner","andere","c","n","kontokorrentId","gespeicherte","aktionen","bezahlungenMap","ordered","sort","a","b","laufendeNummer","bearbeiteteBezahlungId","geloeschteBezahlungId","bezahlung","values","filterBezahlungen","this","getAktionen","bezahlungen","getZwischengespeicherteBezahlungenForKontokorrent","kk","getKontokorrent","geteilteZahlungen","personen","e","empfaengerIds","bezahlendePersonId","balance","gruppen","alleNenner","from","keys","gesamtNenner","gesamtSumme","g","erweitern","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","receiver","IDBTransaction","objectStoreNames","objectStore","has","transformCachableValue","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","args","unwrap","storeNames","tx","call","done","reject","unlisten","complete","error","DOMException","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","IDBRequest","request","promise","success","result","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","replace","useIndex","isWrite","method","async","storeName","store","index","shift","returnVal","oldTraps","KontokorrentsStore","AppStateStore","AktionenStore","NeueBezahlungenStore","KontokorrentSynchronizer","max","cb","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","openDB","createObjectStore","keyPath","createIndex","put","zuletztGesehenerKontokorrentId","accesstokens","accountinfo","contains","deleteObjectStore","withInitialized","getAll","keySelector","toLowerCase","localeCompare","existing","neueAktionen","filter","add","appState","kks","getKontokorrents","kontokorrents","d","delete","newIds","ex","find","combined","oeffentlicherName","getFromIndex","getAllFromIndex","clear","tokenType","t","lastTimeStamp","durability","timestamp","console","accountInfo","m","calculateBalance","getLaufendeNummer"],"mappings":"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","file":"ec39393d0c5a9d62476b.bundle.js","sourcesContent":["/**\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst proxyMarker = Symbol(\"Comlink.proxy\");\r\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\r\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\r\nconst throwMarker = Symbol(\"Comlink.thrown\");\r\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\r\n/**\r\n * Internal transfer handle to handle objects marked to proxy.\r\n */\r\nconst proxyTransferHandler = {\r\n    canHandle: (val) => isObject(val) && val[proxyMarker],\r\n    serialize(obj) {\r\n        const { port1, port2 } = new MessageChannel();\r\n        expose(obj, port1);\r\n        return [port2, [port2]];\r\n    },\r\n    deserialize(port) {\r\n        port.start();\r\n        return wrap(port);\r\n    },\r\n};\r\n/**\r\n * Internal transfer handler to handle thrown exceptions.\r\n */\r\nconst throwTransferHandler = {\r\n    canHandle: (value) => isObject(value) && throwMarker in value,\r\n    serialize({ value }) {\r\n        let serialized;\r\n        if (value instanceof Error) {\r\n            serialized = {\r\n                isError: true,\r\n                value: {\r\n                    message: value.message,\r\n                    name: value.name,\r\n                    stack: value.stack,\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            serialized = { isError: false, value };\r\n        }\r\n        return [serialized, []];\r\n    },\r\n    deserialize(serialized) {\r\n        if (serialized.isError) {\r\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\r\n        }\r\n        throw serialized.value;\r\n    },\r\n};\r\n/**\r\n * Allows customizing the serialization of certain values.\r\n */\r\nconst transferHandlers = new Map([\r\n    [\"proxy\", proxyTransferHandler],\r\n    [\"throw\", throwTransferHandler],\r\n]);\r\nfunction expose(obj, ep = self) {\r\n    ep.addEventListener(\"message\", function callback(ev) {\r\n        if (!ev || !ev.data) {\r\n            return;\r\n        }\r\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\r\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\r\n        let returnValue;\r\n        try {\r\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\r\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\r\n            switch (type) {\r\n                case 0 /* GET */:\r\n                    {\r\n                        returnValue = rawValue;\r\n                    }\r\n                    break;\r\n                case 1 /* SET */:\r\n                    {\r\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\r\n                        returnValue = true;\r\n                    }\r\n                    break;\r\n                case 2 /* APPLY */:\r\n                    {\r\n                        returnValue = rawValue.apply(parent, argumentList);\r\n                    }\r\n                    break;\r\n                case 3 /* CONSTRUCT */:\r\n                    {\r\n                        const value = new rawValue(...argumentList);\r\n                        returnValue = proxy(value);\r\n                    }\r\n                    break;\r\n                case 4 /* ENDPOINT */:\r\n                    {\r\n                        const { port1, port2 } = new MessageChannel();\r\n                        expose(obj, port2);\r\n                        returnValue = transfer(port1, [port1]);\r\n                    }\r\n                    break;\r\n                case 5 /* RELEASE */:\r\n                    {\r\n                        returnValue = undefined;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (value) {\r\n            returnValue = { value, [throwMarker]: 0 };\r\n        }\r\n        Promise.resolve(returnValue)\r\n            .catch((value) => {\r\n            return { value, [throwMarker]: 0 };\r\n        })\r\n            .then((returnValue) => {\r\n            const [wireValue, transferables] = toWireValue(returnValue);\r\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\r\n            if (type === 5 /* RELEASE */) {\r\n                // detach and deactive after sending release response above.\r\n                ep.removeEventListener(\"message\", callback);\r\n                closeEndPoint(ep);\r\n            }\r\n        });\r\n    });\r\n    if (ep.start) {\r\n        ep.start();\r\n    }\r\n}\r\nfunction isMessagePort(endpoint) {\r\n    return endpoint.constructor.name === \"MessagePort\";\r\n}\r\nfunction closeEndPoint(endpoint) {\r\n    if (isMessagePort(endpoint))\r\n        endpoint.close();\r\n}\r\nfunction wrap(ep, target) {\r\n    return createProxy(ep, [], target);\r\n}\r\nfunction throwIfProxyReleased(isReleased) {\r\n    if (isReleased) {\r\n        throw new Error(\"Proxy has been released and is not useable\");\r\n    }\r\n}\r\nfunction createProxy(ep, path = [], target = function () { }) {\r\n    let isProxyReleased = false;\r\n    const proxy = new Proxy(target, {\r\n        get(_target, prop) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            if (prop === releaseProxy) {\r\n                return () => {\r\n                    return requestResponseMessage(ep, {\r\n                        type: 5 /* RELEASE */,\r\n                        path: path.map((p) => p.toString()),\r\n                    }).then(() => {\r\n                        closeEndPoint(ep);\r\n                        isProxyReleased = true;\r\n                    });\r\n                };\r\n            }\r\n            if (prop === \"then\") {\r\n                if (path.length === 0) {\r\n                    return { then: () => proxy };\r\n                }\r\n                const r = requestResponseMessage(ep, {\r\n                    type: 0 /* GET */,\r\n                    path: path.map((p) => p.toString()),\r\n                }).then(fromWireValue);\r\n                return r.then.bind(r);\r\n            }\r\n            return createProxy(ep, [...path, prop]);\r\n        },\r\n        set(_target, prop, rawValue) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\r\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\r\n            const [value, transferables] = toWireValue(rawValue);\r\n            return requestResponseMessage(ep, {\r\n                type: 1 /* SET */,\r\n                path: [...path, prop].map((p) => p.toString()),\r\n                value,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        apply(_target, _thisArg, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const last = path[path.length - 1];\r\n            if (last === createEndpoint) {\r\n                return requestResponseMessage(ep, {\r\n                    type: 4 /* ENDPOINT */,\r\n                }).then(fromWireValue);\r\n            }\r\n            // We just pretend that `bind()` didn’t happen.\r\n            if (last === \"bind\") {\r\n                return createProxy(ep, path.slice(0, -1));\r\n            }\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: 2 /* APPLY */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        construct(_target, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: 3 /* CONSTRUCT */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n    });\r\n    return proxy;\r\n}\r\nfunction myFlat(arr) {\r\n    return Array.prototype.concat.apply([], arr);\r\n}\r\nfunction processArguments(argumentList) {\r\n    const processed = argumentList.map(toWireValue);\r\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\r\n}\r\nconst transferCache = new WeakMap();\r\nfunction transfer(obj, transfers) {\r\n    transferCache.set(obj, transfers);\r\n    return obj;\r\n}\r\nfunction proxy(obj) {\r\n    return Object.assign(obj, { [proxyMarker]: true });\r\n}\r\nfunction windowEndpoint(w, context = self, targetOrigin = \"*\") {\r\n    return {\r\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\r\n        addEventListener: context.addEventListener.bind(context),\r\n        removeEventListener: context.removeEventListener.bind(context),\r\n    };\r\n}\r\nfunction toWireValue(value) {\r\n    for (const [name, handler] of transferHandlers) {\r\n        if (handler.canHandle(value)) {\r\n            const [serializedValue, transferables] = handler.serialize(value);\r\n            return [\r\n                {\r\n                    type: 3 /* HANDLER */,\r\n                    name,\r\n                    value: serializedValue,\r\n                },\r\n                transferables,\r\n            ];\r\n        }\r\n    }\r\n    return [\r\n        {\r\n            type: 0 /* RAW */,\r\n            value,\r\n        },\r\n        transferCache.get(value) || [],\r\n    ];\r\n}\r\nfunction fromWireValue(value) {\r\n    switch (value.type) {\r\n        case 3 /* HANDLER */:\r\n            return transferHandlers.get(value.name).deserialize(value.value);\r\n        case 0 /* RAW */:\r\n            return value.value;\r\n    }\r\n}\r\nfunction requestResponseMessage(ep, msg, transfers) {\r\n    return new Promise((resolve) => {\r\n        const id = generateUUID();\r\n        ep.addEventListener(\"message\", function l(ev) {\r\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\r\n                return;\r\n            }\r\n            ep.removeEventListener(\"message\", l);\r\n            resolve(ev.data);\r\n        });\r\n        if (ep.start) {\r\n            ep.start();\r\n        }\r\n        ep.postMessage(Object.assign({ id }, msg), transfers);\r\n    });\r\n}\r\nfunction generateUUID() {\r\n    return new Array(4)\r\n        .fill(0)\r\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\r\n        .join(\"-\");\r\n}\n\nexport { createEndpoint, expose, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","export function groupBy<T, K extends keyof T>(list: T[], key: K) {\n    const map = new Map<T[K], T[]>();\n    list.forEach((item) => {\n        const k = item[key];\n        const collection = map.get(k);\n        if (!collection) {\n            map.set(k, [item]);\n        } else {\n            collection.push(item);\n        }\n    });\n    return map;\n}\n","import { KontokorrentDatabase } from \"./KontokorrentDatabase\";\nimport { KontokorrentBalance } from \"./KontokorrentBalance\";\nimport { filterBezahlungen } from \"./filterBezahlungen\";\nimport { groupBy } from \"../utils/groupBy\";\n\nclass GeteilteZahlung {\n    constructor(public wert: number,\n        public empfaengerAnzahl: number,\n        public isEmpfaenger: boolean) {\n\n    }\n}\n\ntype Bezahlung = { empfaengerIds: string[], bezahlendePersonId: string, wert: number };\n\nexport class BalanceCalculator {\n    constructor(private db: KontokorrentDatabase) {\n    }\n\n    erweitern(summe: number, nenner: number, andere: number[]) {\n        let c = 1;\n        for (let n of andere) {\n            if (n != nenner) {\n                c *= n;\n            }\n        }\n        return summe * c;\n    }\n\n    async calculateBalance(kontokorrentId: string) {\n        let aktionen = await this.db.getAktionen(kontokorrentId);\n        let gespeicherte: Bezahlung[] = filterBezahlungen(aktionen);\n        let zwischengespeicherte: Bezahlung[] = await this.db.getZwischengespeicherteBezahlungenForKontokorrent(kontokorrentId);\n        let bezahlungen = [...zwischengespeicherte, ...gespeicherte];\n        let kk = await this.db.getKontokorrent(kontokorrentId);\n        let geteilteZahlungen: { [id: string]: GeteilteZahlung[] } = {};\n        for (let p of kk.personen) {\n            geteilteZahlungen[p.id] = [];\n        }\n        for (let b of bezahlungen) {\n            for (let e of b.empfaengerIds) {\n                geteilteZahlungen[e].push(new GeteilteZahlung(b.wert, b.empfaengerIds.length, true));\n                geteilteZahlungen[b.bezahlendePersonId].push(new GeteilteZahlung(b.wert, b.empfaengerIds.length, false));\n            }\n        }\n        let balance: KontokorrentBalance = {};\n        for (let p of kk.personen) {\n            let gruppen = groupBy(geteilteZahlungen[p.id], \"empfaengerAnzahl\");\n            let alleNenner = Array.from(gruppen.keys());\n            let gesamtNenner = Array.from(gruppen.keys()).reduce((p, c) => p * c, 1);\n            if (gesamtNenner < 362880) {\n                let gesamtSumme = 0;\n                for (let g of gruppen.keys()) {\n                    let zahlungen = gruppen.get(g);\n                    let summe = zahlungen.reduce((p, c) => p + (c.isEmpfaenger ? c.wert : -c.wert), 0);\n                    gesamtSumme += this.erweitern(summe, g, alleNenner);\n                }\n                balance[p.id] = gesamtSumme / gesamtNenner;\n            }\n            else {\n                let gesamtSumme = 0;\n                for (let g of gruppen.keys()) {\n                    let zahlungen = gruppen.get(g);\n                    let summe = zahlungen.reduce((p, c) => p + (c.isEmpfaenger ? c.wert : -c.wert), 0);\n                    gesamtSumme += summe / g;\n                }\n                balance[p.id] = gesamtSumme;\n            }\n        }\n        return balance;\n    }\n}","import { BezahlungDbModel } from \"./BezahlungDbModel\";\nimport { AktionDbModel } from \"./AktionDbModel\";\n\nexport function filterBezahlungen(aktionen: AktionDbModel[]) {\n    let bezahlungenMap: { [id: string]: BezahlungDbModel } = {};\n    let ordered = aktionen.sort((a,b)=> a.laufendeNummer - b.laufendeNummer);\n    for (let b of ordered) {\n        if (b.bearbeiteteBezahlungId) {\n            delete bezahlungenMap[b.bearbeiteteBezahlungId];\n        }\n        if (b.geloeschteBezahlungId) {\n            delete bezahlungenMap[b.geloeschteBezahlungId];\n        }\n        else {\n            bezahlungenMap[b.bezahlung.id] = b.bezahlung;\n        }\n    }\n    let bezahlungen = Object.values(bezahlungenMap);\n    return bezahlungen;\n}","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        const returnVal = await target[targetFuncName](...args);\n        if (isWrite)\n            await tx.done;\n        return returnVal;\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { openDB, IDBPDatabase, DBSchema, unwrap } from \"idb\";\nimport { KontokorrentDbModel } from \"./KontokorrentDbModel\";\nimport { sortByAlphabetically } from \"../utils/sortBy\";\nimport { Aktion } from \"../api/Aktion\";\nimport { AktionDbModel } from \"./AktionDbModel\";\nimport { AccountInfo } from \"./AccountInfo\";\nimport { NeueBezahlungDbModel } from \"./NeueBezahlungDbModel\";\n\n\nconst KontokorrentsStore = \"KontokorrentsStore\";\nconst AppStateStore = \"AppStateStore\";\nconst AktionenStore = \"AktionenStore\";\nconst NeueBezahlungenStore = \"NeueBezahlungenStore\";\n\ninterface AccessTokenInfo {\n    timestamp: number;\n    value: string;\n    type: \"google\" | \"anonymous\";\n}\n\ninterface AppSettings {\n    id: number;\n    zuletztGesehenerKontokorrentId: string\n    accesstokens: AccessTokenInfo[];\n    accountinfo: AccountInfo;\n}\n\ninterface KontokorrentDbSchema extends DBSchema {\n    KontokorrentsStore: {\n        key: string;\n        value: KontokorrentDbModel;\n        indexes: { \"oeffentlicherName\": string };\n    };\n    AppStateStore: {\n        value: AppSettings;\n        key: number;\n    };\n    AktionenStore: {\n        key: [number, string],\n        value: AktionDbModel,\n        indexes: { \"kontokorrentId\": string };\n    };\n    NeueBezahlungenStore: {\n        key: string,\n        value: NeueBezahlungDbModel,\n        indexes: { \"kontokorrentId\": string };\n    }\n}\n\n\nconst initialSettings: (() => AppSettings) = () => { return { id: 0, zuletztGesehenerKontokorrentId: null, accesstokens: [], accountinfo: null } };\nexport class KontokorrentDatabase {\n\n    private async withInitialized<T>(cb: (db: IDBPDatabase<KontokorrentDbSchema>) => Promise<T>) {\n        let db = await openDB<KontokorrentDbSchema>(\"kontokorrent-db\", 5, {\n            upgrade(db, oldVersion: number, newVersion: number) {\n                if (oldVersion < 1) {\n                    let store = db.createObjectStore(KontokorrentsStore, { keyPath: \"id\" });\n                    store.createIndex(\"oeffentlicherName\", \"oeffentlicherName\");\n                }\n                if (oldVersion < 2) {\n                    let store = db.createObjectStore(AppStateStore, { keyPath: \"id\" });\n                    store.put(initialSettings());\n                }\n                if (oldVersion < 3) {\n                    let store = db.createObjectStore(AktionenStore, { keyPath: [\"laufendeNummer\", \"kontokorrentId\"] });\n                    store.createIndex(\"kontokorrentId\", \"kontokorrentId\");\n                }\n                if (oldVersion < 5) {\n                    if (db.objectStoreNames.contains(NeueBezahlungenStore)) {\n                        db.deleteObjectStore(NeueBezahlungenStore)\n                    }\n                    let store = db.createObjectStore(NeueBezahlungenStore, { keyPath: \"id\" });\n                    store.createIndex(\"kontokorrentId\", \"kontokorrentId\");\n                }\n            },\n        });\n        try {\n            return await cb(db);\n        }\n        finally {\n            db.close();\n        }\n    }\n\n    async getKontokorrents(): Promise<KontokorrentDbModel[]> {\n        return await this.withInitialized(async db => {\n            return sortByAlphabetically((await db.getAll(KontokorrentsStore)), k => k.name);\n        });\n    }\n\n    async addAktionen(id: string, aktionen: Aktion[]): Promise<void> {\n        if (!aktionen.length) {\n            return;\n        }\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AktionenStore, \"readwrite\");\n            let existing = await tx.store.index(\"kontokorrentId\").getAll(id);\n            let neueAktionen = aktionen\n                .filter(a => !existing.some(e => a.laufendeNummer == e.laufendeNummer))\n                .map(v => {\n                    let a: AktionDbModel = {\n                        ...v,\n                        kontokorrentId: id\n                    };\n                    return a;\n                });\n            for (let a of neueAktionen) {\n                await tx.store.add(a);\n            }\n            await tx.done;\n        });\n    }\n\n    async getZuletztGesehenerKontokorrentId(): Promise<string> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            if (appState.zuletztGesehenerKontokorrentId) {\n                return appState.zuletztGesehenerKontokorrentId;\n            }\n            else {\n                let kks = await (await this.getKontokorrents());\n                if (kks.length) {\n                    return kks[0].id;\n                }\n                return null;\n            }\n        });\n    }\n\n    async setZuletztGesehenerKontokorrentId(id: string): Promise<void> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            appState.zuletztGesehenerKontokorrentId = id;\n            await db.put(AppStateStore, appState);\n        });\n    }\n\n    async setKontokorrents(kontokorrents: {\n        name: string, id: string, personen: { name: string, id: string }[],\n        oeffentlicherName: string\n    }[]): Promise<string[]> {\n        return await this.withInitialized(async db => {\n            let existing: KontokorrentDbModel[] = (await db.getAll(KontokorrentsStore));\n            for (let v of existing.filter(e => !kontokorrents.some(d => e.id === d.id))) {\n                await db.delete(KontokorrentsStore, v.id);\n            }\n            let newIds: string[] = [];\n            for (let v of kontokorrents) {\n                let ex = existing.find(d => d.id == v.id);\n                if (!ex) {\n                    newIds.push(v.id);\n                }\n                let combined = {\n                    ...ex, name: v.name, personen: v.personen, id: v.id,\n                    oeffentlicherName: v.oeffentlicherName\n                };\n                await db.put(KontokorrentsStore, combined);\n            }\n            return newIds;\n        });\n    }\n\n    async addKontokorrent(kk: KontokorrentDbModel): Promise<void> {\n        return await this.withInitialized(async db => {\n            if (!await db.get(KontokorrentsStore, kk.id)) {\n                await db.add(KontokorrentsStore, kk);\n            }\n        });\n    }\n\n    async getKontokorrent(id: string): Promise<KontokorrentDbModel> {\n        return await this.withInitialized(async db => {\n            return <KontokorrentDbModel>await db.get(KontokorrentsStore, id);\n        });\n    }\n\n    async getPerOeffentlichName(id: string): Promise<KontokorrentDbModel> {\n        return await this.withInitialized(async db => {\n            return <KontokorrentDbModel>await db.getFromIndex(KontokorrentsStore, \"oeffentlicherName\", id);\n        });\n    }\n\n    async getAktionen(id: string): Promise<AktionDbModel[]> {\n        return await this.withInitialized(async db => {\n            return await db.getAllFromIndex(AktionenStore, \"kontokorrentId\", id);\n        });\n    }\n\n    async clear() {\n        return await this.withInitialized(async db => {\n            await db.clear(AktionenStore);\n            await db.clear(KontokorrentsStore);\n            await db.put(AppStateStore, initialSettings());\n        });\n    }\n\n    async getAccessToken(tokenType: \"anonymous\" | \"google\"): Promise<AccessTokenInfo> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            return (appState.accesstokens || []).find(t => t.type === tokenType);\n        });\n    }\n\n    async updateAccessTokenIfNewer(tokenType: \"anonymous\" | \"google\", value: string, lastTimeStamp: number): Promise<boolean> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\", { durability: \"strict\" });\n            let appState = await tx.store.get(0);\n            if (!appState.accesstokens) {\n                appState.accesstokens = [];\n            }\n            let existing = appState.accesstokens.find(t => t.type === tokenType);\n            if (!existing) {\n                appState.accesstokens.push({\n                    timestamp: 1,\n                    type: tokenType,\n                    value: value\n                });\n            } else if (existing.timestamp == lastTimeStamp) {\n                existing.value = value;\n                existing.timestamp++;\n            }\n            else {\n                console.error(`The accesstoken of type ${tokenType} was already updated since reading.`);\n                await tx.done;\n                return false;\n            }\n            await tx.store.put(appState);\n            await tx.done;\n            return true;\n        });\n    }\n\n    async setAccountInfo(accountInfo: AccountInfo): Promise<void> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\");\n            let appState = await tx.store.get(0);\n            appState.accountinfo = accountInfo;\n            await tx.store.put(appState);\n            await tx.done;\n        });\n    }\n\n    async getAccountInfo(): Promise<AccountInfo> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readonly\");\n            let appState = await tx.store.get(0);\n            return appState?.accountinfo;\n        });\n    }\n\n    async clearAccountInfo(): Promise<void> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\");\n            let appState = await tx.store.get(0);\n            appState.accountinfo = null;\n            appState.accesstokens = [];\n            await tx.store.put(appState);\n            await tx.done;\n        });\n    }\n\n    async getZwischengespeicherteBezahlungen(): Promise<NeueBezahlungDbModel[]> {\n        return await this.withInitialized(async db => {\n            return db.getAll(NeueBezahlungenStore);\n        });\n    }\n\n    async getZwischengespeicherteBezahlungenForKontokorrent(kontokorrentId: string): Promise<NeueBezahlungDbModel[]> {\n        return await this.withInitialized(async db => {\n            return await db.getAllFromIndex(NeueBezahlungenStore, \"kontokorrentId\", kontokorrentId);\n        });\n    }\n\n    async bezahlungZwischenspeichern(m: NeueBezahlungDbModel) {\n        return await this.withInitialized(async db => {\n            db.add(NeueBezahlungenStore, m);\n        });\n    }\n\n    async zwischengespeicherteBezahlungErledigt(id: string) {\n        await this.withInitialized(async db => {\n            db.delete(NeueBezahlungenStore, id);\n        });\n    }\n}\n","import { KontokorrentDatabase } from \"./KontokorrentDatabase\";\n\nexport class KontokorrentSynchronizer {\n    constructor(private db: KontokorrentDatabase) {\n    }\n\n    async getLaufendeNummer(kontokorrentId: string) {\n        let aktionen = await this.db.getAktionen(kontokorrentId);\n        let max = Math.max(...aktionen.map(v => v.laufendeNummer));\n        return max;\n    }\n}","import { expose } from \"comlink\";\nimport { BalanceCalculator } from \"../lib/BalanceCalculator\";\nimport { KontokorrentDatabase } from \"../lib/KontokorrentDatabase\";\nimport { KontokorrentSynchronizer } from \"../lib/KontokorrentSynchronizer\";\n\nconst db = new KontokorrentDatabase();\n\nexport async function calculateBalance(kontokorrentId: string) {\n    return await (new BalanceCalculator(db).calculateBalance(kontokorrentId));\n}\n\nexport async function getLaufendeNummer(kontokorrentId: string) {\n    return await (new KontokorrentSynchronizer(db).getLaufendeNummer(kontokorrentId));\n}\n\nconst exports = {\n    calculateBalance,\n    getLaufendeNummer\n};\nexport type KontokorrentWorkerApi = typeof exports;\nexpose(exports, self);","export function sortByAlphabetically<T, P extends keyof T>(collection: T[], keySelector: (x: T) => string): T[] {\n    return collection.sort((a, b) => keySelector(a).toLowerCase().localeCompare(keySelector(b).toLowerCase()));\n}"],"sourceRoot":""}