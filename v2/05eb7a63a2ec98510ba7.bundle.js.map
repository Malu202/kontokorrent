{"version":3,"sources":["webpack://kontokorrent/./src/components/AppBar/AppBar.html","webpack://kontokorrent/./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.html","webpack://kontokorrent/./src/components/BezahlungEintragenForm/BezahlungEintragenForm.html","webpack://kontokorrent/./src/components/BezahlungEintragenPage/BezahlungEintragenPage.html","webpack://kontokorrent/./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelect.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectList.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectListEntry.html","webpack://kontokorrent/./src/components/MdcCheckbox/MdcCheckbox.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectListEntry.ts","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectList.ts","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelect.ts","webpack://kontokorrent/./src/components/AppBar/AppBar.ts","webpack://kontokorrent/./src/state/actions/BezahlungActionCreator.ts","webpack://kontokorrent/./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.ts","webpack://kontokorrent/./src/components/MdcCheckbox/MdcCheckbox.ts","webpack://kontokorrent/./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.ts","webpack://kontokorrent/./src/components/BezahlungEintragenForm/BezahlungEintragenForm.ts","webpack://kontokorrent/./src/components/BezahlungEintragenPage/BezahlungEintragenPage.ts","webpack://kontokorrent/./src/components/convertLinks.ts","webpack://kontokorrent/./src/components/ui-components/popup/popup.ts","webpack://kontokorrent/./src/utils/ArrayToElementRenderer.ts","webpack://kontokorrent/./src/utils/ReuseableTemplate.ts"],"names":["module","exports","KontokorrentSelectListEntry","HTMLElement","super","this","innerHTML","name","querySelector","link","clickEvent","bind","addEventListener","e","preventDefault","dispatchEvent","CustomEvent","detail","kontokorrent","id","bubbles","removeEventListener","isActive","innerText","href","classList","toggle","customElements","define","KontokorrentSelectList","list","_kontokorrents","kontokorrentsRenderer","ArrayToElementRenderer","k","li","document","createElement","appendChild","update","firstChild","_activeKontokorrentId","kontokorrents","sortBy","KontokorrentSelectListTagName","KontokorrentSelect","kontokorrentName","kontokorrentSelectList","addButton","popup","updateAttributes","contains","event","stopPropagation","hide","activeKontokorrentId","getAttribute","updatesStyle","length","activeKontokorrent","find","KontokorrentSelectTagName","AppBar","kontokorrentSelect","logoutDialog","accountActionCreator","logout","convertLinks","querySelectorAll","routingActionCreator","subscription","store","subscribe","state","applyStoreState","navigateLogin","Object","values","setAttribute","serviceLocator","AppBarTagName","BezahlungKontokorrentGeandert","kontokorrentId","type","BezahlungActionCreator","db","getZuletztGesehenerKontokorrentId","dispatch","setZuletztGesehenerKontokorrentId","BezahlendePersonRadioButton","input","personLabel","label","v","value","template","ReuseableTemplate","get","nativeControl","mdcCheckBox","checkboxId","checkboxName","BezahlungEintragenForm","zahlendePersonRenderer","p","empfaengerRenderer","element","person","radioName","BezahlungEintragenFormTagName","BezahlungEintragenPage","zurueckLink","appBar","bezahlungEintragenForm","bezahlungActionCreator","bezahlungActionCreatorFactory","addServices","s","bezahlungEintragenKontokorrentChanged","bezahlungEintragenGeoeffnet","personen","elements","forEach","ev","navigate","Popup","popupShown","keyListener","clickListener","updateStyles","key","style","display","show","listElement","keySelector","keyToElement","Map","elementToKey","WeakMap","updateElement","keyCache","getKey","d","set","x","Array","from","children","el","data","i","removeChild","before","nextKeyToElement","t","childElement","firstElementChild","prepend","nextElementSibling","insertAdjacentElement","instance","importNode","content"],"mappings":"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","file":"05eb7a63a2ec98510ba7.bundle.js","sourcesContent":["// Module\nvar code = \"<header class=\\\"app-bar\\\"> <kontokorrent-select class=\\\"app-bar__kontokorrent-select\\\"></kontokorrent-select> <nav class=\\\"app-bar__links\\\"> <button id=\\\"logout-button\\\" class=\\\"app-bar__link\\\" title=\\\"Logout\\\"> <span class=\\\"material-icons\\\"> exit_to_app </span> </button> <a href=\\\"info\\\" class=\\\"app-bar__link\\\" title=\\\"Informationen über diese App\\\"> <span class=\\\"material-icons\\\"> info </span> </a> </nav> </header> <app-popup id=\\\"logout-dialog\\\"> <div class=\\\"dialog__backdrop\\\"></div> <div class=\\\"dialog\\\"> <p> Wirklich aus allen Kontokorrents ausloggen? </p> <div class=\\\"dialog__button-pane\\\"> <button id=\\\"abort-logout\\\" class=\\\"button\\\">Abbrechen</button> <button id=\\\"confirm-logout\\\" class=\\\"button\\\">Ausloggen</button> </div> </div> </app-popup>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<input type=\\\"radio\\\" class=\\\"bezahlende-person-radio__input\\\"/> <label class=\\\"bezahlende-person-radio\\\"> <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\"> <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/> <path d=\\\"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z\\\"/> </svg> <span data-ref=\\\"label\\\"></span> </label>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<form novalidate class=\\\"bezahlung-eintragen-form\\\"> <label for=\\\"betrag\\\" class=\\\"bezahlung-eintragen-form__label\\\">Betrag</label> <input name=\\\"betrag\\\" id=\\\"betrag\\\" type=\\\"number\\\" novalidate step=\\\"any\\\"> <label for=\\\"zahlende-person\\\" class=\\\"bezahlung-eintragen-form__label\\\">Diese Person zahlt</label> <div id=\\\"zahlende-person-auswahl\\\"></div> <label for=\\\"empfaenger\\\" class=\\\"bezahlung-eintragen-form__label\\\">für diese Personen</label> <div id=\\\"empfaenger-auswahl\\\"></div> <label for=\\\"betreff\\\" class=\\\"bezahlung-eintragen-form__label\\\">Betreff</label> <input name=\\\"betreff\\\" id=\\\"betreff\\\" required=\\\"\\\" type=\\\"text\\\"> </form>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<app-bar></app-bar> <div class=\\\"bezahlungen-page-menu\\\"> <a id=\\\"zurueck-zum-kontokorrent\\\" class=\\\"button\\\"> <span class=\\\"material-icons\\\"> arrow_back </span> zurück </a> <button class=\\\"button\\\" title=\\\"speichern\\\"> <span class=\\\"material-icons\\\"> save </span> speichern </button> </div> <div class=\\\"bezahlungen-page__form-container\\\"> <bezahlung-eintragen-form> </bezahlung-eintragen-form> </div>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<mdc-checkbox></mdc-checkbox> <label></label>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<div class=\\\"kontokorrent-select-wrapper\\\"> <div class=\\\"kontokorrent-select\\\"> <h1 data-ref=\\\"kontokorrent-name\\\" class=\\\"kontokorrent-select__name\\\">Kontokorrent</h1> <button class=\\\"kontokorrent-select__choose\\\" title=\\\"anderen Kontokorrent wählen\\\"> <span class=\\\"material-icons\\\"> arrow_drop_down </span> </button> </div> <app-popup class=\\\"kontokorrent-select__popup\\\"> <kontokorrent-select-list></kontokorrent-select-list> <div class=\\\"kontokorrent-select__buttons\\\"> <button id=\\\"add-kontokorrent\\\" class=\\\"button\\\">weiteren hinzufügen</button> </div> </app-popup> </div>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<ol data-ref=\\\"list\\\" class=\\\"kontokorrent-select-list\\\"> </ol>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<a data-ref=\\\"link\\\" class=\\\"kontokorrent-select-list__entry\\\"> <span data-ref=\\\"name\\\"></span> </a>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<div class=\\\"mdc-touch-target-wrapper\\\"> <div class=\\\"mdc-checkbox mdc-checkbox--touch\\\"> <input type=\\\"checkbox\\\" class=\\\"mdc-checkbox__native-control\\\"/> <div class=\\\"mdc-checkbox__background\\\"> <svg class=\\\"mdc-checkbox__checkmark\\\" viewBox=\\\"0 0 24 24\\\"> <path class=\\\"mdc-checkbox__checkmark-path\\\" fill=\\\"none\\\" d=\\\"M1.73,12.91 8.1,19.28 22.79,4.59\\\"/> </svg> <div class=\\\"mdc-checkbox__mixedmark\\\"></div> </div> <div class=\\\"mdc-checkbox__ripple\\\"></div> </div> </div>\";\n// Exports\nmodule.exports = code;","import template from \"./KontokorrentSelectListEntry.html\";\nimport { KontokorrentState } from \"../../state/State\";\n\n\nexport class KontokorrentSelectListEntry extends HTMLElement {\n    private name: HTMLSpanElement;\n    private link: HTMLAnchorElement;\n    private kontokorrent: KontokorrentState;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.name = this.querySelector(`[data-ref=\"name\"]`);\n        this.link = this.querySelector(`[data-ref=\"link\"]`);\n        this.clickEvent = this.clickEvent.bind(this);\n    }\n\n    connectedCallback() {\n        this.link.addEventListener(\"click\", this.clickEvent);\n    }\n\n    private clickEvent(e: MouseEvent): void {\n        e.preventDefault();\n        this.dispatchEvent(new CustomEvent(\"gotokontokorrent\", { detail: this.kontokorrent.id, bubbles: true }));\n    }\n\n    disconnectedCallback() {\n        this.link.removeEventListener(\"click\", this.clickEvent);\n    }\n\n    update(kontokorrent: KontokorrentState, isActive: boolean) {\n        this.kontokorrent = kontokorrent;\n        this.name.innerText = kontokorrent.name;\n        this.link.href = `kontokorrents/${kontokorrent.id}`;\n        this.link.classList.toggle(\"kontokorrent-select-list__entry--active\", isActive);\n    }\n}\nexport const KontokorrentSelectListEntryTagName = \"kontokorrent-select-list-entry\";\ncustomElements.define(KontokorrentSelectListEntryTagName, KontokorrentSelectListEntry);\n","import template from \"./KontokorrentSelectList.html\";\nimport \"./KontokorrentSelectList.scss\";\nimport { KontokorrentState } from \"../../state/State\";\nimport { sortByAlphabetically } from \"../../utils/sortBy\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { KontokorrentSelectListEntry } from \"./KontokorrentSelectListEntry\";\n\nexport class KontokorrentSelectList extends HTMLElement {\n    private list: HTMLOListElement;\n    private _kontokorrents: KontokorrentState[];\n    private _activeKontokorrentId: string;\n    private kontokorrentsRenderer: ArrayToElementRenderer<KontokorrentState, HTMLLIElement, string>;\n\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.list = this.querySelector(`[data-ref=\"list\"]`);\n        this._kontokorrents = [];\n        this.kontokorrentsRenderer = new ArrayToElementRenderer(this.list,\n            (k: KontokorrentState) => k.id,\n            () => {\n                let li = document.createElement(\"li\");\n                li.appendChild(new KontokorrentSelectListEntry());\n                return li;\n            });\n    }\n\n    connectedCallback() {\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    private update() {\n        this.kontokorrentsRenderer.update(this._kontokorrents,\n            (li, kontokorrent) => {\n                let x: KontokorrentSelectListEntry = <KontokorrentSelectListEntry>li.firstChild;\n                x.update(kontokorrent, this._activeKontokorrentId == kontokorrent.id);\n            });\n    }\n\n    set kontokorrents(kontokorrents: KontokorrentState[]) {\n        this._kontokorrents = sortByAlphabetically(kontokorrents, k => k.name);\n        this.update();\n    }\n\n    set activeKontokorrentId(id: string) {\n        this._activeKontokorrentId = id;\n        this.update();\n    }\n}\nexport const KontokorrentSelectListTagName = \"kontokorrent-select-list\";\ncustomElements.define(KontokorrentSelectListTagName, KontokorrentSelectList);\n","import template from \"./KontokorrentSelect.html\";\nimport \"./KontokorrentSelect.scss\";\nimport \"./KontokorrentSelectList\";\nimport { KontokorrentState } from \"../../state/State\";\nimport { KontokorrentSelectListTagName, KontokorrentSelectList } from \"./KontokorrentSelectList\";\nimport { Popup } from \"../ui-components/popup/popup\";\nimport \"../ui-components/popup/popup\";\n\nexport class KontokorrentSelect extends HTMLElement {\n    private kontokorrentName: HTMLHeadingElement;\n    private popup: Popup;\n    private kontokorrentSelectList: KontokorrentSelectList;\n    private addButton: HTMLButtonElement;\n    private activeKontokorrentId: string;\n    private _kontokorrents: KontokorrentState[];\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.kontokorrentName = this.querySelector(`[data-ref=\"kontokorrent-name\"]`);\n        this.kontokorrentSelectList = this.querySelector(KontokorrentSelectListTagName);\n        this.addButton = this.querySelector(`#add-kontokorrent`);\n        this._kontokorrents = null;\n    }\n\n    connectedCallback() {\n        this.popup = this.querySelector(`app-popup`);\n        this.updateAttributes();\n        this.addEventListener(\"click\", e => {\n            if (!this.popup.contains(<Element>(event.target))) {\n                this.popup.toggle();\n                e.stopPropagation();\n            }\n        });\n        this.addButton.addEventListener(\"click\", e => {\n            this.dispatchEvent(new CustomEvent(\"addkontokorrent\"));\n        });\n        this.kontokorrentSelectList.addEventListener(\"gotokontokorrent\", () => {\n            this.popup.hide();\n        })\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.activeKontokorrentId = this.getAttribute(\"active-kontokorrent-id\");\n        this.kontokorrentSelectList.activeKontokorrentId = this.activeKontokorrentId;\n        this.updatesStyle();\n    }\n\n    static get observedAttributes() {\n        return [\"active-kontokorrent-id\"];\n    }\n\n    set kontokorrents(kontokorrents: KontokorrentState[]) {\n        this.kontokorrentSelectList.kontokorrents = kontokorrents;\n        this._kontokorrents = kontokorrents;\n        this.updatesStyle();\n    }\n\n    private updatesStyle() {\n        if (this._kontokorrents && this._kontokorrents.length) {\n            let activeKontokorrent = this._kontokorrents.find(k => k.id == this.activeKontokorrentId);\n            if (activeKontokorrent) {\n                this.kontokorrentName.innerText = activeKontokorrent.name;\n            }\n            else {\n                this.kontokorrentName.innerText = \"(Kontokorrent wählen)\";\n            }\n        }\n    }\n\n}\nexport const KontokorrentSelectTagName = \"kontokorrent-select\";\ncustomElements.define(KontokorrentSelectTagName, KontokorrentSelect);\n","import template from \"./AppBar.html\";\nimport \"./AppBar.scss\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { convertLinks } from \"../convertLinks\";\nimport \"../KontokorrentSelect/KontokorrentSelect\";\nimport { KontokorrentSelectTagName, KontokorrentSelect } from \"../KontokorrentSelect/KontokorrentSelect\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { AccountActionCreator, accountActionCreatorFactory } from \"../../state/actions/AccountActionCreator\";\nimport { Store } from \"../../state/Store\";\nimport { State } from \"../../state/State\";\nimport { Popup } from \"../ui-components/popup/popup\";\n\nexport class AppBar extends HTMLElement {\n    private kontokorrentSelect: KontokorrentSelect;\n    private store: Store;\n    private routingActionCreator: RoutingActionCreator;\n    private accountActionCreator: AccountActionCreator;\n    private logoutDialog: Popup;\n    private subscription: () => void;\n\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.kontokorrentSelect = this.querySelector(KontokorrentSelectTagName);\n        this.logoutDialog = this.querySelector(\"#logout-dialog\");\n    }\n\n    connectedCallback() {\n        this.querySelector(\"#logout-button\").addEventListener(\"click\", (e: MouseEvent) => {\n            this.logoutDialog.toggle();\n            e.stopPropagation();\n        });\n        this.querySelector(\"#confirm-logout\").addEventListener(\"click\", async () => {\n            await this.accountActionCreator.logout();\n        });\n        this.querySelector(\"#abort-logout\").addEventListener(\"click\", () => {\n            this.logoutDialog.hide();\n        });\n        convertLinks(this.querySelectorAll(\"a\"), this.routingActionCreator);\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.applyStoreState(this.store.state);\n        this.kontokorrentSelect.addEventListener(\"addkontokorrent\", () => {\n            this.routingActionCreator.navigateLogin();\n        });\n    }\n\n    applyStoreState(state: State): void {\n        this.kontokorrentSelect.kontokorrents = Object.values(state.kontokorrents.kontokorrents);\n        this.kontokorrentSelect.setAttribute(\"active-kontokorrent-id\", state.kontokorrents.activeKontokorrentId);\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.accountActionCreator = accountActionCreatorFactory(serviceLocator);\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n    }\n}\nexport const AppBarTagName = \"app-bar\";\ncustomElements.define(AppBarTagName, AppBar);\n","import { Store } from \"../Store\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { Action } from \"../lib/Action\";\nimport { ActionNames } from \"./ActionNames\";\n\nexport class BezahlungKontokorrentGeandert implements Action {\n    readonly type = ActionNames.BezahlungKontokorrentGeandert;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport type BezahlungActions = BezahlungKontokorrentGeandert;\n\nexport class BezahlungActionCreator {\n    constructor(private store: Store,\n        private db: KontokorrentDatabase) {\n    }\n\n    async bezahlungEintragenGeoeffnet() {\n        let id = this.store.state.kontokorrents.activeKontokorrentId || await this.db.getZuletztGesehenerKontokorrentId();\n        this.store.dispatch(new BezahlungKontokorrentGeandert(id));\n    }\n\n    async bezahlungEintragenKontokorrentChanged(id: string) {\n        this.store.dispatch(new BezahlungKontokorrentGeandert(id));\n        await this.db.setZuletztGesehenerKontokorrentId(id);\n    }\n}\n\nexport function bezahlungActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"BezahlungActionCreator\",\n        serviceLocator => new BezahlungActionCreator(serviceLocator.store,\n            serviceLocator.db));\n}\n","import { Person } from \"../../state/State\";\nimport template from \"./BezahlendePersonRadioButton.html\";\nimport \"./BezahlendePersonRadioButton.scss\";\n\nexport class BezahlendePersonRadioButton extends HTMLElement {\n    private input: HTMLInputElement;\n    private personLabel: HTMLLabelElement;\n    private label: HTMLLabelElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.input = this.querySelector(\"input\");\n        this.personLabel = this.querySelector(`[data-ref=\"label\"]`);\n        this.label = this.querySelector(\"label\");\n    }\n\n    connectedCallback() {\n\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    set radioName(v: string) {\n        this.input.name = v;\n    }\n\n    set person(value: Person) {\n        this.input.value = value.id;\n        this.personLabel.innerText = value.name;\n        this.input.id = value.id;\n        this.label.setAttribute(\"for\", value.id);\n    }\n}\n\ncustomElements.define(\"bezahlende-person-radio-button\", BezahlendePersonRadioButton);\n","import { ReuseableTemplate } from \"../../utils/ReuseableTemplate\";\nimport templateContent from \"./MdcCheckbox.html\";\nimport \"./MdcCheckbox.scss\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport class MdcCheckbox extends HTMLElement {\n    private nativeControl: HTMLInputElement;\n\n    constructor() {\n        super();\n        this.appendChild(template.get());\n        this.nativeControl = this.querySelector(\".mdc-checkbox__native-control\");\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    set checkboxId(value: string) {\n        this.nativeControl.id = value;\n    }\n\n    set checkboxName(value: string) {\n        this.nativeControl.name = value;\n    }\n}\n\ncustomElements.define(\"mdc-checkbox\", MdcCheckbox);\n","import templateContent from \"./EmpfaengerCheckbox.html\";\nimport \"./EmpfaengerCheckbox.scss\";\nimport \"../MdcCheckbox/MdcCheckbox\";\nimport { MdcCheckbox } from \"../MdcCheckbox/MdcCheckbox\";\nimport { Person } from \"../../state/State\";\nimport { ReuseableTemplate } from \"../../utils/ReuseableTemplate\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport class EmpfaengerCheckbox extends HTMLElement {\n    private mdcCheckBox: MdcCheckbox;\n    private label: HTMLLabelElement;\n\n    constructor() {\n        super();\n        this.appendChild(template.get());\n        this.mdcCheckBox = this.querySelector(\"mdc-checkbox\");\n        this.label = this.querySelector(\"label\");\n    }\n\n    set person(value: Person) {\n        this.label.innerText = value.name;\n        const id = `empfaenger-${value.id}`;\n        this.label.setAttribute(\"for\", id);\n        this.mdcCheckBox.checkboxId = id;\n        this.mdcCheckBox.checkboxName = id;\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n}\n\ncustomElements.define(\"empfaenger-checkbox\", EmpfaengerCheckbox);\n","import { Person } from \"../../state/State\";\nimport template from \"./BezahlungEintragenForm.html\";\nimport \"./BezahlungEintragenForm.scss\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { BezahlendePersonRadioButton } from \"../BezahlendePersonRadioButton/BezahlendePersonRadioButton\";\nimport { EmpfaengerCheckbox } from \"../EmpfaengerCheckbox/EmpfaengerCheckbox\";\n\nexport class BezahlungEintragenForm extends HTMLElement {\n    private zahlendePersonRenderer: ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>;\n    private empfaengerRenderer: ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.zahlendePersonRenderer = new ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>(\n            this.querySelector(\"#zahlende-person-auswahl\"),\n            p => p.id,\n            p => new BezahlendePersonRadioButton());\n        this.empfaengerRenderer = new ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>(\n            this.querySelector(\"#empfaenger-auswahl\"),\n            p => p.id,\n            p => new EmpfaengerCheckbox());\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    set personen(value: Person[]) {\n        this.zahlendePersonRenderer.update(value, (element, person) => {\n            element.person = person;\n            element.radioName = \"bezahlende-person\";\n        });\n        this.empfaengerRenderer.update(value, (element, person) => {\n            element.person = person;\n        });\n    }\n}\nexport const BezahlungEintragenFormTagName = \"bezahlung-eintragen-form\";\ncustomElements.define(BezahlungEintragenFormTagName, BezahlungEintragenForm);\n","import template from \"./BezahlungEintragenPage.html\";\nimport { Store } from \"../../state/Store\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { AppBar, AppBarTagName } from \"../AppBar/AppBar\";\nimport \"./BezahlungEintragenPage.scss\";\nimport { BezahlungActionCreator, bezahlungActionCreatorFactory } from \"../../state/actions/BezahlungActionCreator\";\nimport { State } from \"../../state/State\";\nimport { convertLinks } from \"../convertLinks\";\nimport \"../BezahlungEintragenForm/BezahlungEintragenForm\";\nimport { BezahlungEintragenForm, BezahlungEintragenFormTagName } from \"../BezahlungEintragenForm/BezahlungEintragenForm\";\n\nexport class BezahlungEintragenPage extends HTMLElement {\n    private store: Store;\n    private subscription: () => void;\n    private routingActionCreator: RoutingActionCreator;\n    private appBar: AppBar;\n    private bezahlungActionCreator: BezahlungActionCreator;\n    private zurueckLink: HTMLAnchorElement;\n    private bezahlungEintragenForm: BezahlungEintragenForm;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.zurueckLink = this.querySelector(\"#zurueck-zum-kontokorrent\");\n        this.appBar = this.querySelector(AppBarTagName);\n        this.bezahlungEintragenForm = this.querySelector(BezahlungEintragenFormTagName);\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.bezahlungActionCreator = bezahlungActionCreatorFactory(serviceLocator);\n        this.appBar.addServices(serviceLocator);\n    }\n\n    connectedCallback() {\n        this.subscription = this.store.subscribe(\"kontokorrents\", s => this.applyStoreState(s));\n        this.appBar.addEventListener(\"gotokontokorrent\", (e: CustomEvent) => {\n            this.bezahlungActionCreator.bezahlungEintragenKontokorrentChanged(e.detail);\n        });\n        this.bezahlungActionCreator.bezahlungEintragenGeoeffnet();\n        convertLinks([this.zurueckLink], this.routingActionCreator);\n        this.applyStoreState(this.store.state);\n    }\n\n    private applyStoreState(s: State) {\n        this.zurueckLink.href = s.kontokorrents.activeKontokorrentId ? `kontokorrents/${s.kontokorrents.activeKontokorrentId}` : null;\n        if (s.kontokorrents.activeKontokorrentId) {\n            this.bezahlungEintragenForm.personen = s.kontokorrents.kontokorrents[s.kontokorrents.activeKontokorrentId].personen;\n        }\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n    }\n}\n\ncustomElements.define('bezahlung-eintragen-page', BezahlungEintragenPage);\n","import { RoutingActionCreator } from \"../state/actions/RoutingActionCreator\";\n\nexport function convertLinks(elements: Array<HTMLAnchorElement> | NodeListOf<HTMLAnchorElement>, routingActionCreator: RoutingActionCreator) {\n    elements.forEach((e: HTMLAnchorElement) => {\n        e.addEventListener(\"click\", ev => {\n            ev.preventDefault();\n            routingActionCreator.navigate(e.getAttribute(\"href\"));\n        });\n    });\n}","export class Popup extends HTMLElement {\n    private popupShown: boolean = false;\n    constructor() {\n        super();\n        this.keyListener = this.keyListener.bind(this);\n        this.clickListener = this.clickListener.bind(this);\n    }\n\n    connectedCallback() {\n        this.updateStyles();\n    }\n\n    private keyListener(ev: KeyboardEvent) {\n        if (ev.key == \"Escape\") {\n            this.hide();\n        }\n    }\n\n    private clickListener(ev: MouseEvent | TouchEvent) {\n        if (!this.contains(<Element>(event.target))) {\n            this.hide();\n        }\n    }\n\n    public hide() {\n        if (this.popupShown) {\n            document.removeEventListener(\"keydown\", this.keyListener);\n            document.removeEventListener(\"click\", this.clickListener);\n            this.popupShown = false;\n            this.updateStyles();\n        }\n    }\n\n    public show() {\n        if (!this.popupShown) {\n            document.addEventListener(\"keydown\", this.keyListener);\n            document.addEventListener(\"click\", this.clickListener);\n            this.popupShown = true;\n            this.updateStyles();\n        }\n    }\n\n    private updateStyles() {\n        this.style.display = this.popupShown ? \"block\" : \"none\";\n    }\n\n    public toggle() {\n        if (!this.popupShown) {\n            this.show();\n        }\n        else {\n            this.hide();\n\n        }\n    }\n\n    disconnectedCallback() {\n        this.hide();\n    }\n}\ncustomElements.define(\"app-popup\", Popup);\n","export class ArrayToElementRenderer<T, E extends Element, K>{\n    private keyToElement: Map<K, E>;\n    private elementToKey: WeakMap<E, K>;\n    \n    constructor(private listElement: HTMLElement,\n        private keySelector: (x: T) => K,\n        private createElement: (x: T) => E) {\n        this.keyToElement = new Map<K, E>();\n        this.elementToKey = new WeakMap<E, K>();\n    }\n\n    update(list: T[], updateElement: (x: E, data: T) => void) {\n        let keyCache = new Map<T, K>();\n        let getKey = (d: T) => keyCache.get(d) || (() => {\n            let key = this.keySelector(d);\n            keyCache.set(d, key);\n            return key;\n        })();\n        for (let x of Array.from(this.listElement.children)) {\n            let el: E = <E>x;\n            let data = list.find(i => this.elementToKey.get(el) == getKey(i));\n            if (data) {\n                updateElement(<E>el, data);\n            }\n            else {\n                this.listElement.removeChild(el);\n            }\n        }\n        let before: Element = null;\n        let nextKeyToElement = new Map<K, E>();\n        for (let t of list) {\n            let key = getKey(t);\n            let childElement: E = this.keyToElement.get(key);\n            if (!childElement) {\n                childElement = this.createElement(t);\n                updateElement(childElement, t);\n                this.elementToKey.set(childElement, key);\n            }\n            nextKeyToElement.set(key, childElement);\n            if (null == before && childElement != this.listElement.firstElementChild) {\n                this.listElement.prepend(childElement);\n            }\n            else if (null != before && before.nextElementSibling != childElement) {\n                before.insertAdjacentElement(\"afterend\", childElement);\n            }\n            before = childElement;\n        }\n        this.keyToElement = nextKeyToElement;\n    }\n\n}","export class ReuseableTemplate {\n    private instance: HTMLTemplateElement;\n    constructor(private readonly template: string) {\n    }\n\n    get(): DocumentFragment {\n        if (null == this.instance) {\n            this.instance = document.createElement(\"template\");\n            this.instance.innerHTML = this.template;\n        }\n        return document.importNode(this.instance.content, true);\n    }\n}\n"],"sourceRoot":""}