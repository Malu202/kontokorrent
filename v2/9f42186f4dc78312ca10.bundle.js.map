{"version":3,"file":"9f42186f4dc78312ca10.bundle.js","mappings":"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","sources":["webpack://kontokorrent/./src/components/AppBar/AppBar.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectListEntry.ts","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectListEntry.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectList.ts","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectList.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelect.ts","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelect.html","webpack://kontokorrent/./src/components/AppBar/AppBar.ts","webpack://kontokorrent/./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.ts","webpack://kontokorrent/./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.html","webpack://kontokorrent/./src/components/MdcCheckbox/MdcCheckbox.ts","webpack://kontokorrent/./src/components/MdcCheckbox/MdcCheckbox.html","webpack://kontokorrent/./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.ts","webpack://kontokorrent/./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.html","webpack://kontokorrent/./src/utils/toDateInputValue.ts","webpack://kontokorrent/./src/components/BezahlungEintragenForm/BezahlungEintragenForm.ts","webpack://kontokorrent/./src/components/BezahlungEintragenForm/BezahlungEintragenForm.html","webpack://kontokorrent/./src/components/convertLinks.ts","webpack://kontokorrent/./src/components/ui-components/popup/popup.ts","webpack://kontokorrent/./src/lib/WorkerService.ts","webpack://kontokorrent/./src/lib/BezahlungenService.ts","webpack://kontokorrent/./src/state/actions/BezahlungActionCreator.ts","webpack://kontokorrent/./src/utils/ArrayToElementRenderer.ts","webpack://kontokorrent/./src/utils/ReuseableTemplate.ts"],"sourcesContent":["// Module\nvar code = \"<header class=\\\"app-bar\\\"> <kontokorrent-select class=\\\"app-bar__kontokorrent-select\\\"></kontokorrent-select> <nav class=\\\"app-bar__links\\\"> <button id=\\\"logout-button\\\" class=\\\"app-bar__link\\\" title=\\\"Logout\\\"> <span class=\\\"material-icons\\\"> exit_to_app </span> </button> <a href=\\\"info\\\" class=\\\"app-bar__link\\\" title=\\\"Informationen über diese App\\\"> <span class=\\\"material-icons\\\"> info </span> </a> </nav> </header> <app-popup id=\\\"logout-dialog\\\"> <div class=\\\"dialog__backdrop\\\"></div> <div class=\\\"dialog\\\"> <p> Wirklich aus allen Kontokorrents ausloggen? </p> <div class=\\\"dialog__button-pane\\\"> <button id=\\\"abort-logout\\\" class=\\\"button\\\">Abbrechen</button> <button id=\\\"confirm-logout\\\" class=\\\"button\\\">Ausloggen</button> </div> </div> </app-popup>\";\n// Exports\nexport default code;","import template from \"./KontokorrentSelectListEntry.html\";\nimport { KontokorrentState } from \"../../state/State\";\n\n\nexport class KontokorrentSelectListEntry extends HTMLElement {\n    private name: HTMLSpanElement;\n    private link: HTMLAnchorElement;\n    private kontokorrent: KontokorrentState;\n    private rendered = false;\n    private isActive: boolean = false;\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.name = this.querySelector(`[data-ref=\"name\"]`);\n            this.link = this.querySelector(`[data-ref=\"link\"]`);\n            this.updateStyle();\n        }\n        this.clickEvent = this.clickEvent.bind(this);\n        this.link.addEventListener(\"click\", this.clickEvent);\n    }\n\n    private clickEvent(e: MouseEvent): void {\n        e.preventDefault();\n        this.dispatchEvent(new CustomEvent(\"gotokontokorrent\", { detail: this.kontokorrent.id, bubbles: true }));\n    }\n\n    disconnectedCallback() {\n        this.link.removeEventListener(\"click\", this.clickEvent);\n    }\n\n    update(kontokorrent: KontokorrentState, isActive: boolean) {\n        this.kontokorrent = kontokorrent;\n        this.isActive = isActive;\n        this.updateStyle();\n    }\n\n    private updateStyle() {\n        if (this.rendered && this.kontokorrent) {\n            this.name.innerText = this.kontokorrent.name;\n            this.link.href = `kontokorrents/${this.kontokorrent.id}`;\n            this.link.classList.toggle(\"kontokorrent-select-list__entry--active\", this.isActive);\n        }\n    }\n}\nexport const KontokorrentSelectListEntryTagName = \"kontokorrent-select-list-entry\";\ncustomElements.define(KontokorrentSelectListEntryTagName, KontokorrentSelectListEntry);\n","// Module\nvar code = \"<a data-ref=\\\"link\\\" class=\\\"kontokorrent-select-list__entry\\\"> <span data-ref=\\\"name\\\"></span> </a>\";\n// Exports\nexport default code;","import template from \"./KontokorrentSelectList.html\";\nimport \"./KontokorrentSelectList.scss\";\nimport { KontokorrentState } from \"../../state/State\";\nimport { sortByAlphabetically } from \"../../utils/sortBy\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { KontokorrentSelectListEntry } from \"./KontokorrentSelectListEntry\";\n\nexport class KontokorrentSelectList extends HTMLElement {\n    private list: HTMLOListElement;\n    private _kontokorrents: KontokorrentState[];\n    private _activeKontokorrentId: string;\n    private kontokorrentsRenderer: ArrayToElementRenderer<KontokorrentState, HTMLLIElement, string>;\n    private rendered = false;\n\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.list = this.querySelector(`[data-ref=\"list\"]`);\n            this._kontokorrents = [];\n            this.kontokorrentsRenderer = new ArrayToElementRenderer(this.list,\n                (k: KontokorrentState) => k.id,\n                () => {\n                    let li = document.createElement(\"li\");\n                    li.appendChild(new KontokorrentSelectListEntry());\n                    return li;\n                });\n            this.update();\n        }\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    private update() {\n        if (this.rendered) {\n            this.kontokorrentsRenderer.update(this._kontokorrents,\n                (li, kontokorrent) => {\n                    let x: KontokorrentSelectListEntry = <KontokorrentSelectListEntry>li.firstChild;\n                    x.update(kontokorrent, this._activeKontokorrentId == kontokorrent.id);\n                });\n        }\n    }\n\n    set kontokorrents(kontokorrents: KontokorrentState[]) {\n        this._kontokorrents = sortByAlphabetically(kontokorrents, k => k.name);\n        this.update();\n    }\n\n    set activeKontokorrentId(id: string) {\n        this._activeKontokorrentId = id;\n        this.update();\n    }\n}\nexport const KontokorrentSelectListTagName = \"kontokorrent-select-list\";\ncustomElements.define(KontokorrentSelectListTagName, KontokorrentSelectList);\n","// Module\nvar code = \"<ol data-ref=\\\"list\\\" class=\\\"kontokorrent-select-list\\\"> </ol>\";\n// Exports\nexport default code;","import template from \"./KontokorrentSelect.html\";\nimport \"./KontokorrentSelect.scss\";\nimport \"./KontokorrentSelectList\";\nimport { KontokorrentState } from \"../../state/State\";\nimport { KontokorrentSelectListTagName, KontokorrentSelectList } from \"./KontokorrentSelectList\";\nimport { Popup } from \"../ui-components/popup/popup\";\nimport \"../ui-components/popup/popup\";\n\nexport class KontokorrentSelect extends HTMLElement {\n    private kontokorrentName: HTMLHeadingElement;\n    private popup: Popup;\n    private kontokorrentSelectList: KontokorrentSelectList;\n    private addButton: HTMLButtonElement;\n    private activeKontokorrentId: string;\n    private _kontokorrents: KontokorrentState[] = null;\n    private rendered = false;\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.kontokorrentName = this.querySelector(`[data-ref=\"kontokorrent-name\"]`);\n            this.kontokorrentSelectList = this.querySelector(KontokorrentSelectListTagName);\n            this.addButton = this.querySelector(`#add-kontokorrent`);\n            this.popup = this.querySelector(`app-popup`);\n        }\n        this.updateAttributes();\n        this.addEventListener(\"click\", e => {\n            if (!this.popup.contains(<Element>(event.target))) {\n                this.popup.toggle();\n                e.stopPropagation();\n            }\n        });\n        this.addButton.addEventListener(\"click\", e => {\n            this.dispatchEvent(new CustomEvent(\"addkontokorrent\"));\n        });\n        this.kontokorrentSelectList.addEventListener(\"gotokontokorrent\", () => {\n            this.popup.hide();\n        })\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.activeKontokorrentId = this.getAttribute(\"active-kontokorrent-id\");\n        this.kontokorrentSelectList.activeKontokorrentId = this.activeKontokorrentId;\n        this.updatesStyle();\n    }\n\n    static get observedAttributes() {\n        return [\"active-kontokorrent-id\"];\n    }\n\n    set kontokorrents(kontokorrents: KontokorrentState[]) {\n        this.kontokorrentSelectList.kontokorrents = kontokorrents;\n        this._kontokorrents = kontokorrents;\n        this.updatesStyle();\n    }\n\n    private updatesStyle() {\n        if (this.rendered && this._kontokorrents && this._kontokorrents.length) {\n            let activeKontokorrent = this._kontokorrents.find(k => k.id == this.activeKontokorrentId);\n            if (activeKontokorrent) {\n                this.kontokorrentName.innerText = activeKontokorrent.name;\n                this.kontokorrentName.classList.remove(\"kontokorrent-select__name--unselected\");\n            }\n            else {\n                this.kontokorrentName.innerText = \"(Kontokorrent wählen)\";\n                this.kontokorrentName.classList.add(\"kontokorrent-select__name--unselected\");\n            }\n        }\n    }\n\n}\nexport const KontokorrentSelectTagName = \"kontokorrent-select\";\ncustomElements.define(KontokorrentSelectTagName, KontokorrentSelect);\n","// Module\nvar code = \"<div class=\\\"kontokorrent-select-wrapper\\\"> <div class=\\\"kontokorrent-select\\\"> <h1 data-ref=\\\"kontokorrent-name\\\" class=\\\"kontokorrent-select__name\\\">Kontokorrent</h1> <button class=\\\"kontokorrent-select__choose\\\" title=\\\"anderen Kontokorrent wählen\\\"> <span class=\\\"material-icons\\\"> arrow_drop_down </span> </button> </div> <app-popup class=\\\"kontokorrent-select__popup\\\"> <kontokorrent-select-list></kontokorrent-select-list> <div class=\\\"kontokorrent-select__buttons\\\"> <button id=\\\"add-kontokorrent\\\" class=\\\"button\\\">weiteren hinzufügen</button> </div> </app-popup> </div>\";\n// Exports\nexport default code;","import template from \"./AppBar.html\";\nimport \"./AppBar.scss\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { convertLinks } from \"../convertLinks\";\nimport \"../KontokorrentSelect/KontokorrentSelect\";\nimport { KontokorrentSelectTagName, KontokorrentSelect } from \"../KontokorrentSelect/KontokorrentSelect\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { AccountActionCreator, accountActionCreatorFactory } from \"../../state/actions/AccountActionCreator\";\nimport { Store } from \"../../state/Store\";\nimport { State } from \"../../state/State\";\nimport { Popup } from \"../ui-components/popup/popup\";\n\nexport class AppBar extends HTMLElement {\n    private kontokorrentSelect: KontokorrentSelect;\n    private store: Store;\n    private routingActionCreator: RoutingActionCreator;\n    private accountActionCreator: AccountActionCreator;\n    private logoutDialog: Popup;\n    private subscription: () => void;\n    private rendered: boolean = false;\n\n\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.kontokorrentSelect = this.querySelector(KontokorrentSelectTagName);\n            this.logoutDialog = this.querySelector(\"#logout-dialog\");\n            if (this.store) {\n                this.applyStoreState(this.store.state);\n            }\n        }\n        this.querySelector(\"#logout-button\").addEventListener(\"click\", (e: MouseEvent) => {\n            this.logoutDialog.toggle();\n            e.stopPropagation();\n        });\n        this.querySelector(\"#confirm-logout\").addEventListener(\"click\", async () => {\n            await this.accountActionCreator.logout();\n        });\n        this.querySelector(\"#abort-logout\").addEventListener(\"click\", () => {\n            this.logoutDialog.hide();\n        });\n        this.querySelectorAll(\"a\").forEach((e: HTMLAnchorElement) => {\n            e.addEventListener(\"click\", ev => {\n                ev.preventDefault();\n                this.routingActionCreator.navigate(e.getAttribute(\"href\"));\n            });\n        });\n\n        this.kontokorrentSelect.addEventListener(\"addkontokorrent\", () => {\n            this.routingActionCreator.navigateLogin();\n        });\n    }\n\n    private applyStoreState(state: State): void {\n        if (this.rendered) {\n            this.kontokorrentSelect.kontokorrents = Object.values(state.kontokorrents.kontokorrents);\n            this.kontokorrentSelect.setAttribute(\"active-kontokorrent-id\", state.kontokorrents.activeKontokorrentId);\n        }\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.accountActionCreator = accountActionCreatorFactory(serviceLocator);\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.applyStoreState(this.store.state);\n    }\n\n    disconnectedCallback() {\n        if (this.subscription) {\n            this.subscription();\n            this.subscription = null;\n        }\n\n    }\n}\nexport const AppBarTagName = \"app-bar\";\ncustomElements.define(AppBarTagName, AppBar);\n","import { Person } from \"../../state/State\";\nimport { ReuseableTemplate, TemplateInstance } from \"../../utils/ReuseableTemplate\";\nimport template from \"./BezahlendePersonRadioButton.html\";\nimport \"./BezahlendePersonRadioButton.scss\";\n\nconst reuseableTemplate = new ReuseableTemplate(template);\n\nexport class BezahlendePersonRadioButton extends HTMLElement {\n    private input: HTMLInputElement;\n    private personLabel: HTMLLabelElement;\n    private label: HTMLLabelElement;\n    private templateInstance: TemplateInstance;\n    private _radioName: string;\n    private personName: string;\n    private personId: string;\n\n    constructor() {\n        super();\n        this.templateInstance = reuseableTemplate.getInstance();\n    }\n\n    connectedCallback() {\n        if (this.templateInstance.apply(this)) {\n            this.input = this.querySelector(\"input\");\n            this.personLabel = this.querySelector(`[data-ref=\"label\"]`);\n            this.label = this.querySelector(\"label\");\n            this.update();\n        }\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    set radioName(v: string) {\n        this._radioName = v;\n    }\n\n    set person(value: Person) {\n        this.personName = value.name;\n        this.personId = value.id;\n        this.update();\n    }\n\n    private update() {\n        if (this.templateInstance.isApplied()) {\n            this.input.value = this.personId;\n            this.personLabel.innerText = this.personName;\n            this.input.id = this.personId;\n            this.label.setAttribute(\"for\", this.personId);\n            this.input.name = this._radioName;\n        }\n    }\n}\n\ncustomElements.define(\"bezahlende-person-radio-button\", BezahlendePersonRadioButton);\n","// Module\nvar code = \"<input type=\\\"radio\\\" class=\\\"bezahlende-person-radio__input\\\"/> <label class=\\\"bezahlende-person-radio\\\"> <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\"> <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/> <path d=\\\"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z\\\"/> </svg> <span data-ref=\\\"label\\\"></span> </label>\";\n// Exports\nexport default code;","import { isThursday } from \"date-fns\";\nimport { ReuseableTemplate, TemplateInstance } from \"../../utils/ReuseableTemplate\";\nimport templateContent from \"./MdcCheckbox.html\";\nimport \"./MdcCheckbox.scss\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport const CheckboxIdAttribute = \"checkbox-id\";\nexport const CheckboxNameAttribute = \"checkbox-name\";\n\nexport class MdcCheckbox extends HTMLElement {\n    private nativeControl: HTMLInputElement;\n    private templateInstance: TemplateInstance;\n\n    constructor() {\n        super();\n        this.templateInstance = template.getInstance();\n    }\n\n    connectedCallback() {\n        if (this.templateInstance.apply(this)) {\n            this.nativeControl = this.querySelector(\".mdc-checkbox__native-control\");\n            this.updateAttributes();\n        }\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        if (this.nativeControl) {\n            this.nativeControl.id = this.getAttribute(CheckboxIdAttribute);\n            this.nativeControl.name = this.getAttribute(CheckboxNameAttribute);\n        }\n    }\n\n    static get observedAttributes() {\n        return [CheckboxIdAttribute, CheckboxNameAttribute];\n    }\n}\n\ncustomElements.define(\"mdc-checkbox\", MdcCheckbox);\n","// Module\nvar code = \"<div class=\\\"mdc-touch-target-wrapper\\\"> <div class=\\\"mdc-checkbox mdc-checkbox--touch\\\"> <input type=\\\"checkbox\\\" class=\\\"mdc-checkbox__native-control\\\"/> <div class=\\\"mdc-checkbox__background\\\"> <svg class=\\\"mdc-checkbox__checkmark\\\" viewBox=\\\"0 0 24 24\\\"> <path class=\\\"mdc-checkbox__checkmark-path\\\" fill=\\\"none\\\" d=\\\"M1.73,12.91 8.1,19.28 22.79,4.59\\\"/> </svg> <div class=\\\"mdc-checkbox__mixedmark\\\"></div> </div> <div class=\\\"mdc-checkbox__ripple\\\"></div> </div> </div>\";\n// Exports\nexport default code;","import templateContent from \"./EmpfaengerCheckbox.html\";\nimport \"./EmpfaengerCheckbox.scss\";\nimport \"../MdcCheckbox/MdcCheckbox\";\nimport { MdcCheckbox } from \"../MdcCheckbox/MdcCheckbox\";\nimport { Person } from \"../../state/State\";\nimport { ReuseableTemplate, TemplateInstance } from \"../../utils/ReuseableTemplate\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport class EmpfaengerCheckbox extends HTMLElement {\n    private mdcCheckBox: MdcCheckbox;\n    private label: HTMLLabelElement;\n    private templateInstance: TemplateInstance;\n\n    private checkboxId:string;\n    private personName:string;\n\n    constructor() {\n        super();\n        this.templateInstance = template.getInstance();\n    }\n\n    set person(value: Person) {\n        this.personName = value.name;\n        this.checkboxId = `empfaenger-${value.id}`;\n        this.update();\n    }\n\n    connectedCallback() {\n        if (this.templateInstance.apply(this)) {\n            this.mdcCheckBox = this.querySelector(\"mdc-checkbox\");\n            this.label = this.querySelector(\"label\");\n            this.update();\n        }\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    private update() {\n        if (this.templateInstance.isApplied()) {\n            this.label.innerText = this.personName;\n            this.label.setAttribute(\"for\", this.checkboxId);\n            this.mdcCheckBox.setAttribute(\"checkbox-id\", this.checkboxId);\n            this.mdcCheckBox.setAttribute(\"checkbox-name\", this.checkboxId);\n        }\n    }\n}\n\ncustomElements.define(\"empfaenger-checkbox\", EmpfaengerCheckbox);\n","// Module\nvar code = \"<mdc-checkbox></mdc-checkbox> <label></label>\";\n// Exports\nexport default code;","export function toDateInputValue(d: Date) {\n    var local = new Date(d);\n    local.setMinutes(d.getMinutes() - d.getTimezoneOffset());\n    return local.toJSON().slice(0, 10);\n}","import { Bezahlung, Person } from \"../../state/State\";\nimport template from \"./BezahlungEintragenForm.html\";\nimport \"./BezahlungEintragenForm.scss\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { BezahlendePersonRadioButton } from \"../BezahlendePersonRadioButton/BezahlendePersonRadioButton\";\nimport { EmpfaengerCheckbox } from \"../EmpfaengerCheckbox/EmpfaengerCheckbox\";\nimport { toDateInputValue } from \"../../utils/toDateInputValue\";\nimport { endOfDay, isSameDay } from \"date-fns\";\nimport { MdcCheckbox } from \"../MdcCheckbox/MdcCheckbox\";\n\nexport class BezahlungEintragenForm extends HTMLElement {\n    private zahlendePersonRenderer: ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>;\n    private empfaengerRenderer: ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>;\n    private datum: HTMLInputElement;\n    private betreff: HTMLInputElement;\n    private betrag: HTMLInputElement;\n    private zahlendePersonMissingError: HTMLSpanElement;\n    private betreffMissingError: HTMLDivElement;\n    private betragMissingError: HTMLDivElement;\n    private empfaengerMissingError: HTMLDivElement;\n    private validationRequested: boolean = false;\n    private form: HTMLFormElement;\n    private formInputListener: () => void;\n    private betragInvalidError: HTMLDivElement;\n    private empfaengerAuswahl: HTMLDivElement;\n    private _personen: Person[] = [];\n    private alleCheck: MdcCheckbox;\n    private alleClickListener: () => void;\n    private betreffInputListener: () => void;\n    private beschreibungVorschlaegeRenderer: ArrayToElementRenderer<string, HTMLElement, string>;\n    private vorschlaege: string[] = [];\n    private betreffKeyDownListener: (e: KeyboardEvent) => void;\n    private rendered = false;\n    private bezahlung: Bezahlung;\n    private bezahlungSet = false;\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.empfaengerAuswahl = this.querySelector(\"#empfaenger-auswahl\");\n            this.zahlendePersonRenderer = new ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>(\n                this.querySelector(\"#zahlende-person-auswahl\"),\n                p => p.id,\n                p => new BezahlendePersonRadioButton());\n            this.empfaengerRenderer = new ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>(\n                this.empfaengerAuswahl,\n                p => p.id,\n                p => new EmpfaengerCheckbox());\n            this.beschreibungVorschlaegeRenderer = new ArrayToElementRenderer<string, HTMLElement, string>(\n                this.querySelector(\"#beschreibung-vorschlaege\"),\n                p => p,\n                p => {\n                    let el = document.createElement(\"button\");\n                    el.className = \"bezahlung-eintragen-form__vorschlag\";\n                    el.innerText = p;\n                    el.type = \"button\";\n                    el.addEventListener(\"click\", e => {\n                        this.completeBetreff(p);\n                    });\n                    return el;\n                });\n            this.datum = this.querySelector(\"#datum\");\n            this.datum.value = toDateInputValue(new Date());\n            this.betrag = this.querySelector(\"#betrag\");\n            this.betreff = this.querySelector(\"#betreff\");\n            this.zahlendePersonMissingError = this.querySelector(\"#zahlende-person-missing-error\");\n            this.betreffMissingError = this.querySelector(\"#betreff-missing-error\");\n            this.betragMissingError = this.querySelector(\"#betrag-missing-error\");\n            this.betragInvalidError = this.querySelector(\"#betrag-invalid-error\");\n            this.empfaengerMissingError = this.querySelector(\"#empfaenger-missing-error\");\n            this.form = this.querySelector(\"#bezahlung-eintragen-form\");\n            this.alleCheck = this.querySelector(\"#alle-check\");\n            this.update();\n        }\n\n        this.formInputListener = () => this.onFormInput();\n        this.form.addEventListener(\"input\", this.formInputListener);\n        this.betrag.focus();\n        this.alleClickListener = () => this.alleClick();\n        this.alleCheck.addEventListener(\"input\", this.alleClickListener);\n        this.betreffInputListener = () => {\n            this.dispatchEvent(new CustomEvent(\"betreffChanged\", { detail: this.betreff.value }));\n        };\n        this.betreff.addEventListener(\"input\", this.betreffInputListener);\n        this.betreffKeyDownListener = (e: KeyboardEvent) => this.betreffKeyDown(e);\n        this.betreff.addEventListener(\"keydown\", this.betreffKeyDownListener)\n    }\n\n    private betreffKeyDown(e: KeyboardEvent) {\n        if (e.code == \"Enter\" && this.vorschlaege?.length > 0) {\n            this.completeBetreff(this.vorschlaege[0]);\n        }\n    }\n\n    private completeBetreff(p: string) {\n        this.betreff.value = p;\n        this.betreffInputListener();\n        this.betreff.focus();\n        this.validateWhileManipulating();\n    }\n\n    private alleClick() {\n        let checked = (this.form[\"alle\"] as HTMLInputElement).checked;\n        for (let c of this.empfaengerCheckboxen) {\n            c.checked = checked;\n        }\n    }\n\n    disconnectedCallback() {\n        this.form.removeEventListener(\"input\", this.formInputListener);\n        this.alleCheck.removeEventListener(\"input\", this.alleClickListener);\n        this.betreff.removeEventListener(\"input\", this.betreffInputListener);\n        this.betreff.removeEventListener(\"keydown\", this.betreffKeyDownListener)\n    }\n\n    private onFormInput() {\n        this.validateWhileManipulating();\n    }\n\n    validate() {\n        if (!this.rendered) {\n            return false;\n        }\n        this.validationRequested = true;\n        let betrag = this.parseBetrag();\n        let betragValid = betrag.valid;\n        this.betragInvalidError.hidden = betrag.valid || betrag.empty;\n        let valid = this.validateWhileManipulating() && betragValid;\n        return valid;\n    }\n\n    private getDatum() {\n        let d = this.datum.valueAsDate;\n        if (!d || isSameDay(d, new Date())) {\n            return new Date();\n        }\n        return endOfDay(d);\n    }\n\n    getData() {\n        if (!this.rendered) {\n            return null;\n        }\n        return {\n            betrag: this.parseBetrag().value,\n            betreff: this.betreff.value,\n            empfaenger: this.selectedEmpfaenger,\n            bezahlendePerson: this.bezahlendePerson.value,\n            datum: this.getDatum()\n        }\n    }\n\n    setData(b: Bezahlung) {\n        this.bezahlung = b;\n        this.update();\n    }\n\n    private parseBetrag() {\n        this.betrag.setAttribute(\"type\", \"text\");\n        let betrag = this.betrag.value;\n        this.betrag.setAttribute(\"type\", \"number\");\n        if (betrag == \"\") {\n            return { valid: false, empty: true };\n        }\n        betrag = betrag.replace(\",\", \".\");\n        betrag = betrag.replace(/ /g, \"\");\n        let betragFloat = parseFloat(betrag);\n        if (isNaN(betragFloat)) {\n            return { valid: false, empty: false };\n        }\n        return { valid: true, value: betragFloat };\n    }\n\n    private get bezahlendePerson(): HTMLInputElement {\n        return this.form[\"bezahlende-person\"];\n    }\n\n    private get empfaengerCheckboxen(): HTMLInputElement[] {\n        return this._personen.map(p => (this.form[\"empfaenger-\" + p.id] as HTMLInputElement));\n    }\n\n    private get selectedEmpfaenger(): string[] {\n        return this._personen.filter(p => (this.form[\"empfaenger-\" + p.id] as HTMLInputElement).checked)\n            .map(p => p.id);\n    }\n\n    private validateWhileManipulating() {\n        let validity = {\n            betragValid: !!this.betrag.value,\n            betreffValid: !!this.betreff.value,\n            zahlendePersonValid: !!this.bezahlendePerson.value,\n            empfaengerValid: this.selectedEmpfaenger.length > 0\n        };\n        this.betragMissingError.hidden = !this.validationRequested || validity.betragValid;\n        this.betreffMissingError.hidden = !this.validationRequested || validity.betreffValid;\n        this.zahlendePersonMissingError.hidden = !this.validationRequested || validity.zahlendePersonValid;\n        this.empfaengerMissingError.hidden = !this.validationRequested || validity.empfaengerValid;\n        return !Object.values(validity).some(v => v == false);\n    }\n\n    set personen(value: Person[]) {\n        this._personen = value;\n        this.update();\n    }\n\n    set beschreibungVorschlaege(value: string[]) {\n        this.vorschlaege = value;\n        this.update();\n    }\n\n    update() {\n        if (!this.rendered) {\n            return;\n        }\n        if (!this.bezahlungSet && this.bezahlung) {\n            this.bezahlungSet = true;\n            this.betreff.value = this.bezahlung.beschreibung;\n            this.bezahlendePerson.value = this.bezahlung.bezahlendePersonId;\n            // this can fail if personen not yet loaded\n            for (let p of this._personen) {\n                let e = this.form[\"empfaenger-\" + p.id] as HTMLInputElement;\n                e.checked = !!this.bezahlung.empfaengerIds.find(i => i == p.id);\n            }\n            let alleInput = this.form[\"alle\"] as HTMLInputElement;\n            alleInput.checked = !this.empfaengerCheckboxen.some(e => !e.checked);\n            this.datum.value = toDateInputValue(this.bezahlung.zeitpunkt);\n            this.betrag.value = `${this.bezahlung.wert}`;\n        }\n        this.zahlendePersonRenderer.update(this._personen, (element, person) => {\n            element.person = person;\n            element.radioName = \"bezahlende-person\";\n        });\n        this.empfaengerRenderer.update(this._personen, (element, person) => {\n            element.person = person;\n        });\n        this.beschreibungVorschlaegeRenderer.update(this.vorschlaege, () => { });\n    }\n}\nexport const BezahlungEintragenFormTagName = \"bezahlung-eintragen-form\";\ncustomElements.define(BezahlungEintragenFormTagName, BezahlungEintragenForm);\n","// Module\nvar code = \"<form novalidate class=\\\"bezahlung-eintragen-form\\\" id=\\\"bezahlung-eintragen-form\\\"> <div id=\\\"betreff-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Es muss ein <label class=\\\"alert__field-label\\\" for=\\\"betreff\\\">Betreff</label> angegeben werden.</div> <div id=\\\"betrag-invalid-error\\\" class=\\\"alert alert--error\\\" hidden> Der <label class=\\\"alert__field-label\\\" for=\\\"betrag\\\">Betrag</label> ist ungültig.</div> <div id=\\\"betrag-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Es muss ein <label class=\\\"alert__field-label\\\" for=\\\"betrag\\\">Betrag</label> angegeben werden.</div> <span id=\\\"zahlende-person-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Wähle eine Person aus die bezahlt. </span> <div id=\\\"empfaenger-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Wähle Personen aus für die bezahlt wird. </div> <label for=\\\"betrag\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Betrag</label> <input name=\\\"betrag\\\" id=\\\"betrag\\\" type=\\\"number\\\" novalidate step=\\\"any\\\"> <label for=\\\"zahlende-person\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Diese Person zahlt</label> <div id=\\\"zahlende-person-auswahl\\\"></div> <div class=\\\"bezahlung-eintragen-form__empfaenger-row\\\"> <label for=\\\"empfaenger\\\" class=\\\"bezahlung-eintragen-form__label\\\">für diese Personen</label> <mdc-checkbox checkbox-id=\\\"alle\\\" checkbox-name=\\\"alle\\\" id=\\\"alle-check\\\"></mdc-checkbox> <label for=\\\"alle\\\">alle</label> </div> <div id=\\\"empfaenger-auswahl\\\"></div> <label for=\\\"betreff\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Betreff</label> <div id=\\\"beschreibung-vorschlaege\\\" class=\\\"bezahlung-eintragen-form__vorschlaege\\\"></div> <input name=\\\"betreff\\\" id=\\\"betreff\\\" required=\\\"\\\" autocomplete=\\\"off\\\" type=\\\"text\\\"> <label for=\\\"datum\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Datum</label> <input name=\\\"datum\\\" id=\\\"datum\\\" required=\\\"\\\" type=\\\"date\\\"> </form>\";\n// Exports\nexport default code;","import { RoutingActionCreator } from \"../state/actions/RoutingActionCreator\";\n\nexport function convertLinks(elements: Array<HTMLAnchorElement> | NodeListOf<HTMLAnchorElement>, routingActionCreator: RoutingActionCreator) {\n    elements.forEach((e: HTMLAnchorElement) => {\n        e.addEventListener(\"click\", ev => {\n            ev.preventDefault();\n            routingActionCreator.navigate(e.getAttribute(\"href\"));\n        });\n    });\n}","export class Popup extends HTMLElement {\n    private popupShown: boolean = false;\n    constructor() {\n        super();\n        this.keyListener = this.keyListener.bind(this);\n        this.clickListener = this.clickListener.bind(this);\n    }\n\n    connectedCallback() {\n        this.updateStyles();\n    }\n\n    private keyListener(ev: KeyboardEvent) {\n        if (ev.key == \"Escape\") {\n            this.hide();\n        }\n    }\n\n    private clickListener(ev: MouseEvent | TouchEvent) {\n        if (!this.contains(<Element>(event.target))) {\n            this.hide();\n        }\n    }\n\n    public hide() {\n        if (this.popupShown) {\n            document.removeEventListener(\"keydown\", this.keyListener);\n            document.removeEventListener(\"click\", this.clickListener);\n            this.popupShown = false;\n            this.updateStyles();\n        }\n    }\n\n    public show() {\n        if (!this.popupShown) {\n            document.addEventListener(\"keydown\", this.keyListener);\n            document.addEventListener(\"click\", this.clickListener);\n            this.popupShown = true;\n            this.updateStyles();\n        }\n    }\n\n    private updateStyles() {\n        this.style.display = this.popupShown ? \"block\" : \"none\";\n    }\n\n    public toggle() {\n        if (!this.popupShown) {\n            this.show();\n        }\n        else {\n            this.hide();\n\n        }\n    }\n\n    disconnectedCallback() {\n        this.hide();\n    }\n}\ncustomElements.define(\"app-popup\", Popup);\n","import { ServiceLocator } from \"../ServiceLocator\";\nimport { Store } from \"../state/Store\";\nimport { GetBeschreibungVorschlaegeMessage, KontokorrentOeffnenMessage, ResetBeschreibungenCacheMessage, WorkerMessageType } from \"../worker/KontokorrentWorker\";\n\nexport class WorkerService {\n    constructor(private store: Store) {\n\n    }\n    private worker: Worker;\n\n    private getWorker() {\n        if (!this.worker) {\n            this.worker = new Worker(new URL(\"../worker/KontokorrentWorker\", import.meta.url));\n            this.worker.addEventListener(\"message\", ev => {\n                if (ev.data?.type == \"statedispatch\") {\n                    let msg = ev.data.msg;\n                    this.store.dispatch(msg);\n                }\n            });\n        }\n        return this.worker;\n    }\n\n    getBeschreibungVorschlaege(kontokorrentId: string, eingabe: string) {\n        let msg: GetBeschreibungVorschlaegeMessage = {\n            kontokorrentId: kontokorrentId,\n            type: WorkerMessageType.GetBeschreibungVorschlaege,\n            eingabe: eingabe\n        };\n        this.getWorker().postMessage(msg);\n    }\n\n    resetBeschreibungenCache() {\n        let msg: ResetBeschreibungenCacheMessage = {\n            type: WorkerMessageType.ResetBeschreibungenCache,\n        };\n        this.getWorker().postMessage(msg);\n    }\n\n    kontokorrentOeffnen(oeffentlicherName: string) {\n        let msg: KontokorrentOeffnenMessage = {\n            type: WorkerMessageType.KontokorrentOeffnen,\n            oeffentlicherName: oeffentlicherName\n        };\n        this.getWorker().postMessage(msg);\n    }\n}\n\nexport function workerServiceFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"WorkerService\",\n        serviceLocator => new WorkerService(serviceLocator.store));\n}","import { ApiClient } from \"../api/ApiClient\";\nimport { BezahlungBearbeitenRequest } from \"../api/BezahlungBearbeitenRequest\";\nimport { NeueBezahlungRequest } from \"../api/NeueBezahlungRequest\";\nimport { ServiceLocator } from \"../ServiceLocator\";\nimport { KontokorrentDatabase } from \"./KontokorrentDatabase\";\n\nexport class BezahlungenService {\n\n    constructor(private apiClient: ApiClient,\n        private db: KontokorrentDatabase) {\n    }\n\n    async bezahlungAnlegen(kontokorrentId: string, request: NeueBezahlungRequest) {\n        let aktion = await this.apiClient.neueBezahlung(kontokorrentId, request);\n        this.db.addAktionen(kontokorrentId, [aktion]);\n        return aktion;\n    }\n\n    async bezahlungBearbeiten(kontokorrentId: string, request: BezahlungBearbeitenRequest) {\n        let aktion = await this.apiClient.bezahlungBearbeiten(kontokorrentId, request);\n        this.db.addAktionen(kontokorrentId, [aktion]);\n        return aktion;\n    }\n\n    async bezahlungLoeschen(kontokorrentId: string, bezahlungId: string) {\n        let aktion = await this.apiClient.bezahlungLoeschen(kontokorrentId, bezahlungId);\n        this.db.addAktionen(kontokorrentId, [aktion]);\n        return aktion;\n    }\n}\n\nexport function bezahlungenServiceFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"NeueBezahlungService\",\n        serviceLocator => new BezahlungenService(serviceLocator.apiClient,\n            serviceLocator.db));\n}","import { Store } from \"../Store\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { Action } from \"../lib/Action\";\nimport { ActionNames } from \"./ActionNames\";\nimport { NeueBezahlungBackgroundSyncTag } from \"../../sw.constants\";\nimport { BezahlungenService, bezahlungenServiceFactory } from \"../../lib/BezahlungenService\";\nimport { NeueBezahlungRequest } from \"../../api/NeueBezahlungRequest\";\nimport { v4 as uuid } from \"uuid\";\nimport { NeueBezahlungDbModel } from \"../../lib/NeueBezahlungDbModel\";\nimport { Bezahlung, BezahlungStatus } from \"../State\";\nimport { WorkerService, workerServiceFactory } from \"../../lib/WorkerService\";\nimport { BearbeitungsStatus } from \"../../lib/BearbeitungsStatus\";\nimport { BezahlungBearbeitenRequest } from \"../../api/BezahlungBearbeitenRequest\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"./RoutingActionCreator\";\n\nexport class BezahlungEintragenKontokorrentGeandert implements Action {\n    readonly type = ActionNames.BezahlungEintragenKontokorrentGeandert;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport class BezahlungGeoeffnet implements Action {\n    readonly type = ActionNames.BezahlungGeoeffnet;\n    constructor(public kontokorrentId: string, public bezahlungId: string,\n        public bearbeitungsStatus: BearbeitungsStatus, public bezahlung: Bezahlung | null) {\n    }\n}\n\nexport class NeueBezahlungAnlegen implements Action {\n    readonly type = ActionNames.NeueBezahlungAnlegen;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport class NeueBezahlungAngelegt implements Action {\n    readonly type = ActionNames.NeueBezahlungAngelegt;\n    constructor(public kontokorrentId: string, public bezahlung: Bezahlung) {\n    }\n}\n\nexport class NeueBezahlungAnlegenFailed implements Action {\n    readonly type = ActionNames.NeueBezahlungAnlegenFailed;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport class BezahlungBearbeiten implements Action {\n    readonly type = ActionNames.BezahlungBearbeiten;\n    constructor(public kontokorrentId: string, public bezahlungId: string) {\n    }\n}\n\nexport class BezahlungBearbeitet implements Action {\n    readonly type = ActionNames.BezahlungBearbeitet;\n    constructor(public kontokorrentId: string, public bearbeiteteBezahlungId: string, public bezahlung: Bezahlung) {\n    }\n}\n\nexport class BezahlungBearbeitenFailed implements Action {\n    readonly type = ActionNames.BezahlungBearbeitenFailed;\n    constructor(public kontokorrentId: string, public bezahlungId: string) {\n    }\n}\n\nexport class BezahlungLoeschen implements Action {\n    readonly type = ActionNames.BezahlungLoeschen;\n    constructor(public kontokorrentId: string, public bezahlungId: string) {\n    }\n}\n\nexport class BezahlungGeloescht implements Action {\n    readonly type = ActionNames.BezahlungGeloescht;\n    constructor(public kontokorrentId: string, public geloeschteBezahlungId: string) {\n    }\n}\n\nexport class BezahlungLoeschenFailed implements Action {\n    readonly type = ActionNames.BezahlungLoeschenFailed;\n    constructor(public kontokorrentId: string, public bezahlungId: string) {\n    }\n}\n\nexport type BezahlungActions = BezahlungEintragenKontokorrentGeandert\n    | NeueBezahlungAnlegenFailed\n    | NeueBezahlungAnlegen\n    | NeueBezahlungAngelegt\n    | BezahlungGeoeffnet\n    | BezahlungBearbeiten\n    | BezahlungBearbeitet\n    | BezahlungBearbeitenFailed\n    | BezahlungLoeschen\n    | BezahlungGeloescht\n    | BezahlungLoeschenFailed;\n\nexport interface BezahlungModel {\n    betreff: string, betrag: number, datum: Date, bezahlendePerson: string, empfaenger: string[]\n}\n\nexport class BezahlungActionCreator {\n    constructor(private store: Store,\n        private db: KontokorrentDatabase,\n        private bezahlungenService: BezahlungenService,\n        private workerService: WorkerService,\n        private routingActionCreator: RoutingActionCreator) {\n    }\n\n\n    async bezahlungGeoeffnet(oeffentlicherName: string, bezahlungId: string) {\n        let kk = await this.db.getPerOeffentlichName(oeffentlicherName);\n        if (!kk) {\n            this.routingActionCreator.navigateHome();\n        } else {\n            let b = await this.db.getBearbeitungsStatus(kk.id, bezahlungId);\n            let bezahlung: Bezahlung = null;\n            if (b.aktion) {\n                let bezahlungAktion = b.aktion;\n                bezahlung = {\n                    beschreibung: bezahlungAktion.bezahlung.beschreibung,\n                    bezahlendePersonId: bezahlungAktion.bezahlung.bezahlendePersonId,\n                    empfaengerIds: bezahlungAktion.bezahlung.empfaengerIds,\n                    id: bezahlungAktion.bezahlung.id,\n                    status: BezahlungStatus.Gespeichert,\n                    wert: bezahlungAktion.bezahlung.wert,\n                    zeitpunkt: bezahlungAktion.bezahlung.zeitpunkt\n                };\n            }\n            this.store.dispatch(new BezahlungGeoeffnet(kk.id, bezahlungId, b.status, bezahlung));\n            this.workerService.getBeschreibungVorschlaege(kk.id, bezahlung ? bezahlung.beschreibung : null);\n        }\n    }\n\n    async bezahlungEintragenGeoeffnet() {\n        let id = this.store.state.kontokorrents.activeKontokorrentId || await this.db.getZuletztGesehenerKontokorrentId();\n        this.store.dispatch(new BezahlungEintragenKontokorrentGeandert(id));\n        this.workerService.getBeschreibungVorschlaege(id, null);\n    }\n\n    async bezahlungEintragenKontokorrentChanged(id: string) {\n        this.store.dispatch(new BezahlungEintragenKontokorrentGeandert(id));\n        await this.db.setZuletztGesehenerKontokorrentId(id);\n        this.workerService.getBeschreibungVorschlaege(id, null);\n    }\n\n    async bezahlungHinzufuegen(kontokorrentId: string,\n        bezahlung: BezahlungModel) {\n        let id = uuid();\n        if (!(await this.bezahlungPerSyncHinzufuegen(kontokorrentId, id, bezahlung))) {\n            await this.bezahlungDirektHinzufuegen(kontokorrentId, bezahlung, id);\n        }\n        this.workerService.resetBeschreibungenCache();\n    }\n\n    private async bezahlungPerSyncHinzufuegen(kontokorrentId: string,\n        id: string,\n        bezahlung: BezahlungModel) {\n        if (\"serviceWorker\" in navigator && \"SyncManager\" in window) {\n            let reg = await navigator.serviceWorker.ready;\n            try {\n                let zwischengespeichert: NeueBezahlungDbModel = {\n                    beschreibung: bezahlung.betreff,\n                    bezahlendePersonId: bezahlung.bezahlendePerson,\n                    empfaengerIds: bezahlung.empfaenger,\n                    id: id,\n                    wert: bezahlung.betrag,\n                    zeitpunkt: bezahlung.datum,\n                    kontokorrentId: kontokorrentId\n                }\n                await this.db.bezahlungZwischenspeichern(zwischengespeichert);\n                await reg.sync.register(NeueBezahlungBackgroundSyncTag);\n                this.store.dispatch(new NeueBezahlungAngelegt(kontokorrentId, {\n                    beschreibung: zwischengespeichert.beschreibung,\n                    bezahlendePersonId: zwischengespeichert.bezahlendePersonId,\n                    empfaengerIds: zwischengespeichert.empfaengerIds,\n                    id: zwischengespeichert.id,\n                    wert: zwischengespeichert.wert,\n                    zeitpunkt: zwischengespeichert.zeitpunkt,\n                    status: BezahlungStatus.Zwischengespeichert\n                }));\n            } catch (err) {\n                console.warn(\"background sync not allowed\");\n                await this.db.zwischengespeicherteBezahlungErledigt(id);\n                return false;\n            }\n        } else {\n            console.log(\"background sync not supported\");\n            return false;\n        }\n        return true;\n    }\n\n    async bezahlungDirektHinzufuegen(kontokorrentId: string,\n        bezahlung: BezahlungModel, id: string = null) {\n        let request: NeueBezahlungRequest = {\n            beschreibung: bezahlung.betreff,\n            bezahlendePersonId: bezahlung.bezahlendePerson,\n            empfaengerIds: bezahlung.empfaenger,\n            id: id || uuid(),\n            wert: bezahlung.betrag,\n            zeitpunkt: bezahlung.datum\n        };\n        this.store.dispatch(new NeueBezahlungAnlegen(kontokorrentId));\n        try {\n            let aktion = await this.bezahlungenService.bezahlungAnlegen(kontokorrentId, request);\n            this.store.dispatch(new NeueBezahlungAngelegt(kontokorrentId, {\n                beschreibung: aktion.bezahlung.beschreibung,\n                bezahlendePersonId: aktion.bezahlung.bezahlendePersonId,\n                empfaengerIds: aktion.bezahlung.empfaengerIds,\n                id: aktion.bezahlung.id,\n                wert: aktion.bezahlung.wert,\n                zeitpunkt: aktion.bezahlung.zeitpunkt,\n                status: BezahlungStatus.Gespeichert\n            }));\n        }\n        catch (err) {\n            console.error(err);\n            this.store.dispatch(new NeueBezahlungAnlegenFailed(kontokorrentId));\n            throw err;\n        }\n    }\n\n    async bezahlungBearbeiten(kontokorrentId: string,\n        bezahlungId: string,\n        bezahlung: BezahlungModel) {\n        let request: BezahlungBearbeitenRequest = {\n            beschreibung: bezahlung.betreff,\n            bezahlendePersonId: bezahlung.bezahlendePerson,\n            empfaengerIds: bezahlung.empfaenger,\n            id: bezahlungId,\n            wert: bezahlung.betrag,\n            zeitpunkt: bezahlung.datum\n        };\n        this.store.dispatch(new BezahlungBearbeiten(kontokorrentId, bezahlungId));\n        try {\n            let aktion = await this.bezahlungenService.bezahlungBearbeiten(kontokorrentId, request);\n            this.store.dispatch(new BezahlungBearbeitet(kontokorrentId, aktion.bearbeiteteBezahlungId, {\n                beschreibung: aktion.bezahlung.beschreibung,\n                bezahlendePersonId: aktion.bezahlung.bezahlendePersonId,\n                empfaengerIds: aktion.bezahlung.empfaengerIds,\n                id: aktion.bezahlung.id,\n                wert: aktion.bezahlung.wert,\n                zeitpunkt: aktion.bezahlung.zeitpunkt,\n                status: BezahlungStatus.Gespeichert\n            }));\n        }\n        catch (err) {\n            console.error(err);\n            this.store.dispatch(new BezahlungBearbeitenFailed(kontokorrentId, bezahlungId));\n            throw err;\n        }\n        this.workerService.resetBeschreibungenCache();\n    }\n\n    async bezahlungLoeschen(kontokorrentId: string,\n        bezahlungId: string) {\n        this.store.dispatch(new BezahlungLoeschen(kontokorrentId, bezahlungId));\n        try {\n            let aktion = await this.bezahlungenService.bezahlungLoeschen(kontokorrentId, bezahlungId);\n            this.store.dispatch(new BezahlungGeloescht(kontokorrentId, aktion.geloeschteBezahlungId));\n        }\n        catch (err) {\n            console.error(err);\n            this.store.dispatch(new BezahlungLoeschenFailed(kontokorrentId, bezahlungId));\n            throw err;\n        }\n    }\n\n    getBeschreibungVorschlaege(kontokorrentId: string, eingabe: string) {\n        this.workerService.getBeschreibungVorschlaege(kontokorrentId, eingabe);\n    }\n}\n\nexport function bezahlungActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"BezahlungActionCreator\",\n        serviceLocator => new BezahlungActionCreator(serviceLocator.store,\n            serviceLocator.db,\n            bezahlungenServiceFactory(serviceLocator),\n            workerServiceFactory(serviceLocator),\n            routingActionCreatorFactory(serviceLocator)));\n}\n","export class ArrayToElementRenderer<T, E extends Element, K>{\n    private keyToElement: Map<K, E>;\n    private elementToKey: WeakMap<E, K>;\n    \n    constructor(private listElement: HTMLElement,\n        private keySelector: (x: T) => K,\n        private createElement: (x: T) => E) {\n        this.keyToElement = new Map<K, E>();\n        this.elementToKey = new WeakMap<E, K>();\n    }\n\n    update(list: T[], updateElement: (x: E, data: T) => void) {\n        let keyCache = new Map<T, K>();\n        let getKey = (d: T) => keyCache.get(d) || (() => {\n            let key = this.keySelector(d);\n            keyCache.set(d, key);\n            return key;\n        })();\n        for (let x of Array.from(this.listElement.children)) {\n            let el: E = <E>x;\n            let data = list.find(i => this.elementToKey.get(el) == getKey(i));\n            if (data) {\n                updateElement(<E>el, data);\n            }\n            else {\n                this.listElement.removeChild(el);\n            }\n        }\n        let before: Element = null;\n        let nextKeyToElement = new Map<K, E>();\n        for (let t of list) {\n            let key = getKey(t);\n            let childElement: E = this.keyToElement.get(key);\n            if (!childElement) {\n                childElement = this.createElement(t);\n                updateElement(childElement, t);\n                this.elementToKey.set(childElement, key);\n            }\n            nextKeyToElement.set(key, childElement);\n            if (null == before && childElement != this.listElement.firstElementChild) {\n                this.listElement.prepend(childElement);\n            }\n            else if (null != before && before.nextElementSibling != childElement) {\n                before.insertAdjacentElement(\"afterend\", childElement);\n            }\n            before = childElement;\n        }\n        this.keyToElement = nextKeyToElement;\n    }\n\n}","export interface TemplateInstance {\n    apply(e: HTMLElement): boolean;\n    isApplied(): boolean;\n}\n\nexport class ReuseableTemplate {\n    private instance: HTMLTemplateElement;\n    constructor(private readonly template: string) {\n    }\n\n    private _get(): DocumentFragment {\n        if (null == this.instance) {\n            this.instance = document.createElement(\"template\");\n            this.instance.innerHTML = this.template;\n        }\n        return document.importNode(this.instance.content, true);\n    }\n\n    getInstance(): TemplateInstance {\n        class TemplateInstance {\n            private applied = false;\n\n            constructor(private r: ReuseableTemplate) {\n            }\n\n            apply(e: HTMLElement): boolean {\n                if (this.applied) {\n                    return false;\n                }\n                e.appendChild(this.r._get());\n                this.applied = true;\n                return true;\n            }\n            isApplied() {\n                return this.applied;\n            }\n        }\n        return new TemplateInstance(this);\n    }\n}\n\n\n"],"names":["KontokorrentSelectListEntry","HTMLElement","constructor","super","rendered","isActive","connectedCallback","this","innerHTML","name","querySelector","link","updateStyle","clickEvent","bind","addEventListener","e","preventDefault","dispatchEvent","CustomEvent","detail","kontokorrent","id","bubbles","disconnectedCallback","removeEventListener","update","innerText","href","classList","toggle","customElements","define","KontokorrentSelectList","list","_kontokorrents","kontokorrentsRenderer","ArrayToElementRenderer","k","li","document","createElement","appendChild","firstChild","_activeKontokorrentId","kontokorrents","sortBy","KontokorrentSelectListTagName","KontokorrentSelect","kontokorrentName","kontokorrentSelectList","addButton","popup","updateAttributes","contains","event","target","stopPropagation","hide","attributeChangedCallback","activeKontokorrentId","getAttribute","updatesStyle","length","activeKontokorrent","find","remove","add","KontokorrentSelectTagName","AppBar","kontokorrentSelect","logoutDialog","store","applyStoreState","state","async","accountActionCreator","logout","querySelectorAll","forEach","ev","routingActionCreator","navigate","navigateLogin","Object","values","setAttribute","addServices","serviceLocator","subscription","subscribe","AppBarTagName","reuseableTemplate","templateInstance","getInstance","apply","input","personLabel","label","v","_radioName","value","personName","personId","isApplied","template","ReuseableTemplate","CheckboxIdAttribute","CheckboxNameAttribute","nativeControl","checkboxId","mdcCheckBox","toDateInputValue","d","local","Date","setMinutes","getMinutes","getTimezoneOffset","toJSON","slice","BezahlungEintragenForm","validationRequested","_personen","vorschlaege","bezahlungSet","empfaengerAuswahl","zahlendePersonRenderer","p","BezahlendePersonRadioButton","empfaengerRenderer","beschreibungVorschlaegeRenderer","el","className","type","completeBetreff","datum","betrag","betreff","zahlendePersonMissingError","betreffMissingError","betragMissingError","betragInvalidError","empfaengerMissingError","form","alleCheck","formInputListener","onFormInput","focus","alleClickListener","alleClick","betreffInputListener","betreffKeyDownListener","betreffKeyDown","code","validateWhileManipulating","checked","c","empfaengerCheckboxen","validate","parseBetrag","betragValid","valid","hidden","empty","getDatum","valueAsDate","isSameDay","endOfDay","getData","empfaenger","selectedEmpfaenger","bezahlendePerson","setData","b","bezahlung","replace","betragFloat","parseFloat","isNaN","map","filter","validity","betreffValid","zahlendePersonValid","empfaengerValid","some","beschreibung","bezahlendePersonId","empfaengerIds","i","zeitpunkt","wert","element","person","radioName","BezahlungEintragenFormTagName","convertLinks","elements","Popup","popupShown","keyListener","clickListener","updateStyles","key","show","style","display","WorkerService","getWorker","worker","Worker","URL","data","msg","dispatch","getBeschreibungVorschlaege","kontokorrentId","eingabe","postMessage","resetBeschreibungenCache","kontokorrentOeffnen","oeffentlicherName","workerServiceFactory","get","BezahlungenService","apiClient","db","request","aktion","neueBezahlung","addAktionen","bezahlungBearbeiten","bezahlungId","bezahlungLoeschen","BezahlungEintragenKontokorrentGeandert","BezahlungGeoeffnet","bearbeitungsStatus","NeueBezahlungAnlegen","NeueBezahlungAngelegt","NeueBezahlungAnlegenFailed","BezahlungBearbeiten","BezahlungBearbeitet","bearbeiteteBezahlungId","BezahlungBearbeitenFailed","BezahlungLoeschen","BezahlungGeloescht","geloeschteBezahlungId","BezahlungLoeschenFailed","BezahlungActionCreator","bezahlungenService","workerService","kk","getPerOeffentlichName","getBearbeitungsStatus","bezahlungAktion","status","navigateHome","getZuletztGesehenerKontokorrentId","setZuletztGesehenerKontokorrentId","bezahlungPerSyncHinzufuegen","bezahlungDirektHinzufuegen","navigator","window","console","log","reg","serviceWorker","ready","zwischengespeichert","bezahlungZwischenspeichern","sync","register","err","warn","zwischengespeicherteBezahlungErledigt","bezahlungAnlegen","error","bezahlungActionCreatorFactory","bezahlungenServiceFactory","listElement","keySelector","keyToElement","Map","elementToKey","WeakMap","updateElement","keyCache","getKey","set","x","Array","from","children","removeChild","before","nextKeyToElement","t","childElement","firstElementChild","prepend","nextElementSibling","insertAdjacentElement","_get","instance","importNode","content","r","applied"],"sourceRoot":""}