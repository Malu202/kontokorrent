{"version":3,"sources":["webpack://kontokorrent/webpack/runtime/startup chunk dependencies","webpack://kontokorrent/./node_modules/core-js/internals/object-define-property.js","webpack://kontokorrent/./node_modules/core-js/internals/object-get-own-property-names.js","webpack://kontokorrent/../src/comlink.ts","webpack://kontokorrent/./src/utils/groupBy.ts","webpack://kontokorrent/./src/lib/BalanceCalculator.ts","webpack://kontokorrent/./src/lib/filterBezahlungen.ts","webpack://kontokorrent/./src/lib/KontokorrentDatabase.ts","webpack://kontokorrent/./src/lib/KontokorrentSynchronizer.ts","webpack://kontokorrent/./src/worker/KontokorrentWorker.ts","webpack://kontokorrent/./src/utils/sortBy.ts","webpack://kontokorrent/webpack/bootstrap","webpack://kontokorrent/webpack/runtime/compat get default export","webpack://kontokorrent/webpack/runtime/define property getters","webpack://kontokorrent/webpack/runtime/ensure chunk","webpack://kontokorrent/webpack/runtime/get javascript chunk filename","webpack://kontokorrent/webpack/runtime/get mini-css chunk filename","webpack://kontokorrent/webpack/runtime/global","webpack://kontokorrent/webpack/runtime/harmony module decorator","webpack://kontokorrent/webpack/runtime/hasOwnProperty shorthand","webpack://kontokorrent/webpack/runtime/make namespace object","webpack://kontokorrent/webpack/runtime/publicPath","webpack://kontokorrent/webpack/runtime/importScripts chunk loading","webpack://kontokorrent/webpack/startup"],"names":["next","DESCRIPTORS","require","IE8_DOM_DEFINE","anObject","toPrimitive","nativeDefineProperty","Object","defineProperty","exports","f","O","P","Attributes","error","TypeError","value","internalObjectKeys","hiddenKeys","concat","getOwnPropertyNames","proxyMarker","Symbol","createEndpoint","releaseProxy","throwMarker","isObject","val","transferHandlers","Map","canHandle","obj","port1","port2","MessageChannel","expose","deserialize","port","start","createProxy","target","serialized","Error","isError","message","name","stack","assign","ep","self","addEventListener","callback","ev","data","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","set","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","endpoint","constructor","isMessagePort","close","throwIfProxyReleased","isReleased","isProxyReleased","Proxy","_target","requestResponseMessage","p","toString","length","r","bind","_thisArg","rawArgumentList","last","processArguments","processed","v","arr","Array","prototype","WeakMap","handler","serializedValue","serialize","get","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","groupBy","list","key","forEach","item","k","collection","push","GeteilteZahlung","wert","empfaengerAnzahl","isEmpfaenger","BalanceCalculator","db","summe","nenner","andere","c","n","kontokorrentId","gespeicherte","aktionen","bezahlungenMap","ordered","sort","a","b","laufendeNummer","bearbeiteteBezahlungId","geloeschteBezahlungId","bezahlung","values","filterBezahlungen","this","getAktionen","bezahlungen","getZwischengespeicherteBezahlungenForKontokorrent","kk","getKontokorrent","geteilteZahlungen","personen","e","empfaengerIds","bezahlendePersonId","balance","gruppen","alleNenner","from","keys","gesamtNenner","gesamtSumme","g","erweitern","KontokorrentsStore","AppStateStore","AktionenStore","NeueBezahlungenStore","KontokorrentSynchronizer","i","sorted","cb","oldVersion","newVersion","createObjectStore","keyPath","createIndex","put","zuletztGesehenerKontokorrentId","accesstokens","accountinfo","objectStoreNames","contains","deleteObjectStore","withInitialized","async","getAll","keySelector","toLowerCase","localeCompare","mapped","unwrapped","reject","tx","transaction","onerror","err","console","oncomplete","request","objectStore","add","log","preventDefault","stopPropagation","appState","kks","getKontokorrents","kontokorrents","existing","filter","some","d","delete","newIds","ex","find","combined","oeffentlicherName","getFromIndex","getAllFromIndex","clear","tokenType","t","lastTimeStamp","durability","store","timestamp","done","accountInfo","m","calculateBalance","getLaufendeNummer","__webpack_module_cache__","__webpack_require__","moduleId","module","loaded","__webpack_modules__","x","getter","__esModule","definition","o","enumerable","chunkId","all","promises","u","miniCssF","globalThis","Function","window","hmd","create","children","hasOwnProperty","call","toStringTag","installedChunks","24","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","chunkIds","moreModules","runtime","pop"],"mappings":"UAAIA,E,kBCAJ,IAAIC,EAAcC,EAAQ,MACtBC,EAAiBD,EAAQ,MACzBE,EAAWF,EAAQ,MACnBG,EAAcH,EAAQ,KAEtBI,EAAuBC,OAAOC,eAIlCC,EAAQC,EAAIT,EAAcK,EAAuB,SAAwBK,EAAGC,EAAGC,GAI7E,GAHAT,EAASO,GACTC,EAAIP,EAAYO,GAAG,GACnBR,EAASS,GACLV,EAAgB,IAClB,OAAOG,EAAqBK,EAAGC,EAAGC,GAClC,MAAOC,IACT,GAAI,QAASD,GAAc,QAASA,EAAY,MAAME,UAAU,2BAEhE,MADI,UAAWF,IAAYF,EAAEC,GAAKC,EAAWG,OACtCL,I,eClBT,IAAIM,EAAqBf,EAAQ,MAG7BgB,EAFchB,EAAQ,MAEGiB,OAAO,SAAU,aAI9CV,EAAQC,EAAIH,OAAOa,qBAAuB,SAA6BT,GACrE,OAAOM,EAAmBN,EAAGO,K,kCCgBlBG,EAAcC,OAAO,iBACrBC,EAAiBD,OAAO,oBACxBE,EAAeF,OAAO,wBAE7BG,EAAcH,OAAO,kBAuJrBI,EAAYC,GACA,iBAARA,GAA4B,OAARA,GAAgC,mBAARA,EA+FzCC,EAAmB,IAAIC,IAGlC,CACA,CAAC,QAjEgE,CACjEC,UAAYH,GACVD,EAASC,IAASA,EAAoBN,GACxC,UAAUU,GACR,MAAM,MAAEC,EAAF,MAASC,GAAU,IAAIC,eAE7B,OADAC,EAAOJ,EAAKC,GACL,CAACC,EAAO,CAACA,KAElBG,YAAYC,IACVA,EAAKC,QA6IAC,EA5IOF,EA4IY,GADUG,cAnFpC,CAAC,QAtCC,CACFV,UAAYd,GACVU,EAASV,IAAUS,KAAeT,EACpC,WAAU,MAAEA,IACV,IAAIyB,EAaJ,OAXEA,EADEzB,aAAiB0B,MACN,CACXC,SAAS,EACT3B,MAAO,CACL4B,QAAS5B,EAAM4B,QACfC,KAAM7B,EAAM6B,KACZC,MAAO9B,EAAM8B,QAIJ,CAAEH,SAAS,EAAO3B,SAE1B,CAACyB,EAAY,KAEtB,YAAYA,GACV,GAAIA,EAAWE,QACb,MAAMpC,OAAOwC,OACX,IAAIL,MAAMD,EAAWzB,MAAM4B,SAC3BH,EAAWzB,OAGf,MAAMyB,EAAWzB,W,SAeLmB,EAAOJ,EAAUiB,EAAeC,MAC9CD,EAAGE,iBAAiB,WAAW,SAASC,EAASC,GAC/C,IAAKA,IAAOA,EAAGC,KACb,OAEF,MAAM,GAAEC,EAAF,KAAMC,EAAN,KAAYC,GAAM,eACtBA,KAAM,IACFJ,EAAGC,MAEHI,GAAgBL,EAAGC,KAAKI,cAAgB,IAAIC,IAAIC,GACtD,IAAIC,EACJ,IACE,MAAMC,EAASL,EAAKM,MAAM,GAAI,GAAGC,QAAO,CAAChC,EAAKiC,IAASjC,EAAIiC,IAAOjC,GAC5DkC,EAAWT,EAAKO,QAAO,CAAChC,EAAKiC,IAASjC,EAAIiC,IAAOjC,GACvD,OAAQwB,GACN,OAEIK,EAAcK,EAEhB,MACF,OAEIJ,EAAOL,EAAKM,OAAO,GAAG,IAAMH,EAAcP,EAAGC,KAAKrC,OAClD4C,GAAc,EAEhB,MACF,OAEIA,EAAcK,EAASC,MAAML,EAAQJ,GAEvC,MACF,OAGIG,E,SA8Ja7B,GACvB,OAAOxB,OAAOwC,OAAOhB,EAAK,CAAE,CAACV,IAAc,IA/JnB8C,CADA,IAAIF,KAAYR,IAGhC,MACF,OACE,CACE,MAAM,MAAEzB,EAAF,MAASC,GAAU,IAAIC,eAC7BC,EAAOJ,EAAKE,GACZ2B,E,SAkJa7B,EAAUqC,GAEjC,OADAC,EAAcC,IAAIvC,EAAKqC,GAChBrC,EApJiBwC,CAASvC,EAAO,CAACA,IAEjC,MACF,OAEI4B,OAAcY,GAIpB,MAAOxD,GACP4C,EAAc,CAAE5C,QAAO,CAACS,GAAc,GAExCgD,QAAQC,QAAQd,GACbe,OAAO3D,IACC,CAAEA,QAAO,CAACS,GAAc,MAEhCmD,MAAMhB,IACL,MAAOiB,EAAWC,GAAiBC,EAAYnB,GAC/CZ,EAAGgC,YAAW,+BAAMH,GAAS,CAAEvB,OAAMwB,GACxB,IAATvB,IAEFP,EAAGiC,oBAAoB,UAAW9B,GAClC+B,EAAclC,UAIlBA,EAAGV,OACLU,EAAGV,QAQP,SAAS4C,EAAcC,IAJvB,SAAuBA,GACrB,MAAqC,gBAA9BA,EAASC,YAAYvC,MAIxBwC,CAAcF,IAAWA,EAASG,QAOxC,SAASC,EAAqBC,GAC5B,GAAIA,EACF,MAAM,IAAI9C,MAAM,8CAIpB,SAASH,EACPS,EACAQ,EAAqC,GACrChB,EAAiB,cAEjB,IAAIiD,GAAkB,EACtB,MAAMtB,EAAQ,IAAIuB,MAAMlD,EAAQ,CAC9B,IAAImD,EAAS3B,GAEX,GADAuB,EAAqBE,GACjBzB,IAASxC,EACX,MAAO,IACEoE,EAAuB5C,EAAI,CAChCO,KAAM,EACNC,KAAMA,EAAKE,KAAKmC,GAAMA,EAAEC,eACvBlB,MAAK,KACNM,EAAclC,GACdyC,GAAkB,KAIxB,GAAa,SAATzB,EAAiB,CACnB,GAAoB,IAAhBR,EAAKuC,OACP,MAAO,CAAEnB,KAAM,IAAMT,GAEvB,MAAM6B,EAAIJ,EAAuB5C,EAAI,CACnCO,KAAM,EACNC,KAAMA,EAAKE,KAAKmC,GAAMA,EAAEC,eACvBlB,KAAKjB,GACR,OAAOqC,EAAEpB,KAAKqB,KAAKD,GAErB,OAAOzD,EAAYS,EAAI,IAAIQ,EAAMQ,KAEnC,IAAI2B,EAAS3B,EAAMC,GACjBsB,EAAqBE,GAGrB,MAAOzE,EAAO8D,GAAiBC,EAAYd,GAC3C,OAAO2B,EACL5C,EACA,CACEO,KAAM,EACNC,KAAM,IAAIA,EAAMQ,GAAMN,KAAKmC,GAAMA,EAAEC,aACnC9E,SAEF8D,GACAF,KAAKjB,IAET,MAAMgC,EAASO,EAAUC,GACvBZ,EAAqBE,GACrB,MAAMW,EAAO5C,EAAKA,EAAKuC,OAAS,GAChC,GAAKK,IAAiB7E,EACpB,OAAOqE,EAAuB5C,EAAI,CAChCO,KAAM,IACLqB,KAAKjB,GAGV,GAAa,SAATyC,EACF,OAAO7D,EAAYS,EAAIQ,EAAKM,MAAM,GAAI,IAExC,MAAOL,EAAcqB,GAAiBuB,EAAiBF,GACvD,OAAOP,EACL5C,EACA,CACEO,KAAM,EACNC,KAAMA,EAAKE,KAAKmC,GAAMA,EAAEC,aACxBrC,gBAEFqB,GACAF,KAAKjB,IAET,UAAUgC,EAASQ,GACjBZ,EAAqBE,GACrB,MAAOhC,EAAcqB,GAAiBuB,EAAiBF,GACvD,OAAOP,EACL5C,EACA,CACEO,KAAM,EACNC,KAAMA,EAAKE,KAAKmC,GAAMA,EAAEC,aACxBrC,gBAEFqB,GACAF,KAAKjB,MAGX,OAAOQ,EAOT,SAASkC,EAAiB5C,GACxB,MAAM6C,EAAY7C,EAAaC,IAAIqB,GACnC,MAAO,CAACuB,EAAU5C,KAAK6C,GAAMA,EAAE,MANdC,EAM0BF,EAAU5C,KAAK6C,GAAMA,EAAE,KAL3DE,MAAMC,UAAUvF,OAAO+C,MAAM,GAAIsC,KAD1C,IAAmBA,EASnB,MAAMnC,EAAgB,IAAIsC,QAuB1B,SAAS5B,EAAY/D,GACnB,IAAK,MAAO6B,EAAM+D,KAAYhF,EAC5B,GAAIgF,EAAQ9E,UAAUd,GAAQ,CAC5B,MAAO6F,EAAiB/B,GAAiB8B,EAAQE,UAAU9F,GAC3D,MAAO,CACL,CACEuC,KAAM,EACNV,OACA7B,MAAO6F,GAET/B,GAIN,MAAO,CACL,CACEvB,KAAM,EACNvC,SAEFqD,EAAc0C,IAAI/F,IAAU,IAIhC,SAAS2C,EAAc3C,GACrB,OAAQA,EAAMuC,MACZ,OACE,OAAO3B,EAAiBmF,IAAI/F,EAAM6B,MAAOT,YAAYpB,EAAMA,OAC7D,OACE,OAAOA,EAAMA,OAInB,SAAS4E,EACP5C,EACAgE,EACA5C,GAEA,OAAO,IAAIK,SAASC,IAClB,MAAMpB,EAgBD,IAAImD,MAAM,GACdQ,KAAK,GACLvD,KAAI,IAAMwD,KAAKC,MAAMD,KAAKE,SAAWC,OAAOC,kBAAkBxB,SAAS,MACvEyB,KAAK,KAlBNvE,EAAGE,iBAAiB,WAAW,SAASsE,EAAEpE,GACnCA,EAAGC,MAASD,EAAGC,KAAKC,IAAMF,EAAGC,KAAKC,KAAOA,IAG9CN,EAAGiC,oBAAoB,UAAWuC,GAClC9C,EAAQtB,EAAGC,UAETL,EAAGV,OACLU,EAAGV,QAELU,EAAGgC,YAAW,eAAG1B,MAAO0D,GAAO5C,MC7hB7B,SAAUqD,EAA8BC,EAAWC,GACrD,MAAMjE,EAAM,IAAI7B,IAUhB,OATA6F,EAAKE,SAASC,IACV,MAAMC,EAAID,EAAKF,GACTI,EAAarE,EAAIqD,IAAIe,GACtBC,EAGDA,EAAWC,KAAKH,GAFhBnE,EAAIY,IAAIwD,EAAG,CAACD,OAKbnE,ECNX,MAAMuE,EACF,YAAmBC,EACRC,EACAC,GAFQ,KAAAF,OACR,KAAAC,mBACA,KAAAC,gBAOT,MAAOC,EACT,YAAoBC,GAAA,KAAAA,KAGpB,UAAUC,EAAeC,EAAgBC,GACrC,IAAIC,EAAI,EACR,IAAK,IAAIC,KAAKF,EACNE,GAAKH,IACLE,GAAKC,GAGb,OAAOJ,EAAQG,EAGnB,uBAAuBE,GACnB,IACIC,EC5BN,SAA4BC,GAC9B,IAAIC,EAAqD,GACrDC,EAAUF,EAASG,MAAK,CAACC,EAAEC,IAAKD,EAAEE,eAAiBD,EAAEC,iBACzD,IAAK,IAAID,KAAKH,EACNG,EAAEE,+BACKN,EAAeI,EAAEE,wBAExBF,EAAEG,6BACKP,EAAeI,EAAEG,uBAGxBP,EAAeI,EAAEI,UAAUjG,IAAM6F,EAAEI,UAI3C,OADkBhJ,OAAOiJ,OAAOT,GDcIU,OADXC,KAAKpB,GAAGqB,YAAYf,IAGrCgB,EAAc,UAD4BF,KAAKpB,GAAGuB,kDAAkDjB,MACzDC,GAC3CiB,QAAWJ,KAAKpB,GAAGyB,gBAAgBnB,GACnCoB,EAAyD,GAC7D,IAAK,IAAInE,KAAKiE,EAAGG,SACbD,EAAkBnE,EAAEvC,IAAM,GAE9B,IAAK,IAAI6F,KAAKS,EACV,IAAK,IAAIM,KAAKf,EAAEgB,cACZH,EAAkBE,GAAGlC,KAAK,IAAIC,EAAgBkB,EAAEjB,KAAMiB,EAAEgB,cAAcpE,QAAQ,IAC9EiE,EAAkBb,EAAEiB,oBAAoBpC,KAAK,IAAIC,EAAgBkB,EAAEjB,KAAMiB,EAAEgB,cAAcpE,QAAQ,IAGzG,IAAIsE,EAA+B,GACnC,IAAK,IAAIxE,KAAKiE,EAAGG,SAAU,CACvB,IAAIK,EAAU7C,EAAQuC,EAAkBnE,EAAEvC,IAAK,oBAC3CiH,EAAa9D,MAAM+D,KAAKF,EAAQG,QAChCC,EAAejE,MAAM+D,KAAKF,EAAQG,QAAQ1G,QAAO,CAAC8B,EAAG6C,IAAM7C,EAAI6C,GAAG,GACtE,GAAIgC,EAAe,OAAQ,CACvB,IAAIC,EAAc,EAClB,IAAK,IAAIC,KAAKN,EAAQG,OAAQ,CAC1B,IACIlC,EADY+B,EAAQvD,IAAI6D,GACN7G,QAAO,CAAC8B,EAAG6C,IAAM7C,GAAK6C,EAAEN,aAAeM,EAAER,MAAQQ,EAAER,OAAO,GAChFyC,GAAejB,KAAKmB,UAAUtC,EAAOqC,EAAGL,GAE5CF,EAAQxE,EAAEvC,IAAMqH,EAAcD,MAE7B,CACD,IAAIC,EAAc,EAClB,IAAK,IAAIC,KAAKN,EAAQG,OAGlBE,GAFgBL,EAAQvD,IAAI6D,GACN7G,QAAO,CAAC8B,EAAG6C,IAAM7C,GAAK6C,EAAEN,aAAeM,EAAER,MAAQQ,EAAER,OAAO,GACzD0C,EAE3BP,EAAQxE,EAAEvC,IAAMqH,GAGxB,OAAON,G,cE5Df,MAAMS,EAAqB,qBACrBC,EAAgB,gBAChBC,EAAgB,gBAChBC,EAAuB,uBCVvB,MAAOC,EACT,YAAoB5C,GAAA,KAAAA,KAGpB,wBAAwBM,GACpB,IAEIuC,EADAC,SADiB1B,KAAKpB,GAAGqB,YAAYf,IACnBlF,KAAI6C,GAAKA,EAAE6C,iBAAgBH,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IAEpE,IAAKgC,EAAI,EAAGA,EAAIC,EAAOrF,OAAS,GACxBqF,EAAOD,GAAK,IAAMC,EAAOD,EAAI,GADFA,KAKnC,OAAOC,EAAOD,ICVtB,MAAM7C,EAAK,IF8CL,MAEM,sBAAyB+C,GAC7B,IAAI/C,QAAW,QAA6B,kBAAmB,EAAG,CAC9D,QAAQA,EAAIgD,EAAoBC,GACxBD,EAAa,GACDhD,EAAGkD,kBAAkBV,EAAoB,CAAEW,QAAS,OAC1DC,YAAY,oBAAqB,qBAEvCJ,EAAa,GACDhD,EAAGkD,kBAAkBT,EAAe,CAAEU,QAAS,OACrDE,IAZkC,CAAErI,GAAI,EAAGsI,+BAAgC,KAAMC,aAAc,GAAIC,YAAa,OActHR,EAAa,GACDhD,EAAGkD,kBAAkBR,EAAe,CAAES,QAAS,CAAC,iBAAkB,oBACxEC,YAAY,iBAAkB,kBAEpCJ,EAAa,IACThD,EAAGyD,iBAAiBC,SAASf,IAC7B3C,EAAG2D,kBAAkBhB,GAEb3C,EAAGkD,kBAAkBP,EAAsB,CAAEQ,QAAS,OAC5DC,YAAY,iBAAkB,sBAIhD,IACI,aAAaL,EAAG/C,GADpB,QAIIA,EAAGhD,SAIX,yBACI,aAAaoE,KAAKwC,iBAAgBC,UAC9B,OGvF+CpE,QHuFZO,EAAG8D,OAAOtB,GGvFmBuB,EHuFGvE,GAAKA,EAAEjF,KGtF3EkF,EAAWkB,MAAK,CAACC,EAAGC,IAAMkD,EAAYnD,GAAGoD,cAAcC,cAAcF,EAAYlD,GAAGmD,iBADzF,IAAqDvE,EAAiBsE,KH2FxE,kBAAkB/I,EAAYwF,GAC1B,IAAKA,EAAS/C,OACV,OAEJ,IAAIyG,EAAS1D,EACRpF,KAAI6C,GACI,+BACEA,GAAC,CACJqC,eAAgBtF,MAI5B,aAAaoG,KAAKwC,iBAAgB5D,IAC9B,MAAMmE,GAAY,QAAqBnE,GACvC,OAAO,IAAI7D,SAAQ,CAACC,EAASgI,KACzB,MAAMC,EAAKF,EAAUG,YAAY5B,EAAe,aAChD2B,EAAGE,QAAUC,IACTC,QAAQjM,MAAM,qBAAsBgM,EAAKH,EAAG7L,OAC5C4L,EAAOC,EAAG7L,QAEd6L,EAAGK,WAAa,KACZtI,KAEJ,IAAK,IAAIwE,KAAKsD,EAAQ,CAClB,IAAIS,EAAUN,EAAGO,YAAYlC,GAAemC,IAAIjE,GAChD+D,EAAQJ,QAAUzJ,IACY,mBAAtB6J,EAAQnM,MAAM+B,MACdkK,QAAQK,IAAI,UAAUlE,EAAEE,mCAAmC9F,yBAA2BF,EAAI6J,EAAQnM,OAClGsC,EAAGiK,iBACHjK,EAAGkK,mBAEHP,QAAQjM,MAAM,UAAUoI,EAAEE,mCAAmC9F,qCAAuCF,EAAI6J,EAAQnM,eAQxI,0CACI,aAAa4I,KAAKwC,iBAAgBC,UAC9B,IAAIoB,QAAiBjF,EAAGvB,IAAIgE,EAAe,GAC3C,GAAIwC,EAAS3B,+BACT,OAAO2B,EAAS3B,+BAEf,CACD,IAAI4B,cAAmB9D,KAAK+D,mBAC5B,OAAID,EAAIzH,OACGyH,EAAI,GAAGlK,GAEX,SAKnB,wCAAwCA,GACpC,aAAaoG,KAAKwC,iBAAgBC,UAC9B,IAAIoB,QAAiBjF,EAAGvB,IAAIgE,EAAe,GAC3CwC,EAAS3B,+BAAiCtI,QACpCgF,EAAGqD,IAAIZ,EAAewC,MAIpC,uBAAuBG,GAInB,aAAahE,KAAKwC,iBAAgBC,UAC9B,IAAIwB,QAAyCrF,EAAG8D,OAAOtB,GACvD,IAAK,IAAIvE,KAAKoH,EAASC,QAAO1D,IAAMwD,EAAcG,MAAKC,GAAK5D,EAAE5G,KAAOwK,EAAExK,aAC7DgF,EAAGyF,OAAOjD,EAAoBvE,EAAEjD,IAE1C,IAAI0K,EAAmB,GACvB,IAAK,IAAIzH,KAAKmH,EAAe,CACzB,IAAIO,EAAKN,EAASO,MAAKJ,GAAKA,EAAExK,IAAMiD,EAAEjD,KACjC2K,GACDD,EAAOhG,KAAKzB,EAAEjD,IAElB,IAAI6K,EAAW,OAAH,wBACLF,GAAE,CAAEpL,KAAM0D,EAAE1D,KAAMoH,SAAU1D,EAAE0D,SAAU3G,GAAIiD,EAAEjD,GACjD8K,kBAAmB7H,EAAE6H,0BAEnB9F,EAAGqD,IAAIb,EAAoBqD,GAErC,OAAOH,KAIf,sBAAsBlE,GAClB,aAAaJ,KAAKwC,iBAAgBC,gBACnB7D,EAAGvB,IAAI+D,EAAoBhB,EAAGxG,WAC/BgF,EAAG6E,IAAIrC,EAAoBhB,MAK7C,sBAAsBxG,GAClB,aAAaoG,KAAKwC,iBAAgBC,eACI7D,EAAGvB,IAAI+D,EAAoBxH,KAIrE,4BAA4BA,GACxB,aAAaoG,KAAKwC,iBAAgBC,eACI7D,EAAG+F,aAAavD,EAAoB,oBAAqBxH,KAInG,kBAAkBA,GACd,aAAaoG,KAAKwC,iBAAgBC,eACjB7D,EAAGgG,gBAAgBtD,EAAe,iBAAkB1H,KAIzE,cACI,aAAaoG,KAAKwC,iBAAgBC,gBACxB7D,EAAGiG,MAAMvD,SACT1C,EAAGiG,MAAMzD,SACTxC,EAAGqD,IAAIZ,EA/JmC,CAAEzH,GAAI,EAAGsI,+BAAgC,KAAMC,aAAc,GAAIC,YAAa,UAmKtI,qBAAqB0C,GACjB,aAAa9E,KAAKwC,iBAAgBC,iBACT7D,EAAGvB,IAAIgE,EAAe,IAC1Bc,cAAgB,IAAIqC,MAAKO,GAAKA,EAAElL,OAASiL,MAIlE,+BAA+BA,EAAmCxN,EAAe0N,GAC7E,aAAahF,KAAKwC,iBAAgBC,UAC9B,MAAMQ,EAAKrE,EAAGsE,YAAY7B,EAAe,YAAa,CAAE4D,WAAY,WACpE,IAAIpB,QAAiBZ,EAAGiC,MAAM7H,IAAI,GAC7BwG,EAAS1B,eACV0B,EAAS1B,aAAe,IAE5B,IAAI8B,EAAWJ,EAAS1B,aAAaqC,MAAKO,GAAKA,EAAElL,OAASiL,IAC1D,GAAKb,EAME,IAAIA,EAASkB,WAAaH,EAO7B,OAFA3B,QAAQjM,MAAM,2BAA2B0N,8CACnC7B,EAAGmC,MACF,EANPnB,EAAS3M,MAAQA,EACjB2M,EAASkB,iBAPTtB,EAAS1B,aAAa7D,KAAK,CACvB6G,UAAW,EACXtL,KAAMiL,EACNxN,MAAOA,IAaf,aAFM2L,EAAGiC,MAAMjD,IAAI4B,SACbZ,EAAGmC,MACF,KAIf,qBAAqBC,GACjB,aAAarF,KAAKwC,iBAAgBC,UAC9B,MAAMQ,EAAKrE,EAAGsE,YAAY7B,EAAe,aACzC,IAAIwC,QAAiBZ,EAAGiC,MAAM7H,IAAI,GAClCwG,EAASzB,YAAciD,QACjBpC,EAAGiC,MAAMjD,IAAI4B,SACbZ,EAAGmC,QAIjB,uBACI,aAAapF,KAAKwC,iBAAgBC,UAC9B,MAAMQ,EAAKrE,EAAGsE,YAAY7B,EAAe,YACzC,IAAIwC,QAAiBZ,EAAGiC,MAAM7H,IAAI,GAClC,OAAOwG,aAAQ,EAARA,EAAUzB,eAIzB,yBACI,aAAapC,KAAKwC,iBAAgBC,UAC9B,MAAMQ,EAAKrE,EAAGsE,YAAY7B,EAAe,aACzC,IAAIwC,QAAiBZ,EAAGiC,MAAM7H,IAAI,GAClCwG,EAASzB,YAAc,KACvByB,EAAS1B,aAAe,SAClBc,EAAGiC,MAAMjD,IAAI4B,SACbZ,EAAGmC,QAIjB,2CACI,aAAapF,KAAKwC,iBAAgBC,SACvB7D,EAAG8D,OAAOnB,KAIzB,wDAAwDrC,GACpD,aAAac,KAAKwC,iBAAgBC,eACjB7D,EAAGgG,gBAAgBrD,EAAsB,iBAAkBrC,KAIhF,iCAAiCoG,GAC7B,aAAatF,KAAKwC,iBAAgBC,UAC9B7D,EAAG6E,IAAIlC,EAAsB+D,MAIrC,4CAA4C1L,SAClCoG,KAAKwC,iBAAgBC,UACvB7D,EAAGyF,OAAO9C,EAAsB3H,QEtR5CnB,EALgB,CACZ8M,iBATG9C,eAAgCvD,GACnC,aAAc,IAAIP,EAAkBC,GAAI2G,iBAAiBrG,IASzDsG,kBANG/C,eAAiCvD,GACpC,aAAc,IAAIsC,EAAyB5C,GAAI4G,kBAAkBtG,KAQrD3F,QEnBZkM,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAU5O,QAG3C,IAAI6O,EAASH,EAAyBE,GAAY,CACjD/L,GAAI+L,EACJE,QAAQ,EACR9O,QAAS,IAUV,OANA+O,EAAoBH,GAAUC,EAAQA,EAAO7O,QAAS2O,GAGtDE,EAAOC,QAAS,EAGTD,EAAO7O,QAIf2O,EAAoBJ,EAAIQ,EAGxBJ,EAAoBK,EAAI,KAEvBL,EAAoB,OC/BrBA,EAAoBzG,EAAK2G,IACxB,IAAII,EAASJ,GAAUA,EAAOK,WAC7B,IAAML,EAAgB,QACtB,IAAMA,EAEP,OADAF,EAAoBtB,EAAE4B,EAAQ,CAAExG,EAAGwG,IAC5BA,GCLRN,EAAoBtB,EAAI,CAACrN,EAASmP,KACjC,IAAI,IAAIjI,KAAOiI,EACXR,EAAoBS,EAAED,EAAYjI,KAASyH,EAAoBS,EAAEpP,EAASkH,IAC5EpH,OAAOC,eAAeC,EAASkH,EAAK,CAAEmI,YAAY,EAAM/I,IAAK6I,EAAWjI,MCJ3EyH,EAAoB1O,EAAI,GAGxB0O,EAAoBlF,EAAK6F,GACjBtL,QAAQuL,IAAIzP,OAAOkK,KAAK2E,EAAoB1O,GAAGqD,QAAO,CAACkM,EAAUtI,KACvEyH,EAAoB1O,EAAEiH,GAAKoI,EAASE,GAC7BA,IACL,KCNJb,EAAoBc,EAAKH,GAEjB,iCCFRX,EAAoBe,SAAYJ,GAEnBA,EAAU,IAAM,CAAC,IAAM,wBAAwBA,GAAW,OCHvEX,EAAoBxE,EAAI,WACvB,GAA0B,iBAAfwF,WAAyB,OAAOA,WAC3C,IACC,OAAO1G,MAAQ,IAAI2G,SAAS,cAAb,GACd,MAAOnG,GACR,GAAsB,iBAAXoG,OAAqB,OAAOA,QALjB,GCAxBlB,EAAoBmB,IAAOjB,KAC1BA,EAAS/O,OAAOiQ,OAAOlB,IACXmB,WAAUnB,EAAOmB,SAAW,IACxClQ,OAAOC,eAAe8O,EAAQ,UAAW,CACxCQ,YAAY,EACZxL,IAAK,KACJ,MAAM,IAAI5B,MAAM,0FAA4F4M,EAAOhM,OAG9GgM,GCTRF,EAAoBS,EAAI,CAAC9N,EAAKiC,IAASzD,OAAOmG,UAAUgK,eAAeC,KAAK5O,EAAKiC,GCCjFoL,EAAoBpJ,EAAKvF,IACH,oBAAXa,QAA0BA,OAAOsP,aAC1CrQ,OAAOC,eAAeC,EAASa,OAAOsP,YAAa,CAAE5P,MAAO,WAE7DT,OAAOC,eAAeC,EAAS,aAAc,CAAEO,OAAO,KpBLnDhB,EAAOoP,EAAoBK,EAC/BL,EAAoBK,EAAI,IAChBL,EAAoBlF,EAAE,KAAKtF,KAAK5E,GqBFxCoP,EAAoBvJ,EAAI,O,MCIxB,IAAIgL,EAAkB,CACrBC,GAAI,GAgBL1B,EAAoB1O,EAAEyK,EAAI,CAAC4E,EAASE,KAE/BY,EAAgBd,IACnBgB,cAAc,GAAK3B,EAAoBc,EAAEH,KAI3C,IAAIiB,EAAqB/N,KAA+B,yBAAIA,KAA+B,0BAAK,GAC5FgO,EAA6BD,EAAmBhJ,KAAK/B,KAAK+K,GAC9DA,EAAmBhJ,KArBS3E,IAC3B,IAAK6N,EAAUC,EAAaC,GAAW/N,EACvC,IAAI,IAAIgM,KAAY8B,EAChB/B,EAAoBS,EAAEsB,EAAa9B,KACrCD,EAAoBJ,EAAEK,GAAY8B,EAAY9B,IAIhD,IADG+B,GAASA,EAAQhC,GACd8B,EAASnL,QACd8K,EAAgBK,EAASG,OAAS,EACnCJ,EAA2B5N,K,GClBrB+L,EAAoBK,K","file":"4c24048b5f5f7b513d45.bundle.js","sourcesContent":["var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(730).then(next);\n};","var DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\nvar nativeDefineProperty = Object.defineProperty;\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return nativeDefineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertynames\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer(obj: any, transfers: Transferable[]) {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n","export function groupBy<T, K extends keyof T>(list: T[], key: K) {\n    const map = new Map<T[K], T[]>();\n    list.forEach((item) => {\n        const k = item[key];\n        const collection = map.get(k);\n        if (!collection) {\n            map.set(k, [item]);\n        } else {\n            collection.push(item);\n        }\n    });\n    return map;\n}\n","import { KontokorrentDatabase } from \"./KontokorrentDatabase\";\nimport { KontokorrentBalance } from \"./KontokorrentBalance\";\nimport { filterBezahlungen } from \"./filterBezahlungen\";\nimport { groupBy } from \"../utils/groupBy\";\n\nclass GeteilteZahlung {\n    constructor(public wert: number,\n        public empfaengerAnzahl: number,\n        public isEmpfaenger: boolean) {\n\n    }\n}\n\ntype Bezahlung = { empfaengerIds: string[], bezahlendePersonId: string, wert: number };\n\nexport class BalanceCalculator {\n    constructor(private db: KontokorrentDatabase) {\n    }\n\n    erweitern(summe: number, nenner: number, andere: number[]) {\n        let c = 1;\n        for (let n of andere) {\n            if (n != nenner) {\n                c *= n;\n            }\n        }\n        return summe * c;\n    }\n\n    async calculateBalance(kontokorrentId: string) {\n        let aktionen = await this.db.getAktionen(kontokorrentId);\n        let gespeicherte: Bezahlung[] = filterBezahlungen(aktionen);\n        let zwischengespeicherte: Bezahlung[] = await this.db.getZwischengespeicherteBezahlungenForKontokorrent(kontokorrentId);\n        let bezahlungen = [...zwischengespeicherte, ...gespeicherte];\n        let kk = await this.db.getKontokorrent(kontokorrentId);\n        let geteilteZahlungen: { [id: string]: GeteilteZahlung[] } = {};\n        for (let p of kk.personen) {\n            geteilteZahlungen[p.id] = [];\n        }\n        for (let b of bezahlungen) {\n            for (let e of b.empfaengerIds) {\n                geteilteZahlungen[e].push(new GeteilteZahlung(b.wert, b.empfaengerIds.length, true));\n                geteilteZahlungen[b.bezahlendePersonId].push(new GeteilteZahlung(b.wert, b.empfaengerIds.length, false));\n            }\n        }\n        let balance: KontokorrentBalance = {};\n        for (let p of kk.personen) {\n            let gruppen = groupBy(geteilteZahlungen[p.id], \"empfaengerAnzahl\");\n            let alleNenner = Array.from(gruppen.keys());\n            let gesamtNenner = Array.from(gruppen.keys()).reduce((p, c) => p * c, 1);\n            if (gesamtNenner < 362880) {\n                let gesamtSumme = 0;\n                for (let g of gruppen.keys()) {\n                    let zahlungen = gruppen.get(g);\n                    let summe = zahlungen.reduce((p, c) => p + (c.isEmpfaenger ? c.wert : -c.wert), 0);\n                    gesamtSumme += this.erweitern(summe, g, alleNenner);\n                }\n                balance[p.id] = gesamtSumme / gesamtNenner;\n            }\n            else {\n                let gesamtSumme = 0;\n                for (let g of gruppen.keys()) {\n                    let zahlungen = gruppen.get(g);\n                    let summe = zahlungen.reduce((p, c) => p + (c.isEmpfaenger ? c.wert : -c.wert), 0);\n                    gesamtSumme += summe / g;\n                }\n                balance[p.id] = gesamtSumme;\n            }\n        }\n        return balance;\n    }\n}","import { BezahlungDbModel } from \"./BezahlungDbModel\";\nimport { AktionDbModel } from \"./AktionDbModel\";\n\nexport function filterBezahlungen(aktionen: AktionDbModel[]) {\n    let bezahlungenMap: { [id: string]: BezahlungDbModel } = {};\n    let ordered = aktionen.sort((a,b)=> a.laufendeNummer - b.laufendeNummer);\n    for (let b of ordered) {\n        if (b.bearbeiteteBezahlungId) {\n            delete bezahlungenMap[b.bearbeiteteBezahlungId];\n        }\n        if (b.geloeschteBezahlungId) {\n            delete bezahlungenMap[b.geloeschteBezahlungId];\n        }\n        else {\n            bezahlungenMap[b.bezahlung.id] = b.bezahlung;\n        }\n    }\n    let bezahlungen = Object.values(bezahlungenMap);\n    return bezahlungen;\n}","import { openDB, IDBPDatabase, DBSchema, unwrap } from \"idb\";\nimport { KontokorrentDbModel } from \"./KontokorrentDbModel\";\nimport { sortByAlphabetically } from \"../utils/sortBy\";\nimport { Aktion } from \"../api/Aktion\";\nimport { AktionDbModel } from \"./AktionDbModel\";\nimport { AccountInfo } from \"./AccountInfo\";\nimport { NeueBezahlungDbModel } from \"./NeueBezahlungDbModel\";\n\n\nconst KontokorrentsStore = \"KontokorrentsStore\";\nconst AppStateStore = \"AppStateStore\";\nconst AktionenStore = \"AktionenStore\";\nconst NeueBezahlungenStore = \"NeueBezahlungenStore\";\n\ninterface AccessTokenInfo {\n    timestamp: number;\n    value: string;\n    type: \"google\" | \"anonymous\";\n}\n\ninterface AppSettings {\n    id: number;\n    zuletztGesehenerKontokorrentId: string\n    accesstokens: AccessTokenInfo[];\n    accountinfo: AccountInfo;\n}\n\ninterface KontokorrentDbSchema extends DBSchema {\n    KontokorrentsStore: {\n        key: string;\n        value: KontokorrentDbModel;\n        indexes: { \"oeffentlicherName\": string };\n    };\n    AppStateStore: {\n        value: AppSettings;\n        key: number;\n    };\n    AktionenStore: {\n        key: [number, string],\n        value: AktionDbModel,\n        indexes: { \"kontokorrentId\": string };\n    };\n    NeueBezahlungenStore: {\n        key: string,\n        value: NeueBezahlungDbModel,\n        indexes: { \"kontokorrentId\": string };\n    }\n}\n\n\nconst initialSettings: (() => AppSettings) = () => { return { id: 0, zuletztGesehenerKontokorrentId: null, accesstokens: [], accountinfo: null } };\nexport class KontokorrentDatabase {\n\n    private async withInitialized<T>(cb: (db: IDBPDatabase<KontokorrentDbSchema>) => Promise<T>) {\n        let db = await openDB<KontokorrentDbSchema>(\"kontokorrent-db\", 5, {\n            upgrade(db, oldVersion: number, newVersion: number) {\n                if (oldVersion < 1) {\n                    let store = db.createObjectStore(KontokorrentsStore, { keyPath: \"id\" });\n                    store.createIndex(\"oeffentlicherName\", \"oeffentlicherName\");\n                }\n                if (oldVersion < 2) {\n                    let store = db.createObjectStore(AppStateStore, { keyPath: \"id\" });\n                    store.put(initialSettings());\n                }\n                if (oldVersion < 3) {\n                    let store = db.createObjectStore(AktionenStore, { keyPath: [\"laufendeNummer\", \"kontokorrentId\"] });\n                    store.createIndex(\"kontokorrentId\", \"kontokorrentId\");\n                }\n                if (oldVersion < 5) {\n                    if (db.objectStoreNames.contains(NeueBezahlungenStore)) {\n                        db.deleteObjectStore(NeueBezahlungenStore)\n                    }\n                    let store = db.createObjectStore(NeueBezahlungenStore, { keyPath: \"id\" });\n                    store.createIndex(\"kontokorrentId\", \"kontokorrentId\");\n                }\n            },\n        });\n        try {\n            return await cb(db);\n        }\n        finally {\n            db.close();\n        }\n    }\n\n    async getKontokorrents(): Promise<KontokorrentDbModel[]> {\n        return await this.withInitialized(async db => {\n            return sortByAlphabetically((await db.getAll(KontokorrentsStore)), k => k.name);\n        });\n    }\n\n    async addAktionen(id: string, aktionen: Aktion[]): Promise<void> {\n        if (!aktionen.length) {\n            return;\n        }\n        let mapped = aktionen\n            .map(v => {\n                let a: AktionDbModel = {\n                    ...v,\n                    kontokorrentId: id\n                };\n                return a;\n            });\n        return await this.withInitialized(db => {\n            const unwrapped = unwrap(<IDBPDatabase>db);\n            return new Promise((resolve, reject) => {\n                const tx = unwrapped.transaction(AktionenStore, \"readwrite\");\n                tx.onerror = err => {\n                    console.error(\"addAktionen failed\", err, tx.error);\n                    reject(tx.error);\n                };\n                tx.oncomplete = () => {\n                    resolve();\n                }\n                for (let a of mapped) {\n                    let request = tx.objectStore(AktionenStore).add(a);\n                    request.onerror = ev => {\n                        if (request.error.name == \"ConstraintError\") {\n                            console.log(`Aktion ${a.laufendeNummer} für Kontokorrent ${id} bereits gespeichert.`, ev, request.error);\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                        } else {\n                            console.error(`Aktion ${a.laufendeNummer} für Kontokorrent ${id} konnte nicht gespeichert werden.`, ev, request.error);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    async getZuletztGesehenerKontokorrentId(): Promise<string> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            if (appState.zuletztGesehenerKontokorrentId) {\n                return appState.zuletztGesehenerKontokorrentId;\n            }\n            else {\n                let kks = await (await this.getKontokorrents());\n                if (kks.length) {\n                    return kks[0].id;\n                }\n                return null;\n            }\n        });\n    }\n\n    async setZuletztGesehenerKontokorrentId(id: string): Promise<void> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            appState.zuletztGesehenerKontokorrentId = id;\n            await db.put(AppStateStore, appState);\n        });\n    }\n\n    async setKontokorrents(kontokorrents: {\n        name: string, id: string, personen: { name: string, id: string }[],\n        oeffentlicherName: string\n    }[]): Promise<string[]> {\n        return await this.withInitialized(async db => {\n            let existing: KontokorrentDbModel[] = (await db.getAll(KontokorrentsStore));\n            for (let v of existing.filter(e => !kontokorrents.some(d => e.id === d.id))) {\n                await db.delete(KontokorrentsStore, v.id);\n            }\n            let newIds: string[] = [];\n            for (let v of kontokorrents) {\n                let ex = existing.find(d => d.id == v.id);\n                if (!ex) {\n                    newIds.push(v.id);\n                }\n                let combined = {\n                    ...ex, name: v.name, personen: v.personen, id: v.id,\n                    oeffentlicherName: v.oeffentlicherName\n                };\n                await db.put(KontokorrentsStore, combined);\n            }\n            return newIds;\n        });\n    }\n\n    async addKontokorrent(kk: KontokorrentDbModel): Promise<void> {\n        return await this.withInitialized(async db => {\n            if (!await db.get(KontokorrentsStore, kk.id)) {\n                await db.add(KontokorrentsStore, kk);\n            }\n        });\n    }\n\n    async getKontokorrent(id: string): Promise<KontokorrentDbModel> {\n        return await this.withInitialized(async db => {\n            return <KontokorrentDbModel>await db.get(KontokorrentsStore, id);\n        });\n    }\n\n    async getPerOeffentlichName(id: string): Promise<KontokorrentDbModel> {\n        return await this.withInitialized(async db => {\n            return <KontokorrentDbModel>await db.getFromIndex(KontokorrentsStore, \"oeffentlicherName\", id);\n        });\n    }\n\n    async getAktionen(id: string): Promise<AktionDbModel[]> {\n        return await this.withInitialized(async db => {\n            return await db.getAllFromIndex(AktionenStore, \"kontokorrentId\", id);\n        });\n    }\n\n    async clear() {\n        return await this.withInitialized(async db => {\n            await db.clear(AktionenStore);\n            await db.clear(KontokorrentsStore);\n            await db.put(AppStateStore, initialSettings());\n        });\n    }\n\n    async getAccessToken(tokenType: \"anonymous\" | \"google\"): Promise<AccessTokenInfo> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            return (appState.accesstokens || []).find(t => t.type === tokenType);\n        });\n    }\n\n    async updateAccessTokenIfNewer(tokenType: \"anonymous\" | \"google\", value: string, lastTimeStamp: number): Promise<boolean> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\", { durability: \"strict\" });\n            let appState = await tx.store.get(0);\n            if (!appState.accesstokens) {\n                appState.accesstokens = [];\n            }\n            let existing = appState.accesstokens.find(t => t.type === tokenType);\n            if (!existing) {\n                appState.accesstokens.push({\n                    timestamp: 1,\n                    type: tokenType,\n                    value: value\n                });\n            } else if (existing.timestamp == lastTimeStamp) {\n                existing.value = value;\n                existing.timestamp++;\n            }\n            else {\n                console.error(`The accesstoken of type ${tokenType} was already updated since reading.`);\n                await tx.done;\n                return false;\n            }\n            await tx.store.put(appState);\n            await tx.done;\n            return true;\n        });\n    }\n\n    async setAccountInfo(accountInfo: AccountInfo): Promise<void> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\");\n            let appState = await tx.store.get(0);\n            appState.accountinfo = accountInfo;\n            await tx.store.put(appState);\n            await tx.done;\n        });\n    }\n\n    async getAccountInfo(): Promise<AccountInfo> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readonly\");\n            let appState = await tx.store.get(0);\n            return appState?.accountinfo;\n        });\n    }\n\n    async clearAccountInfo(): Promise<void> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\");\n            let appState = await tx.store.get(0);\n            appState.accountinfo = null;\n            appState.accesstokens = [];\n            await tx.store.put(appState);\n            await tx.done;\n        });\n    }\n\n    async getZwischengespeicherteBezahlungen(): Promise<NeueBezahlungDbModel[]> {\n        return await this.withInitialized(async db => {\n            return db.getAll(NeueBezahlungenStore);\n        });\n    }\n\n    async getZwischengespeicherteBezahlungenForKontokorrent(kontokorrentId: string): Promise<NeueBezahlungDbModel[]> {\n        return await this.withInitialized(async db => {\n            return await db.getAllFromIndex(NeueBezahlungenStore, \"kontokorrentId\", kontokorrentId);\n        });\n    }\n\n    async bezahlungZwischenspeichern(m: NeueBezahlungDbModel) {\n        return await this.withInitialized(async db => {\n            db.add(NeueBezahlungenStore, m);\n        });\n    }\n\n    async zwischengespeicherteBezahlungErledigt(id: string) {\n        await this.withInitialized(async db => {\n            db.delete(NeueBezahlungenStore, id);\n        });\n    }\n}\n","import { KontokorrentDatabase } from \"./KontokorrentDatabase\";\n\nexport class KontokorrentSynchronizer {\n    constructor(private db: KontokorrentDatabase) {\n    }\n\n    async getLaufendeNummer(kontokorrentId: string) {\n        let aktionen = await this.db.getAktionen(kontokorrentId);\n        let sorted = aktionen.map(v => v.laufendeNummer).sort((a, b) => a - b);\n        let i: number;\n        for (i = 0; i < sorted.length - 1; i++) {\n            if (sorted[i] + 1 !== sorted[i + 1]) {\n                break;\n            }\n        }\n        return sorted[i];\n    }\n}","import { expose } from \"comlink\";\nimport { BalanceCalculator } from \"../lib/BalanceCalculator\";\nimport { KontokorrentDatabase } from \"../lib/KontokorrentDatabase\";\nimport { KontokorrentSynchronizer } from \"../lib/KontokorrentSynchronizer\";\n\nconst db = new KontokorrentDatabase();\n\nexport async function calculateBalance(kontokorrentId: string) {\n    return await (new BalanceCalculator(db).calculateBalance(kontokorrentId));\n}\n\nexport async function getLaufendeNummer(kontokorrentId: string) {\n    return await (new KontokorrentSynchronizer(db).getLaufendeNummer(kontokorrentId));\n}\n\nconst exports = {\n    calculateBalance,\n    getLaufendeNummer\n};\nexport type KontokorrentWorkerApi = typeof exports;\nexpose(exports, self);","export function sortByAlphabetically<T, P extends keyof T>(collection: T[], keySelector: (x: T) => string): T[] {\n    return collection.sort((a, b) => keySelector(a).toLowerCase().localeCompare(keySelector(b).toLowerCase()));\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module\n\t__webpack_require__(2587);\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => module['default'] :\n\t\t() => module;\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + \"a54cd8c09c26fa7f6dcc\" + \".bundle.js\";\n};","// This function allow to reference all chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"730\":\"31d6cfe0d16ae931b73c\"}[chunkId] + \".css\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/v2/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t24: 1\n};\n\n// importScripts chunk loading\nvar chunkLoadingCallback = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\timportScripts(\"\" + __webpack_require__.u(chunkId));\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkkontokorrent\"] = self[\"webpackChunkkontokorrent\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = chunkLoadingCallback;\n\n// no HMR\n\n// no HMR manifest","// run startup\nreturn __webpack_require__.x();\n"],"sourceRoot":""}