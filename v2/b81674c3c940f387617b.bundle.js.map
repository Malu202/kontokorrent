{"version":3,"sources":["webpack://kontokorrent/./src/lib/NeueBezahlungService.ts","webpack://kontokorrent/./src/state/actions/BezahlungActionCreator.ts","webpack://kontokorrent/./src/sw.constants.ts","webpack://kontokorrent/./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.ts","webpack://kontokorrent/./src/components/MdcCheckbox/MdcCheckbox.ts","webpack://kontokorrent/./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.ts","webpack://kontokorrent/./src/components/BezahlungEintragenForm/BezahlungEintragenForm.ts","webpack://kontokorrent/./src/utils/toDateInputValue.ts","webpack://kontokorrent/./node_modules/date-fns/esm/isSameDay/index.js","webpack://kontokorrent/./node_modules/date-fns/esm/endOfDay/index.js","webpack://kontokorrent/./src/utils/Debouncer.ts","webpack://kontokorrent/./src/components/BezahlungEintragenPage/BezahlungEintragenPage.ts","webpack://kontokorrent/./node_modules/core-js/modules/web.url.to-json.js","webpack://kontokorrent/./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.html","webpack://kontokorrent/./src/components/BezahlungEintragenForm/BezahlungEintragenForm.html","webpack://kontokorrent/./src/components/BezahlungEintragenPage/BezahlungEintragenPage.html","webpack://kontokorrent/./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.html","webpack://kontokorrent/./src/components/MdcCheckbox/MdcCheckbox.html"],"names":["NeueBezahlungService","apiClient","db","kontokorrentId","request","aktion","this","neueBezahlung","addAktionen","BezahlungKontokorrentGeandert","type","NeueBezahlungAnlegen","NeueBezahlungAngelegt","bezahlung","NeueBezahlungAnlegenFailed","BezahlungActionCreator","store","neueBezahlungService","workerService","id","state","kontokorrents","activeKontokorrentId","getZuletztGesehenerKontokorrentId","dispatch","getWorker","getBeschreibungVorschlaege","setZuletztGesehenerKontokorrentId","direct","beschreibung","betreff","bezahlendePersonId","bezahlendePerson","empfaengerIds","empfaenger","wert","betrag","zeitpunkt","datum","navigator","window","reg","serviceWorker","ready","zwischengespeichert","bezahlungZwischenspeichern","sync","register","status","console","warn","zwischengespeicherteBezahlungErledigt","log","bezahlungAnlegen","err","error","eingabe","BezahlendePersonRadioButton","HTMLElement","super","innerHTML","input","querySelector","personLabel","label","v","name","value","innerText","setAttribute","customElements","define","template","ReuseableTemplate","CheckboxIdAttribute","CheckboxNameAttribute","appendChild","get","nativeControl","updateAttributes","getAttribute","mdcCheckBox","BezahlungEintragenForm","d","local","validationRequested","empfaengerAuswahl","zahlendePersonRenderer","ArrayToElementRenderer","p","empfaengerRenderer","beschreibungVorschlaegeRenderer","el","document","createElement","className","addEventListener","e","completeBetreff","Date","setMinutes","getMinutes","getTimezoneOffset","toJSON","slice","zahlendePersonMissingError","betreffMissingError","betragMissingError","betragInvalidError","empfaengerMissingError","form","alleCheck","formInputListener","onFormInput","focus","alleClickListener","alleClick","betreffInputListener","dispatchEvent","CustomEvent","detail","betreffKeyDownListener","betreffKeyDown","code","vorschlaege","length","validateWhileManipulating","checked","c","empfaengerCheckboxen","removeEventListener","parseBetrag","betragValid","valid","hidden","empty","valueAsDate","dirtyDateLeft","dirtyDateRight","requiredArgs","arguments","dateLeftStartOfDay","startOfDay","dateRightStartOfDay","getTime","isSameDay","dirtyDate","date","toDate","setHours","endOfDay","selectedEmpfaenger","getDatum","replace","betragFloat","parseFloat","isNaN","_personen","map","filter","validity","betreffValid","zahlendePersonValid","empfaengerValid","Object","values","some","update","element","person","radioName","BezahlungEintragenFormTagName","Debouncer","ms","Promise","resolve","setTimeout","aborted","promise","reject","abort","aborter","race","timeout","Error","BezahlungEintragenPage","betreffVorschlagDebouncer","zurueckLink","appBar","AppBar","bezahlungEintragenForm","saveButton","editingSection","savingSection","saveError","formContainer","serviceLocator","routingActionCreator","bezahlungActionCreator","neueBezahlungServiceFactory","bezahlungActionCreatorFactory","addServices","kontokorrentsSubscription","subscribe","s","applyStoreState","beschreibungVorschlagSubscription","beschreibungVorschlaegeChanged","bezahlungEintragenKontokorrentChanged","bezahlungEintragenGeoeffnet","convertLinks","saveEventListener","save","ev","betreffChanged","trigger","beschreibungVorschlaege","validate","data","getData","bezahlungHinzufuegen","navigateKontokorrent","scrollTop","href","personen","style","display","$","target","proto","enumerable","URL","prototype","toString","call","module","exports"],"mappings":"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","file":"b81674c3c940f387617b.bundle.js","sourcesContent":["import { ApiClient } from \"../api/ApiClient\";\nimport { NeueBezahlungRequest } from \"../api/NeueBezahlungRequest\";\nimport { ServiceLocator } from \"../ServiceLocator\";\nimport { KontokorrentDatabase } from \"./KontokorrentDatabase\";\n\nexport class NeueBezahlungService {\n    constructor(private apiClient: ApiClient,\n        private db: KontokorrentDatabase) {\n    }\n\n    async bezahlungAnlegen(kontokorrentId: string, request: NeueBezahlungRequest) {\n        let aktion = await this.apiClient.neueBezahlung(kontokorrentId, request);\n        this.db.addAktionen(kontokorrentId, [aktion]);\n        return aktion;\n    }\n}\n\nexport function neueBezahlungServiceFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"NeueBezahlungService\",\n        serviceLocator => new NeueBezahlungService(serviceLocator.apiClient,\n            serviceLocator.db));\n}","import { Store } from \"../Store\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { Action } from \"../lib/Action\";\nimport { ActionNames } from \"./ActionNames\";\nimport { NeueBezahlungBackgroundSyncTag } from \"../../sw.constants\";\nimport { NeueBezahlungService, neueBezahlungServiceFactory } from \"../../lib/NeueBezahlungService\";\nimport { NeueBezahlungRequest } from \"../../api/NeueBezahlungRequest\";\nimport { v4 as uuid } from \"uuid\";\nimport { NeueBezahlungDbModel } from \"../../lib/NeueBezahlungDbModel\";\nimport { Bezahlung, BezahlungStatus } from \"../State\";\nimport { WorkerService, workerServiceFactory } from \"../../lib/WorkerService\";\n\nexport class BezahlungKontokorrentGeandert implements Action {\n    readonly type = ActionNames.BezahlungKontokorrentGeandert;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport class NeueBezahlungAnlegen implements Action {\n    readonly type = ActionNames.NeueBezahlungAnlegen;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport class NeueBezahlungAngelegt implements Action {\n    readonly type = ActionNames.NeueBezahlungAngelegt;\n    constructor(public kontokorrentId: string, public bezahlung: Bezahlung) {\n    }\n}\n\nexport class NeueBezahlungAnlegenFailed implements Action {\n    readonly type = ActionNames.NeueBezahlungAnlegenFailed;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport type BezahlungActions = BezahlungKontokorrentGeandert\n    | NeueBezahlungAnlegenFailed\n    | NeueBezahlungAnlegen\n    | NeueBezahlungAngelegt;\n\nexport class BezahlungActionCreator {\n    constructor(private store: Store,\n        private db: KontokorrentDatabase,\n        private neueBezahlungService: NeueBezahlungService,\n        private workerService: WorkerService) {\n    }\n\n    async bezahlungEintragenGeoeffnet() {\n        let id = this.store.state.kontokorrents.activeKontokorrentId || await this.db.getZuletztGesehenerKontokorrentId();\n        this.store.dispatch(new BezahlungKontokorrentGeandert(id));\n        await (await this.workerService.getWorker()).getBeschreibungVorschlaege(id, null);\n    }\n\n    async bezahlungEintragenKontokorrentChanged(id: string) {\n        this.store.dispatch(new BezahlungKontokorrentGeandert(id));\n        await this.db.setZuletztGesehenerKontokorrentId(id);\n        await (await this.workerService.getWorker()).getBeschreibungVorschlaege(id, null);\n    }\n\n    async bezahlungHinzufuegen(kontokorrentId: string, bezahlung: { betreff: string, betrag: number, datum: Date, bezahlendePerson: string, empfaenger: string[] }) {\n        let direct = false;\n        let id = uuid();\n        let request: NeueBezahlungRequest = {\n            beschreibung: bezahlung.betreff,\n            bezahlendePersonId: bezahlung.bezahlendePerson,\n            empfaengerIds: bezahlung.empfaenger,\n            id: id,\n            wert: bezahlung.betrag,\n            zeitpunkt: bezahlung.datum\n        };\n        if (\"serviceWorker\" in navigator && \"SyncManager\" in window) {\n            let reg = await navigator.serviceWorker.ready;\n            try {\n                let zwischengespeichert: NeueBezahlungDbModel = {\n                    beschreibung: bezahlung.betreff,\n                    bezahlendePersonId: bezahlung.bezahlendePerson,\n                    empfaengerIds: bezahlung.empfaenger,\n                    id: id,\n                    wert: bezahlung.betrag,\n                    zeitpunkt: bezahlung.datum,\n                    kontokorrentId: kontokorrentId\n                }\n                await this.db.bezahlungZwischenspeichern(zwischengespeichert);\n                await reg.sync.register(NeueBezahlungBackgroundSyncTag);\n                this.store.dispatch(new NeueBezahlungAngelegt(kontokorrentId, {\n                    beschreibung: zwischengespeichert.beschreibung,\n                    bezahlendePersonId: zwischengespeichert.bezahlendePersonId,\n                    empfaengerIds: zwischengespeichert.empfaengerIds,\n                    id: zwischengespeichert.id,\n                    wert: zwischengespeichert.wert,\n                    zeitpunkt: zwischengespeichert.zeitpunkt,\n                    status: BezahlungStatus.Zwischengespeichert\n                }));\n            } catch {\n                console.warn(\"background sync not allowed\");\n                await this.db.zwischengespeicherteBezahlungErledigt(id);\n                direct = true;\n            }\n        } else {\n            console.log(\"background sync not supported\");\n            direct = true;\n        }\n        if (direct) {\n            this.store.dispatch(new NeueBezahlungAnlegen(kontokorrentId));\n            try {\n                let aktion = await this.neueBezahlungService.bezahlungAnlegen(kontokorrentId, request);\n                this.store.dispatch(new NeueBezahlungAngelegt(kontokorrentId, {\n                    beschreibung: aktion.bezahlung.beschreibung,\n                    bezahlendePersonId: aktion.bezahlung.bezahlendePersonId,\n                    empfaengerIds: aktion.bezahlung.empfaengerIds,\n                    id: aktion.bezahlung.id,\n                    wert: aktion.bezahlung.wert,\n                    zeitpunkt: aktion.bezahlung.zeitpunkt,\n                    status: BezahlungStatus.Gespeichert\n                }));\n            }\n            catch (err) {\n                console.error(err);\n                this.store.dispatch(new NeueBezahlungAnlegenFailed(kontokorrentId));\n                throw err;\n            }\n        }\n    }\n\n    async getBeschreibungVorschlaege(kontokorrentId: string, eingabe: string) {\n        (await this.workerService.getWorker()).getBeschreibungVorschlaege(kontokorrentId, eingabe);\n    }\n}\n\nexport function bezahlungActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"BezahlungActionCreator\",\n        serviceLocator => new BezahlungActionCreator(serviceLocator.store,\n            serviceLocator.db,\n            neueBezahlungServiceFactory(serviceLocator),\n            workerServiceFactory(serviceLocator)));\n}\n","export const NeueBezahlungBackgroundSyncTag = \"NeueBezahlungBackgroundSync\";","import { Person } from \"../../state/State\";\nimport template from \"./BezahlendePersonRadioButton.html\";\nimport \"./BezahlendePersonRadioButton.scss\";\n\nexport class BezahlendePersonRadioButton extends HTMLElement {\n    private input: HTMLInputElement;\n    private personLabel: HTMLLabelElement;\n    private label: HTMLLabelElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.input = this.querySelector(\"input\");\n        this.personLabel = this.querySelector(`[data-ref=\"label\"]`);\n        this.label = this.querySelector(\"label\");\n    }\n\n    connectedCallback() {\n\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    set radioName(v: string) {\n        this.input.name = v;\n    }\n\n    set person(value: Person) {\n        this.input.value = value.id;\n        this.personLabel.innerText = value.name;\n        this.input.id = value.id;\n        this.label.setAttribute(\"for\", value.id);\n    }\n}\n\ncustomElements.define(\"bezahlende-person-radio-button\", BezahlendePersonRadioButton);\n","import { ReuseableTemplate } from \"../../utils/ReuseableTemplate\";\nimport templateContent from \"./MdcCheckbox.html\";\nimport \"./MdcCheckbox.scss\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport const CheckboxIdAttribute = \"checkbox-id\";\nexport const CheckboxNameAttribute = \"checkbox-name\";\n\nexport class MdcCheckbox extends HTMLElement {\n    private nativeControl: HTMLInputElement;\n\n    constructor() {\n        super();\n        this.appendChild(template.get());\n        this.nativeControl = this.querySelector(\".mdc-checkbox__native-control\");\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.nativeControl.id = this.getAttribute(CheckboxIdAttribute);\n        this.nativeControl.name = this.getAttribute(CheckboxNameAttribute);\n    }\n\n    static get observedAttributes() {\n        return [CheckboxIdAttribute, CheckboxNameAttribute];\n    }\n}\n\ncustomElements.define(\"mdc-checkbox\", MdcCheckbox);\n","import templateContent from \"./EmpfaengerCheckbox.html\";\nimport \"./EmpfaengerCheckbox.scss\";\nimport \"../MdcCheckbox/MdcCheckbox\";\nimport { MdcCheckbox } from \"../MdcCheckbox/MdcCheckbox\";\nimport { Person } from \"../../state/State\";\nimport { ReuseableTemplate } from \"../../utils/ReuseableTemplate\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport class EmpfaengerCheckbox extends HTMLElement {\n    private mdcCheckBox: MdcCheckbox;\n    private label: HTMLLabelElement;\n\n    constructor() {\n        super();\n        this.appendChild(template.get());\n        this.mdcCheckBox = this.querySelector(\"mdc-checkbox\");\n        this.label = this.querySelector(\"label\");\n    }\n\n    set person(value: Person) {\n        this.label.innerText = value.name;\n        const id = `empfaenger-${value.id}`;\n        this.label.setAttribute(\"for\", id);\n        this.mdcCheckBox.setAttribute(\"checkbox-id\", id);\n        this.mdcCheckBox.setAttribute(\"checkbox-name\", id);\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n}\n\ncustomElements.define(\"empfaenger-checkbox\", EmpfaengerCheckbox);\n","import { Person } from \"../../state/State\";\nimport template from \"./BezahlungEintragenForm.html\";\nimport \"./BezahlungEintragenForm.scss\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { BezahlendePersonRadioButton } from \"../BezahlendePersonRadioButton/BezahlendePersonRadioButton\";\nimport { EmpfaengerCheckbox } from \"../EmpfaengerCheckbox/EmpfaengerCheckbox\";\nimport { toDateInputValue } from \"../../utils/toDateInputValue\";\nimport { endOfDay, isSameDay } from \"date-fns\";\nimport { MdcCheckbox } from \"../MdcCheckbox/MdcCheckbox\";\n\nexport class BezahlungEintragenForm extends HTMLElement {\n    private zahlendePersonRenderer: ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>;\n    private empfaengerRenderer: ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>;\n    private datum: HTMLInputElement;\n    private betreff: HTMLInputElement;\n    private betrag: HTMLInputElement;\n    private zahlendePersonMissingError: HTMLSpanElement;\n    private betreffMissingError: HTMLDivElement;\n    private betragMissingError: HTMLDivElement;\n    private empfaengerMissingError: HTMLDivElement;\n    private validationRequested: boolean = false;\n    private form: HTMLFormElement;\n    private formInputListener: () => void;\n    private betragInvalidError: HTMLDivElement;\n    private empfaengerAuswahl: HTMLDivElement;\n    private _personen: Person[];\n    private alleCheck: MdcCheckbox;\n    private alleClickListener: () => void;\n    private betreffInputListener: () => void;\n    private beschreibungVorschlaegeRenderer: ArrayToElementRenderer<string, HTMLElement, string>;\n    private vorschlaege: string[];\n    private betreffKeyDownListener: (e: KeyboardEvent) => void;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.empfaengerAuswahl = this.querySelector(\"#empfaenger-auswahl\");\n        this.zahlendePersonRenderer = new ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>(\n            this.querySelector(\"#zahlende-person-auswahl\"),\n            p => p.id,\n            p => new BezahlendePersonRadioButton());\n        this.empfaengerRenderer = new ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>(\n            this.empfaengerAuswahl,\n            p => p.id,\n            p => new EmpfaengerCheckbox());\n        this.beschreibungVorschlaegeRenderer = new ArrayToElementRenderer<string, HTMLElement, string>(\n            this.querySelector(\"#beschreibung-vorschlaege\"),\n            p => p,\n            p => {\n                let el = document.createElement(\"button\");\n                el.className = \"bezahlung-eintragen-form__vorschlag\";\n                el.innerText = p;\n                el.type = \"button\";\n                el.addEventListener(\"click\", e => {\n                    this.completeBetreff(p);\n                });\n                return el;\n            });\n        this.datum = this.querySelector(\"#datum\");\n        this.datum.value = toDateInputValue(new Date());\n        this.betrag = this.querySelector(\"#betrag\");\n        this.betreff = this.querySelector(\"#betreff\");\n        this.zahlendePersonMissingError = this.querySelector(\"#zahlende-person-missing-error\");\n        this.betreffMissingError = this.querySelector(\"#betreff-missing-error\");\n        this.betragMissingError = this.querySelector(\"#betrag-missing-error\");\n        this.betragInvalidError = this.querySelector(\"#betrag-invalid-error\");\n        this.empfaengerMissingError = this.querySelector(\"#empfaenger-missing-error\");\n        this.form = this.querySelector(\"#bezahlung-eintragen-form\");\n        this.alleCheck = this.querySelector(\"#alle-check\");\n    }\n\n    connectedCallback() {\n        this.formInputListener = () => this.onFormInput();\n        this.form.addEventListener(\"input\", this.formInputListener);\n        this.betrag.focus();\n        this.alleClickListener = () => this.alleClick();\n        this.alleCheck.addEventListener(\"input\", this.alleClickListener);\n        this.betreffInputListener = () => {\n            this.dispatchEvent(new CustomEvent(\"betreffChanged\", { detail: this.betreff.value }));\n        };\n        this.betreff.addEventListener(\"input\", this.betreffInputListener);\n        this.betreffKeyDownListener = (e: KeyboardEvent) => this.betreffKeyDown(e);\n        this.betreff.addEventListener(\"keydown\", this.betreffKeyDownListener)\n    }\n\n    betreffKeyDown(e: KeyboardEvent) {\n        if (e.code == \"Enter\" && this.vorschlaege?.length > 0) {\n            this.completeBetreff(this.vorschlaege[0]);\n        }\n    }\n\n    private completeBetreff(p: string) {\n        this.betreff.value = p;\n        this.betreffInputListener();\n        this.betreff.focus();\n        this.validateWhileManipulating();\n    }\n\n    private alleClick() {\n        let checked = (this.form[\"alle\"] as HTMLInputElement).checked;\n        for (let c of this.empfaengerCheckboxen) {\n            c.checked = checked;\n        }\n    }\n\n    disconnectedCallback() {\n        this.form.removeEventListener(\"input\", this.formInputListener);\n        this.alleCheck.removeEventListener(\"input\", this.alleClickListener);\n        this.betreff.removeEventListener(\"input\", this.betreffInputListener);\n        this.betreff.removeEventListener(\"keydown\", this.betreffKeyDownListener)\n    }\n\n    onFormInput() {\n        this.validateWhileManipulating();\n    }\n\n    validate() {\n        this.validationRequested = true;\n        let betrag = this.parseBetrag();\n        let betragValid = betrag.valid;\n        this.betragInvalidError.hidden = betrag.valid || betrag.empty;\n        let valid = this.validateWhileManipulating() && betragValid;\n        return valid;\n    }\n\n    private getDatum() {\n        let d = this.datum.valueAsDate;\n        if (!d || isSameDay(d, new Date())) {\n            return new Date();\n        }\n        return endOfDay(d);\n    }\n\n    getData() {\n        return {\n            betrag: this.parseBetrag().value,\n            betreff: this.betreff.value,\n            empfaenger: this.selectedEmpfaenger,\n            bezahlendePerson: this.bezahlendePerson.value,\n            datum: this.getDatum()\n        }\n    }\n\n    private parseBetrag() {\n        this.betrag.setAttribute(\"type\", \"text\");\n        let betrag = this.betrag.value;\n        this.betrag.setAttribute(\"type\", \"number\");\n        if (betrag == \"\") {\n            return { valid: false, empty: true };\n        }\n        betrag = betrag.replace(\",\", \".\");\n        betrag = betrag.replace(/ /g, \"\");\n        let betragFloat = parseFloat(betrag);\n        if (isNaN(betragFloat)) {\n            return { valid: false, empty: false };\n        }\n        return { valid: true, value: betragFloat };\n    }\n\n    private get bezahlendePerson(): HTMLInputElement {\n        return this.form[\"bezahlende-person\"];\n    }\n\n    private get empfaengerCheckboxen(): HTMLInputElement[] {\n        return this._personen.map(p => (this.form[\"empfaenger-\" + p.id] as HTMLInputElement));\n    }\n\n    private get selectedEmpfaenger(): string[] {\n        return this._personen.filter(p => (this.form[\"empfaenger-\" + p.id] as HTMLInputElement).checked)\n            .map(p => p.id);\n    }\n\n    private validateWhileManipulating() {\n        let validity = {\n            betragValid: !!this.betrag.value,\n            betreffValid: !!this.betreff.value,\n            zahlendePersonValid: !!this.bezahlendePerson.value,\n            empfaengerValid: this.selectedEmpfaenger.length > 0\n        };\n        this.betragMissingError.hidden = !this.validationRequested || validity.betragValid;\n        this.betreffMissingError.hidden = !this.validationRequested || validity.betreffValid;\n        this.zahlendePersonMissingError.hidden = !this.validationRequested || validity.zahlendePersonValid;\n        this.empfaengerMissingError.hidden = !this.validationRequested || validity.empfaengerValid;\n        return !Object.values(validity).some(v => v == false);\n    }\n\n    set personen(value: Person[]) {\n        this._personen = value;\n        this.zahlendePersonRenderer.update(value, (element, person) => {\n            element.person = person;\n            element.radioName = \"bezahlende-person\";\n        });\n        this.empfaengerRenderer.update(value, (element, person) => {\n            element.person = person;\n        });\n    }\n\n    set beschreibungVorschlaege(value: string[]) {\n        this.vorschlaege = value;\n        this.beschreibungVorschlaegeRenderer.update(value, () => { });\n    }\n}\nexport const BezahlungEintragenFormTagName = \"bezahlung-eintragen-form\";\ncustomElements.define(BezahlungEintragenFormTagName, BezahlungEintragenForm);\n","export function toDateInputValue(d: Date) {\n    var local = new Date(d);\n    local.setMinutes(d.getMinutes() - d.getTimezoneOffset());\n    return local.toJSON().slice(0, 10);\n}","import startOfDay from '../startOfDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * var result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","export class Debouncer {\n    private abort: () => void;\n    constructor() {\n    }\n\n    private timeout(ms: number): Promise<void> {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve();\n            }, ms);\n        });\n    }\n\n    private aborter() {\n        let status = {\n            aborted: false,\n            promise: <Promise<void>>null\n        };\n        let promise = new Promise<void>((resolve, reject) => {\n            this.abort = () => {\n                status.aborted = false;\n                reject();\n            };\n        });\n        status.promise = promise;\n        return status;\n    }\n\n    async trigger(ms: number): Promise<void> {\n        if (this.abort) {\n            this.abort();\n        }\n        let status = this.aborter();\n        try {\n            await Promise.race([this.timeout(ms), status.promise]);\n        }\n        catch {\n            throw new Error(\"aborted\");\n        }\n    }\n}\n","import template from \"./BezahlungEintragenPage.html\";\nimport { Store } from \"../../state/Store\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { AppBar, AppBarTagName } from \"../AppBar/AppBar\";\nimport \"./BezahlungEintragenPage.scss\";\nimport { BezahlungActionCreator, bezahlungActionCreatorFactory } from \"../../state/actions/BezahlungActionCreator\";\nimport { BezahlungAnlegenStatus, State } from \"../../state/State\";\nimport { convertLinks } from \"../convertLinks\";\nimport \"../BezahlungEintragenForm/BezahlungEintragenForm\";\nimport { BezahlungEintragenForm, BezahlungEintragenFormTagName } from \"../BezahlungEintragenForm/BezahlungEintragenForm\";\nimport { th } from \"date-fns/locale\";\nimport { Debouncer } from \"../../utils/Debouncer\";\n\nexport class BezahlungEintragenPage extends HTMLElement {\n    private store: Store;\n    private kontokorrentsSubscription: () => void;\n    private routingActionCreator: RoutingActionCreator;\n    private appBar: AppBar;\n    private bezahlungActionCreator: BezahlungActionCreator;\n    private zurueckLink: HTMLAnchorElement;\n    private bezahlungEintragenForm: BezahlungEintragenForm;\n    private saveButton: HTMLButtonElement;\n    private saveEventListener: () => void;\n    private kontokorrentId: string;\n    private editingSection: HTMLDivElement;\n    private savingSection: HTMLDivElement;\n    private saveError: HTMLDivElement;\n    private formContainer: HTMLDivElement;\n    private beschreibungVorschlagSubscription: () => void;\n    private betreffVorschlagDebouncer = new Debouncer();\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.zurueckLink = this.querySelector(\"#zurueck-zum-kontokorrent\");\n        this.appBar = this.querySelector(AppBarTagName);\n        this.bezahlungEintragenForm = this.querySelector(BezahlungEintragenFormTagName);\n        this.saveButton = this.querySelector(\"#bezahlung-eintragen__save\");\n        this.editingSection = this.querySelector(\"#bezahlung-eintragen__edit\");\n        this.savingSection = this.querySelector(\"#bezahlung-eintragen__saving\");\n        this.saveError = this.querySelector(\"#save-error\");\n        this.formContainer = this.querySelector(\"#bezahlung-eintragen__form-container\");\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.bezahlungActionCreator = bezahlungActionCreatorFactory(serviceLocator);\n        this.appBar.addServices(serviceLocator);\n    }\n\n    connectedCallback() {\n        this.kontokorrentsSubscription = this.store.subscribe(\"kontokorrents\", s => this.applyStoreState(s));\n        this.beschreibungVorschlagSubscription = this.store.subscribe(\"beschreibungVorschlaege\", s => this.beschreibungVorschlaegeChanged(s));\n        this.appBar.addEventListener(\"gotokontokorrent\", (e: CustomEvent) => {\n            this.bezahlungActionCreator.bezahlungEintragenKontokorrentChanged(e.detail);\n        });\n        this.bezahlungActionCreator.bezahlungEintragenGeoeffnet();\n        convertLinks([this.zurueckLink], this.routingActionCreator);\n        this.applyStoreState(this.store.state);\n        this.saveEventListener = () => this.save();\n        this.saveButton.addEventListener(\"click\", this.saveEventListener);\n        this.bezahlungEintragenForm.addEventListener(\"betreffChanged\", (ev: CustomEvent) => this.betreffChanged(ev.detail));\n    }\n    async betreffChanged(betreff: string) {\n            try {\n                await this.betreffVorschlagDebouncer.trigger(200);\n            }\n            catch {\n                //aborted\n            }\n            await this.bezahlungActionCreator.getBeschreibungVorschlaege(this.kontokorrentId, betreff);\n    }\n    private beschreibungVorschlaegeChanged(s: State): void {\n        if (s.beschreibungVorschlaege?.kontokorrentId == this.kontokorrentId) {\n            this.bezahlungEintragenForm.beschreibungVorschlaege = s.beschreibungVorschlaege.vorschlaege.slice(0,10);\n        }\n        else {\n            this.bezahlungEintragenForm.beschreibungVorschlaege = [];\n        }\n    }\n\n    async save() {\n        if (this.bezahlungEintragenForm.validate()) {\n            let data = this.bezahlungEintragenForm.getData();\n            await this.bezahlungActionCreator.bezahlungHinzufuegen(this.kontokorrentId, data);\n            this.routingActionCreator.navigateKontokorrent(this.kontokorrentId, true);\n        }\n        else {\n            this.formContainer.scrollTop = 0;\n        }\n    }\n\n    private applyStoreState(s: State) {\n        this.zurueckLink.href = s.kontokorrents.activeKontokorrentId ? `kontokorrents/${s.kontokorrents.activeKontokorrentId}` : null;\n        if (s.kontokorrents.activeKontokorrentId) {\n            this.bezahlungEintragenForm.personen = s.kontokorrents.kontokorrents[s.kontokorrents.activeKontokorrentId].personen;\n            this.editingSection.style.display = s.kontokorrents.kontokorrents[s.kontokorrents.activeKontokorrentId].bezahlungAnlegen == BezahlungAnlegenStatus.Anlegen ? \"none\" : \"flex\";\n            this.savingSection.style.display = s.kontokorrents.kontokorrents[s.kontokorrents.activeKontokorrentId].bezahlungAnlegen != BezahlungAnlegenStatus.Anlegen ? \"none\" : \"flex\";\n            this.saveError.hidden = s.kontokorrents.kontokorrents[s.kontokorrents.activeKontokorrentId].bezahlungAnlegen != BezahlungAnlegenStatus.Failed;\n        }\n        this.kontokorrentId = s.kontokorrents.activeKontokorrentId;\n    }\n\n    disconnectedCallback() {\n        this.kontokorrentsSubscription();\n        this.beschreibungVorschlagSubscription();\n        this.saveButton.removeEventListener(\"click\", this.saveEventListener);\n    }\n}\n\ncustomElements.define('bezahlung-eintragen-page', BezahlungEintragenPage);\n","'use strict';\nvar $ = require('../internals/export');\n\n// `URL.prototype.toJSON` method\n// https://url.spec.whatwg.org/#dom-url-tojson\n$({ target: 'URL', proto: true, enumerable: true }, {\n  toJSON: function toJSON() {\n    return URL.prototype.toString.call(this);\n  }\n});\n","// Module\nvar code = \"<input type=\\\"radio\\\" class=\\\"bezahlende-person-radio__input\\\"/> <label class=\\\"bezahlende-person-radio\\\"> <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\"> <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/> <path d=\\\"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z\\\"/> </svg> <span data-ref=\\\"label\\\"></span> </label>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<form novalidate class=\\\"bezahlung-eintragen-form\\\" id=\\\"bezahlung-eintragen-form\\\"> <div id=\\\"betreff-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Es muss ein <label class=\\\"alert__field-label\\\" for=\\\"betreff\\\">Betreff</label> angegeben werden.</div> <div id=\\\"betrag-invalid-error\\\" class=\\\"alert alert--error\\\" hidden> Der <label class=\\\"alert__field-label\\\" for=\\\"betrag\\\">Betrag</label> ist ungültig.</div> <div id=\\\"betrag-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Es muss ein <label class=\\\"alert__field-label\\\" for=\\\"betrag\\\">Betrag</label> angegeben werden.</div> <span id=\\\"zahlende-person-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Wähle eine Person aus die bezahlt. </span> <div id=\\\"empfaenger-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Wähle Personen aus für die bezahlt wird. </div> <label for=\\\"betrag\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Betrag</label> <input name=\\\"betrag\\\" id=\\\"betrag\\\" type=\\\"number\\\" novalidate step=\\\"any\\\"> <label for=\\\"zahlende-person\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Diese Person zahlt</label> <div id=\\\"zahlende-person-auswahl\\\"></div> <div class=\\\"bezahlung-eintragen-form__empfaenger-row\\\"> <label for=\\\"empfaenger\\\" class=\\\"bezahlung-eintragen-form__label\\\">für diese Personen</label> <mdc-checkbox checkbox-id=\\\"alle\\\" checkbox-name=\\\"alle\\\" id=\\\"alle-check\\\"></mdc-checkbox> <label for=\\\"alle\\\">alle</label> </div> <div id=\\\"empfaenger-auswahl\\\"></div> <label for=\\\"betreff\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Betreff</label> <div id=\\\"beschreibung-vorschlaege\\\" class=\\\"bezahlung-eintragen-form__vorschlaege\\\"></div> <input name=\\\"betreff\\\" id=\\\"betreff\\\" required=\\\"\\\" autocomplete=\\\"off\\\" type=\\\"text\\\"> <label for=\\\"datum\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Datum</label> <input name=\\\"datum\\\" id=\\\"datum\\\" required=\\\"\\\" type=\\\"date\\\"> </form>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<app-bar></app-bar> <div id=\\\"bezahlung-eintragen__edit\\\" class=\\\"bezahlung-eintragen__edit\\\"> <div class=\\\"bezahlungen-page-menu\\\"> <a id=\\\"zurueck-zum-kontokorrent\\\" class=\\\"button\\\"> <span class=\\\"material-icons\\\"> arrow_back </span> zurück </a> <button class=\\\"button\\\" title=\\\"speichern\\\" id=\\\"bezahlung-eintragen__save\\\"> <span class=\\\"material-icons\\\"> save </span> speichern </button> </div> <div class=\\\"bezahlung-eintragen__form-container\\\" id=\\\"bezahlung-eintragen__form-container\\\"> <div id=\\\"save-error\\\" class=\\\"alert alert--error\\\" hidden>Zahlung konnte nicht gespeichert werden. </div> <bezahlung-eintragen-form> </bezahlung-eintragen-form> </div> </div> <div id=\\\"bezahlung-eintragen__saving\\\" class=\\\"bezahlung-eintragen__saving\\\"> <span class=\\\"spinner\\\"></span> <span>wird gespeichert</span> </div>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<mdc-checkbox></mdc-checkbox> <label></label>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<div class=\\\"mdc-touch-target-wrapper\\\"> <div class=\\\"mdc-checkbox mdc-checkbox--touch\\\"> <input type=\\\"checkbox\\\" class=\\\"mdc-checkbox__native-control\\\"/> <div class=\\\"mdc-checkbox__background\\\"> <svg class=\\\"mdc-checkbox__checkmark\\\" viewBox=\\\"0 0 24 24\\\"> <path class=\\\"mdc-checkbox__checkmark-path\\\" fill=\\\"none\\\" d=\\\"M1.73,12.91 8.1,19.28 22.79,4.59\\\"/> </svg> <div class=\\\"mdc-checkbox__mixedmark\\\"></div> </div> <div class=\\\"mdc-checkbox__ripple\\\"></div> </div> </div>\";\n// Exports\nmodule.exports = code;"],"sourceRoot":""}