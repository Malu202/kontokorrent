{"version":3,"sources":["webpack://kontokorrent/./node_modules/idb/build/esm/wrap-idb-value.js","webpack://kontokorrent/./node_modules/idb/build/esm/index.js","webpack://kontokorrent/./src/lib/KontokorrentDatabase.ts","webpack://kontokorrent/./src/utils/sortBy.ts"],"names":["idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","target","prop","receiver","IDBTransaction","get","objectStoreNames","undefined","objectStore","set","value","has","transformCachableValue","func","IDBDatabase","prototype","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","args","apply","unwrap","this","storeNames","tx","call","sort","done","Promise","resolve","reject","unlisten","removeEventListener","complete","error","DOMException","addEventListener","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","c","Proxy","IDBRequest","request","promise","success","result","then","catch","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","async","storeName","store","index","shift","returnVal","oldTraps","KontokorrentsStore","AppStateStore","AktionenStore","KontokorrentDatabase","cb","db","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","openDB","createObjectStore","keyPath","createIndex","put","id","zuletztGesehenerKontokorrentId","accesstokens","accountinfo","close","withInitialized","sortBy","getAll","k","aktionen","length","tasks","map","v","kontokorrentId","a","add","all","appState","kks","getKontokorrents","kontokorrents","existing","filter","e","d","delete","newIds","ex","find","push","combined","personen","oeffentlicherName","kk","getFromIndex","getAllFromIndex","clear","tokenType","t","type","lastTimeStamp","durability","timestamp","console","accountInfo","sortByAlphabetically","collection","keySelector","b","toLowerCase","localeCompare"],"mappings":"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","file":"529e9af6319bac30dd65.bundle.js","sourcesContent":["const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        const returnVal = await target[targetFuncName](...args);\n        if (isWrite)\n            await tx.done;\n        return returnVal;\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { openDB, IDBPDatabase, DBSchema, unwrap } from \"idb\";\nimport { KontokorrentDbModel } from \"./KontokorrentDbModel\";\nimport { sortByAlphabetically } from \"../utils/sortBy\";\nimport { Aktion } from \"../api/Aktion\";\nimport { AktionDbModel } from \"./AktionDbModel\";\nimport { AccountInfo } from \"./AccountInfo\";\n\n\nconst KontokorrentsStore = \"KontokorrentsStore\";\nconst AppStateStore = \"AppStateStore\";\nconst AktionenStore = \"AktionenStore\";\n\ninterface AccessTokenInfo {\n    timestamp: number;\n    value: string;\n    type: \"google\" | \"anonymous\";\n}\n\ninterface AppSettings {\n    id: number;\n    zuletztGesehenerKontokorrentId: string\n    accesstokens: AccessTokenInfo[];\n    accountinfo: AccountInfo;\n}\n\ninterface KontokorrentDbSchema extends DBSchema {\n    KontokorrentsStore: {\n        key: string;\n        value: KontokorrentDbModel;\n        indexes: { \"oeffentlicherName\": string };\n    };\n    AppStateStore: {\n        value: AppSettings;\n        key: number;\n    };\n    AktionenStore: {\n        key: [number, string],\n        value: AktionDbModel,\n        indexes: { \"kontokorrentId\": string };\n    };\n}\n\n\nconst initialSettings: (() => AppSettings) = () => { return { id: 0, zuletztGesehenerKontokorrentId: null, accesstokens: [], accountinfo: null } };\nexport class KontokorrentDatabase {\n\n    private async withInitialized<T>(cb: (db: IDBPDatabase<KontokorrentDbSchema>) => Promise<T>) {\n        let db = await openDB<KontokorrentDbSchema>(\"kontokorrent-db\", 3, {\n            upgrade(db, oldVersion: number, newVersion: number) {\n                if (oldVersion < 1) {\n                    let store = db.createObjectStore(KontokorrentsStore, { keyPath: \"id\" });\n                    store.createIndex(\"oeffentlicherName\", \"oeffentlicherName\");\n                }\n                if (oldVersion < 2) {\n                    let store = db.createObjectStore(AppStateStore, { keyPath: \"id\" });\n                    store.put(initialSettings());\n                }\n                if (oldVersion < 3) {\n                    let store = db.createObjectStore(AktionenStore, { keyPath: [\"laufendeNummer\", \"kontokorrentId\"] });\n                    store.createIndex(\"kontokorrentId\", \"kontokorrentId\");\n                }\n            },\n        });\n        try {\n            return await cb(db);\n        }\n        finally {\n            db.close();\n        }\n    }\n\n    async getKontokorrents(): Promise<KontokorrentDbModel[]> {\n        return await this.withInitialized(async db => {\n            return sortByAlphabetically((await db.getAll(KontokorrentsStore)), k => k.name);\n        });\n    }\n\n    async addAktionen(id: string, aktionen: Aktion[]): Promise<void> {\n        if (!aktionen.length) {\n            return;\n        }\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AktionenStore, \"readwrite\");\n            let tasks = aktionen.map(v => {\n                let a: AktionDbModel = {\n                    ...v,\n                    kontokorrentId: id\n                };\n                return a;\n            }).map(a => tx.store.add(a));\n            await Promise.all(tasks);\n            await tx.done;\n        });\n    }\n\n    async getZuletztGesehenerKontokorrentId(): Promise<string> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            if (appState.zuletztGesehenerKontokorrentId) {\n                return appState.zuletztGesehenerKontokorrentId;\n            }\n            else {\n                let kks = await (await this.getKontokorrents());\n                if (kks.length) {\n                    return kks[0].id;\n                }\n                return null;\n            }\n        });\n    }\n\n    async setZuletztGesehenerKontokorrentId(id: string): Promise<void> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            appState.zuletztGesehenerKontokorrentId = id;\n            await db.put(AppStateStore, appState);\n        });\n    }\n\n    async setKontokorrents(kontokorrents: {\n        name: string, id: string, personen: { name: string, id: string }[],\n        oeffentlicherName: string\n    }[]): Promise<string[]> {\n        return await this.withInitialized(async db => {\n            let existing: KontokorrentDbModel[] = (await db.getAll(KontokorrentsStore));\n            for (let v of existing.filter(e => !kontokorrents.some(d => e.id === d.id))) {\n                await db.delete(KontokorrentsStore, v.id);\n            }\n            let newIds: string[] = [];\n            for (let v of kontokorrents) {\n                let ex = existing.find(d => d.id == v.id);\n                if (!ex) {\n                    newIds.push(v.id);\n                }\n                let combined = {\n                    ...ex, name: v.name, personen: v.personen, id: v.id,\n                    oeffentlicherName: v.oeffentlicherName\n                };\n                await db.put(KontokorrentsStore, combined);\n            }\n            return newIds;\n        });\n    }\n\n    async addKontokorrent(kk: KontokorrentDbModel): Promise<void> {\n        return await this.withInitialized(async db => {\n            if (!await db.get(KontokorrentsStore, kk.id)) {\n                await db.add(KontokorrentsStore, kk);\n            }\n        });\n    }\n\n    async getKontokorrent(id: string): Promise<KontokorrentDbModel> {\n        return await this.withInitialized(async db => {\n            return <KontokorrentDbModel>await db.get(KontokorrentsStore, id);\n        });\n    }\n\n    async getPerOeffentlichName(id: string): Promise<KontokorrentDbModel> {\n        return await this.withInitialized(async db => {\n            return <KontokorrentDbModel>await db.getFromIndex(KontokorrentsStore, \"oeffentlicherName\", id);\n        });\n    }\n\n    async getAktionen(id: string): Promise<AktionDbModel[]> {\n        return await this.withInitialized(async db => {\n            return await db.getAllFromIndex(AktionenStore, \"kontokorrentId\", id);\n        });\n    }\n\n    async clear() {\n        return await this.withInitialized(async db => {\n            await db.clear(AktionenStore);\n            await db.clear(KontokorrentsStore);\n            await db.put(AppStateStore, initialSettings());\n        });\n    }\n\n    async getAccessToken(tokenType: \"anonymous\" | \"google\"): Promise<AccessTokenInfo> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            return (appState.accesstokens || []).find(t => t.type === tokenType);\n        });\n    }\n\n    async updateAccessTokenIfNewer(tokenType: \"anonymous\" | \"google\", value: string, lastTimeStamp: number): Promise<boolean> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\", { durability: \"strict\" });\n            let appState = await tx.store.get(0);\n            if (!appState.accesstokens) {\n                appState.accesstokens = [];\n            }\n            let existing = appState.accesstokens.find(t => t.type === tokenType);\n            if (!existing) {\n                appState.accesstokens.push({\n                    timestamp: 1,\n                    type: tokenType,\n                    value: value\n                });\n            } else if (existing.timestamp == lastTimeStamp) {\n                existing.value = value;\n                existing.timestamp++;\n            }\n            else {\n                console.error(`The accesstoken of type ${tokenType} was already updated since reading.`);\n                await tx.done;\n                return false;\n            }\n            await tx.store.put(appState);\n            await tx.done;\n            return true;\n        });\n    }\n\n    async setAccountInfo(accountInfo: AccountInfo): Promise<void> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\");\n            let appState = await tx.store.get(0);\n            appState.accountinfo = accountInfo;\n            await tx.store.put(appState);\n            await tx.done;\n        });\n    }\n\n    async getAccountInfo(): Promise<AccountInfo> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readonly\");\n            let appState = await tx.store.get(0);\n            return appState?.accountinfo;\n        });\n    }\n\n    async clearAccountInfo(): Promise<void> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\");\n            let appState = await tx.store.get(0);\n            appState.accountinfo = null;\n            appState.accesstokens = [];\n            await tx.store.put(appState);\n            await tx.done;\n        });\n    }\n}\n\n","export function sortByAlphabetically<T, P extends keyof T>(collection: T[], keySelector: (x: T) => string): T[] {\n    return collection.sort((a, b) => keySelector(a).toLowerCase().localeCompare(keySelector(b).toLowerCase()));\n}"],"sourceRoot":""}