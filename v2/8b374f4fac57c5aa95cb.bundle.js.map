{"version":3,"file":"8b374f4fac57c5aa95cb.bundle.js","mappings":"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","sources":["webpack://kontokorrent/./src/components/CreateKontokorrent/CreateKontokorrent.html","webpack://kontokorrent/./src/components/PersonenListe/PersonenListenEintrag.ts","webpack://kontokorrent/./src/components/PersonenListe/PersonenListenEintrag.html","webpack://kontokorrent/./src/components/PersonenListe/PersonenListe.ts","webpack://kontokorrent/./src/components/PersonenListe/PersonenListe.html","webpack://kontokorrent/./src/components/CreateKontokorrent/CreateKontokorrent.ts","webpack://kontokorrent/./src/components/convertLinks.ts","webpack://kontokorrent/./src/components/ui-components/popup/popup.ts","webpack://kontokorrent/./src/components/ui-components/tip-button/tip-button.ts","webpack://kontokorrent/./src/state/actions/KontokorrentHinzufuegenActionCreator.ts"],"sourcesContent":["// Module\nvar code = \"<div class=\\\"create-event-box\\\" id=\\\"create-event-box\\\"> <h1>Gruppe erstellen</h1> <div id=\\\"empty-name-error\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Für alle Personen Namen angeben</div> <div id=\\\"person-count-error\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Mindestens zwei Personen angeben </div> <div id=\\\"event-create-error\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Kontokorrent konnte nicht erstellt werden</div> <div id=\\\"event-name-duplicate\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Ein Kontokorrent mit diesem Namen exisitert bereits</div> <div id=\\\"event-name-error\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Eventname angeben</div> <div id=\\\"oeffentlicher-name-error\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Öfferntlicher Name: Nur Kleinbuchstaben und Zahlen</div> <div id=\\\"person-name-duplicate-error\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Personennamen müssen unterschiedlich sein</div> <div id=\\\"account-creation-failed\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Account konnte nicht erstellt werden</div> <label for=\\\"event-name\\\" class=\\\"create-event-box__label\\\">Anzeigename</label> <div class=\\\"create-event-box__input-with-tip\\\"> <input type=\\\"text\\\" id=\\\"event-name\\\" name=\\\"event-name\\\"> <tip-button popup-id=\\\"eventNameExplainer\\\" title=\\\"Eventname erklärung\\\"> <span class=\\\"material-icons\\\"> info </span> </tip-button> <app-popup id=\\\"eventNameExplainer\\\" class=\\\"tip tip--with-input\\\"> Wie soll die Gruppe heißen? Unter diesem Namen wird die Gruppe nach dem einloggen angezeigt. Kann, muss aber nicht mit dem öffentlichen Namen übereinstimmen. </app-popup> </div> <label for=\\\"event-name\\\" class=\\\"create-event-box__label\\\" style=\\\"display:none\\\">Oeffentlich</label> <input type=\\\"checkbox\\\" id=\\\"oeffentlich\\\" name=\\\"oeffentlich\\\" checked=\\\"checked\\\" disabled=\\\"disabled\\\" style=\\\"display:none\\\"> <div id=\\\"oeffentlich-box\\\"> <label for=\\\"oeffentlicher-name\\\" class=\\\"create-event-box__label\\\">Öffentlicher Name</label> <div class=\\\"create-event-box__input-with-tip\\\"> <input type=\\\"text\\\" id=\\\"oeffentlicher-name\\\" name=\\\"oeffentlicher-name\\\"> <tip-button popup-id=\\\"oeffentlicherNameExplainer\\\" title=\\\"öffentlicher Name Erklärung\\\"> <span class=\\\"material-icons\\\"> info </span> </tip-button> <app-popup id=\\\"oeffentlicherNameExplainer\\\" class=\\\"tip tip--with-input\\\"> Gib hier den Namen, den die anderen Gruppenmitglieder verwenden um sich einzuloggen. (\\\"Passwort\\\") </app-popup> </div> </div> <label class=\\\"create-event-box__label\\\">Personen</label> <app-personen-liste id=\\\"personen-liste\\\"></app-personen-liste> <div id=\\\"creating\\\" class=\\\"create-event-box__processing\\\" style=\\\"display:none\\\"> <span class=\\\"spinner\\\"></span> </div> <div> <button id=\\\"create-button\\\" class=\\\"button\\\">Erstellen</button> </div> <div> <a id=\\\"home-button\\\" class=\\\"button\\\" href=\\\"\\\"> <span class=\\\"material-icons\\\"> home </span> zurück </a> </div> </div>\";\n// Exports\nexport default code;","import template from \"./PersonenListenEintrag.html\";\n\nexport class PersonenListenEintrag extends HTMLElement {\n    private removeButton: HTMLButtonElement;\n    private nameInput: HTMLInputElement;\n    private rendered = false;\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.innerHTML = template;\n            this.rendered = true;\n            this.removeButton = this.querySelector(\"#remove\");\n            this.nameInput = this.querySelector(\"#name\");\n        }\n        this.nameInput.addEventListener(\"change\", () => {\n            this.dispatchEvent(new Event(\"change\"));\n        });\n        this.removeButton.addEventListener(\"click\", () => {\n            this.dispatchEvent(new CustomEvent(\"onremove\"));\n        })\n    }\n\n    get name() {\n        return this.nameInput.value;\n    }\n\n    disconnectedCallback() {\n\n    }\n\n}\nexport const PersonenListenEintragTagName = 'app-personen-listen-eintrag';\ncustomElements.define(PersonenListenEintragTagName, PersonenListenEintrag);\n","// Module\nvar code = \"<input type=\\\"text\\\" id=\\\"name\\\" placehoder=\\\"Name\\\"/> <button id=\\\"remove\\\" class=\\\"button\\\"> <span class=\\\"material-icons\\\"> delete </span> entfernen </button>\";\n// Exports\nexport default code;","import template from \"./PersonenListe.html\";\nimport { PersonenListenEintrag, PersonenListenEintragTagName } from \"./PersonenListenEintrag\";\n\nexport class PersonenListe extends HTMLElement {\n    private addPersonButton: HTMLButtonElement;\n    private personenListe: HTMLUListElement;\n    private rendered = false;\n\n    constructor() {\n        super();\n    }\n\n    get personen() {\n        let names: string[] = [];\n        this.personenListe.querySelectorAll(PersonenListenEintragTagName).forEach((v: PersonenListenEintrag) => names.push(v.name));\n        return names;\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.innerHTML = template;\n            this.addPersonButton = this.querySelector(\"#add-person\");\n            this.personenListe = this.querySelector(\"#personen-liste\");\n            this.rendered = true;\n        }\n        this.addPersonButton.addEventListener(\"click\", () => {\n            let li = document.createElement(\"li\");\n            let e = new PersonenListenEintrag();\n            li.appendChild(e);\n            this.personenListe.appendChild(li);\n            e.addEventListener(\"onremove\", () => {\n                this.personenListe.removeChild(li);\n            });\n        });\n    }\n\n    disconnectedCallback() {\n\n    }\n\n}\n\ncustomElements.define('app-personen-liste', PersonenListe);\n","// Module\nvar code = \"<ul id=\\\"personen-liste\\\" class=\\\"mdc-list mdc-list--non-interactive\\\"> </ul> <button type=\\\"button\\\" class=\\\"button\\\" id=\\\"add-person\\\"> <span class=\\\"material-icons\\\"> add </span> Person hinzufügen </button>\";\n// Exports\nexport default code;","import template from \"./CreateKontokorrent.html\";\nimport { Store } from \"../../state/Store\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { State } from \"../../state/State\";\nimport { AccountActionCreator, accountActionCreatorFactory } from \"../../state/actions/AccountActionCreator\";\nimport \"../PersonenListe/PersonenListe\";\nimport { PersonenListe } from \"../PersonenListe/PersonenListe\";\nimport { v4 as uuid } from \"uuid\";\nimport \"./CreateKontokorrent.scss\";\nimport { KontokorrentListenActionCreator, kontokorrentListenActionCreatorFactory } from \"../../state/actions/KontokorrentListenActionCreator\";\nimport { KontokorrentHinzufuegenActionCreator, kontokorrentHinzufuegenActionCreatorFactory } from \"../../state/actions/KontokorrentHinzufuegenActionCreator\";\nimport \"../ui-components/popup/popup\";\nimport \"../ui-components/tip-button/tip-button\";\nimport { convertLinks } from \"../convertLinks\";\n\nexport class CreateKontokorrent extends HTMLElement {\n    store: Store;\n    subscription: () => void;\n    routingActionCreator: RoutingActionCreator;\n    private accountActionCreator: AccountActionCreator;\n\n\n    private personenListe: PersonenListe;\n    private emptyNameError: HTMLDivElement;\n    private eventCreateError: HTMLDivElement;\n    private personCountError: HTMLDivElement;\n    private eventNameError: HTMLDivElement;\n    private createButton: HTMLButtonElement;\n    private eventName: HTMLInputElement;\n    private readonly kontokorrentId: string;\n    private creating: HTMLDivElement;\n    private oeffentlicherName: HTMLInputElement;\n    private oeffentlich: HTMLInputElement;\n    private oeffentlichBox: HTMLDivElement;\n    private oeffentlicherNameManuell: boolean;\n    private oeffentlicherNameError: HTMLDivElement;\n    private eventNameDuplicate: HTMLDivElement;\n    private kontokorrentHinzufuegenActionCreator: KontokorrentHinzufuegenActionCreator;\n    private accountCreationFailed: HTMLDivElement;\n    private personNameDuplicateError: HTMLDivElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.kontokorrentId = uuid();\n        this.oeffentlicherNameManuell = false;\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.accountActionCreator = accountActionCreatorFactory(serviceLocator);\n        this.kontokorrentHinzufuegenActionCreator = kontokorrentHinzufuegenActionCreatorFactory(serviceLocator);\n    }\n\n    connectedCallback() {\n        let element = this;\n        this.personenListe = element.querySelector(\"#personen-liste\");\n        this.emptyNameError = element.querySelector(\"#empty-name-error\");\n        this.eventCreateError = element.querySelector(\"#event-create-error\");\n        this.personCountError = element.querySelector(\"#person-count-error\");\n        this.eventNameError = element.querySelector(\"#event-name-error\");\n        this.createButton = element.querySelector(\"#create-button\");\n        this.eventName = element.querySelector(\"#event-name\");\n        this.creating = element.querySelector(\"#creating\");\n        this.oeffentlicherName = element.querySelector(\"#oeffentlicher-name\");\n        this.oeffentlich = element.querySelector(\"#oeffentlich\");\n        this.oeffentlichBox = element.querySelector(\"#oeffentlich-box\");\n        this.oeffentlicherNameError = element.querySelector(\"#oeffentlicher-name-error\");\n        this.eventNameDuplicate = element.querySelector(\"#event-name-duplicate\");\n        this.accountCreationFailed = element.querySelector(\"#account-creation-failed\");\n        this.personNameDuplicateError = element.querySelector(\"#person-name-duplicate-error\");\n\n\n        this.createButton.addEventListener(\"click\", this.createEvent.bind(this));\n\n        this.oeffentlich.addEventListener(\"change\", () => {\n            this.oeffentlichBox.style.display = this.oeffentlich.checked ? \"block\" : \"none\";\n        });\n\n        this.eventName.addEventListener(\"change\", () => {\n            if (!this.oeffentlicherNameManuell) {\n                this.oeffentlicherName.value = (this.eventName.value || \"\").toLowerCase();\n            }\n        });\n\n        this.oeffentlicherName.addEventListener(\"change\", () => {\n            this.oeffentlicherNameManuell = true;\n        });\n\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.applyStoreState(this.store.state);\n        convertLinks(element.querySelectorAll(\"a\"), this.routingActionCreator);\n    }\n\n    async createEvent() {\n        let eventName = this.eventName.value;\n        let personNames = this.personenListe.personen;\n        this.eventNameError.style.display = eventName ? \"none\" : \"block\";\n        let personCountOk = personNames.length >= 2;\n        this.personCountError.style.display = personCountOk ? \"none\" : \"block\";\n        let personNameError = personNames.some(v => !v);\n        this.emptyNameError.style.display = personNameError ? \"block\" : \"none\";\n        let oeffentlicherNameError = this.oeffentlich.checked && (!this.oeffentlicherName.value || !/^[a-z0-9]+$/.test(this.oeffentlicherName.value));\n        this.oeffentlicherNameError.style.display = oeffentlicherNameError ? \"block\" : \"none\";\n        let personNameDuplicateError = (personNames.some((item, index) => personNames.indexOf(item) != index));\n        this.personNameDuplicateError.style.display = personNameDuplicateError ? \"block\" : \"none\";\n        if (eventName && personCountOk && !personNameError && !oeffentlicherNameError && !personNameDuplicateError) {\n            if (await this.accountActionCreator.ensureAccount()) {\n                if (await this.kontokorrentHinzufuegenActionCreator.kontokorrentErstellen(this.kontokorrentId, this.eventName.value, this.oeffentlich.checked ? this.oeffentlicherName.value : null, personNames)) {\n                    this.routingActionCreator.navigateKontokorrent(this.kontokorrentId);\n                };\n            }\n        } else {\n            document.scrollingElement.scroll({ top: 0, behavior: \"smooth\" });\n        }\n    }\n\n    private applyStoreState(state: State) {\n        this.creating.style.display = state.kontokorrents.creating || state.account.accountCreating ? \"block\" : \"none\";\n        this.eventCreateError.style.display = state.kontokorrents.creationFailed ? \"block\" : \"none\";\n        this.eventNameDuplicate.style.display = state.kontokorrents.creationFailed && state.kontokorrents.creationFailed.exists ? \"block\" : \"none\";\n        this.accountCreationFailed.style.display = !state.account.accountCreating && state.account.accountCreationFailed ?\n            \"block\" : \"none\";\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n    }\n}\n\ncustomElements.define('app-create-event', CreateKontokorrent);","import { RoutingActionCreator } from \"../state/actions/RoutingActionCreator\";\n\nexport function convertLinks(elements: Array<HTMLAnchorElement> | NodeListOf<HTMLAnchorElement>, routingActionCreator: RoutingActionCreator) {\n    elements.forEach((e: HTMLAnchorElement) => {\n        e.addEventListener(\"click\", ev => {\n            ev.preventDefault();\n            routingActionCreator.navigate(e.getAttribute(\"href\"));\n        });\n    });\n}","export class Popup extends HTMLElement {\n    private popupShown: boolean = false;\n    constructor() {\n        super();\n        this.keyListener = this.keyListener.bind(this);\n        this.clickListener = this.clickListener.bind(this);\n    }\n\n    connectedCallback() {\n        this.updateStyles();\n    }\n\n    private keyListener(ev: KeyboardEvent) {\n        if (ev.key == \"Escape\") {\n            this.hide();\n        }\n    }\n\n    private clickListener(ev: MouseEvent | TouchEvent) {\n        if (!this.contains(<Element>(event.target))) {\n            this.hide();\n        }\n    }\n\n    public hide() {\n        if (this.popupShown) {\n            document.removeEventListener(\"keydown\", this.keyListener);\n            document.removeEventListener(\"click\", this.clickListener);\n            this.popupShown = false;\n            this.updateStyles();\n        }\n    }\n\n    public show() {\n        if (!this.popupShown) {\n            document.addEventListener(\"keydown\", this.keyListener);\n            document.addEventListener(\"click\", this.clickListener);\n            this.popupShown = true;\n            this.updateStyles();\n        }\n    }\n\n    private updateStyles() {\n        this.style.display = this.popupShown ? \"block\" : \"none\";\n    }\n\n    public toggle() {\n        if (!this.popupShown) {\n            this.show();\n        }\n        else {\n            this.hide();\n\n        }\n    }\n\n    disconnectedCallback() {\n        this.hide();\n    }\n}\ncustomElements.define(\"app-popup\", Popup);\n","import { Popup } from \"../popup/popup\";\n\nexport const PopupIdAttribute = \"popup-id\";\n\nexport class TipButton extends HTMLElement {\n    private popupId: string;\n    constructor() {\n        super();\n        this.clickListener = this.clickListener.bind(this);\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.popupId = this.getAttribute(PopupIdAttribute);\n\n    }\n\n    static get observedAttributes() {\n        return [PopupIdAttribute];\n    }\n\n    connectedCallback() {\n        this.addEventListener(\"click\", this.clickListener);\n    }\n\n    private clickListener(ev: MouseEvent) {\n        let popup: Popup = document.querySelector(`#${this.popupId}`);\n        popup.toggle();\n        ev.stopPropagation();\n    }\n\n\n    disconnectedCallback() {\n        this.removeEventListener(\"click\", this.clickListener);\n    }\n}\ncustomElements.define(\"tip-button\", TipButton);\n","import { ApiClient } from \"../../api/ApiClient\";\nimport { KontokorrentInfo } from \"../../api/KontokorrentInfo\";\nimport { NeuerKontokorrentRequest } from \"../../api/NeuerKontokorrentRequest\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { Action } from \"../lib/Action\";\nimport { Store } from \"../Store\";\nimport { ActionNames } from \"./ActionNames\";\nimport { v4 as uuid } from \"uuid\";\n\nexport class KontokorrentCreationFailed implements Action {\n    readonly type = ActionNames.KontokorrentCreationFailed;\n    constructor(public exists: boolean) {\n\n    }\n}\n\nexport class KontokorrentCreating implements Action {\n    readonly type = ActionNames.KontokorrentCreating;\n    constructor() {\n\n    }\n}\n\nexport class KontokorrentCreated implements Action {\n    readonly type = ActionNames.KontokorrentCreated;\n    constructor(public kontokorrent: KontokorrentInfo) {\n\n    }\n}\n\nexport class KontokorrentHinzufuegenFailed implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegenFailed;\n    constructor(public notFound: boolean) {\n\n    }\n}\n\nexport class KontokorrentHinzufuegen implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegen;\n    constructor() {\n\n    }\n}\n\nexport class KontokorrentHinzufuegenSuccess implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegenSuccess;\n    constructor(public kontokorrents: KontokorrentInfo[]) {\n\n    }\n}\n\nexport class LoginPageGeoeffnet implements Action {\n    readonly type = ActionNames.LoginPageGeoeffnet;\n    constructor() {\n\n    }\n}\n\nexport type KontokorrentHinzufuegenActions = KontokorrentCreationFailed\n    | KontokorrentCreating\n    | KontokorrentCreated\n    | KontokorrentHinzufuegenFailed\n    | KontokorrentHinzufuegen\n    | KontokorrentHinzufuegenSuccess\n    | LoginPageGeoeffnet;\n\nexport class KontokorrentHinzufuegenActionCreator {\n\n    constructor(private store: Store,\n        private apiClient: ApiClient,\n        private db: KontokorrentDatabase) {\n\n    }\n\n    loginPageGeoeffnet() {\n        this.store.dispatch(new LoginPageGeoeffnet());\n    }\n\n    async kontokorrentErstellen(id: string, name: string, oeffentlicherName: string, personen: string[]) {\n        let request: NeuerKontokorrentRequest = {\n            name,\n            id,\n            oeffentlicherName,\n            personen: personen.map(v => { return { name: v, id: uuid() } })\n        };\n        this.store.dispatch(new KontokorrentCreating());\n        let res = await this.apiClient.neuerKontokorrent(request);\n        if (!res.success) {\n            this.store.dispatch(new KontokorrentCreationFailed(res.exists));\n        }\n        else {\n            await this.db.addKontokorrent({\n                id: id,\n                name: name,\n                personen: request.personen,\n                oeffentlicherName: oeffentlicherName\n            });\n            this.store.dispatch(new KontokorrentCreated({\n                id: id,\n                name: name,\n                personen: request.personen,\n                oeffentlicherName: oeffentlicherName\n            }));\n            return true;\n        }\n        return false;\n    }\n\n    async kontokorrentHinzufuegen(oeffentlicherName: string) {\n        let kk = await this.db.getPerOeffentlichName(oeffentlicherName);\n        if (null != kk) {\n            return kk.id;\n        }\n        this.store.dispatch(new KontokorrentHinzufuegen());\n        try {\n            let res = await this.apiClient.kontokorrentHinzufuegen(oeffentlicherName, null);\n            if (null == res) {\n                this.store.dispatch(new KontokorrentHinzufuegenFailed(true));\n            }\n            else {\n                let newIds = await this.db.setKontokorrents(res.map(v => {\n                    return {\n                        id: v.id,\n                        name: v.name,\n                        personen: v.personen,\n                        oeffentlicherName: v.oeffentlicherName\n                    };\n                }));\n                this.store.dispatch(new KontokorrentHinzufuegenSuccess(res));\n                return newIds[0];\n            }\n        }\n        catch(err) {\n            this.store.dispatch(new KontokorrentHinzufuegenFailed(false));\n        }\n        return false;\n    }\n}\n\nexport function kontokorrentHinzufuegenActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"KontokorrentHinzufuegenActionCreator\",\n        serviceLocator => new KontokorrentHinzufuegenActionCreator(\n            serviceLocator.store,\n            serviceLocator.apiClient,\n            serviceLocator.db\n        ));\n}"],"names":["PersonenListenEintrag","HTMLElement","constructor","super","rendered","connectedCallback","this","innerHTML","removeButton","querySelector","nameInput","addEventListener","dispatchEvent","Event","CustomEvent","value","disconnectedCallback","PersonenListenEintragTagName","customElements","define","PersonenListe","names","personenListe","querySelectorAll","forEach","v","push","name","addPersonButton","li","document","createElement","e","appendChild","removeChild","CreateKontokorrent","kontokorrentId","oeffentlicherNameManuell","addServices","serviceLocator","store","routingActionCreator","accountActionCreator","kontokorrentHinzufuegenActionCreator","element","emptyNameError","eventCreateError","personCountError","eventNameError","createButton","eventName","creating","oeffentlicherName","oeffentlich","oeffentlichBox","oeffentlicherNameError","eventNameDuplicate","accountCreationFailed","personNameDuplicateError","createEvent","bind","style","display","checked","toLowerCase","subscription","subscribe","state","applyStoreState","convertLinks","personNames","personen","personCountOk","length","personNameError","some","test","item","index","indexOf","scrollingElement","scroll","top","behavior","ensureAccount","kontokorrentErstellen","navigateKontokorrent","kontokorrents","account","accountCreating","creationFailed","exists","elements","ev","preventDefault","navigate","getAttribute","Popup","popupShown","keyListener","clickListener","updateStyles","key","hide","contains","event","target","removeEventListener","show","toggle","PopupIdAttribute","TipButton","attributeChangedCallback","updateAttributes","popupId","stopPropagation","KontokorrentCreationFailed","type","KontokorrentCreating","KontokorrentCreated","kontokorrent","KontokorrentHinzufuegenFailed","notFound","KontokorrentHinzufuegen","KontokorrentHinzufuegenSuccess","LoginPageGeoeffnet","KontokorrentHinzufuegenActionCreator","apiClient","db","loginPageGeoeffnet","dispatch","id","request","map","res","neuerKontokorrent","success","addKontokorrent","kk","getPerOeffentlichName","kontokorrentHinzufuegen","newIds","setKontokorrents","err","kontokorrentHinzufuegenActionCreatorFactory","get"],"sourceRoot":""}