{"version":3,"file":"56b6d67a91cf776c0030.bundle.js","mappings":"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","sources":["webpack://kontokorrent/./src/components/CreateKontokorrent/CreateKontokorrent.html","webpack://kontokorrent/./src/components/PersonenListe/PersonenListenEintrag.ts","webpack://kontokorrent/./src/components/PersonenListe/PersonenListenEintrag.html","webpack://kontokorrent/./src/components/PersonenListe/PersonenListe.ts","webpack://kontokorrent/./src/components/PersonenListe/PersonenListe.html","webpack://kontokorrent/./src/components/CreateKontokorrent/CreateKontokorrent.ts","webpack://kontokorrent/./src/components/convertLinks.ts","webpack://kontokorrent/./src/components/ui-components/popup/popup.ts","webpack://kontokorrent/./src/components/ui-components/tip-button/tip-button.ts","webpack://kontokorrent/./src/state/actions/KontokorrentHinzufuegenActionCreator.ts"],"sourcesContent":["// Module\nvar code = \"<div class=\\\"create-event-box\\\" id=\\\"create-event-box\\\"> <h1>Gruppe erstellen</h1> <div id=\\\"empty-name-error\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Für alle Personen Namen angeben</div> <div id=\\\"person-count-error\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Mindestens zwei Personen angeben </div> <div id=\\\"event-create-error\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Kontokorrent konnte nicht erstellt werden</div> <div id=\\\"event-name-duplicate\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Ein Kontokorrent mit diesem Namen exisitert bereits</div> <div id=\\\"event-name-required-error\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Eventname angeben</div> <div id=\\\"event-name-error\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Name: Nur Groß-/Kleinbuchstaben (A-Z, a-z) und Zahlen</div> <div id=\\\"person-name-duplicate-error\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Personennamen müssen unterschiedlich sein</div> <div id=\\\"account-creation-failed\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Account konnte nicht erstellt werden</div> <label for=\\\"event-name\\\" class=\\\"create-event-box__label\\\">Anzeigename</label> <div class=\\\"create-event-box__input-with-tip\\\"> <input type=\\\"text\\\" id=\\\"event-name\\\" name=\\\"event-name\\\"> <tip-button popup-id=\\\"eventNameExplainer\\\" title=\\\"Eventname erklärung\\\"> <span class=\\\"material-icons\\\"> info </span> </tip-button> <app-popup id=\\\"eventNameExplainer\\\" class=\\\"tip tip--with-input\\\"> Wie soll die Gruppe heißen? Groß- und Kleinbuchstaben (A-Z, a-z) sowie Zahlen sind erlaubt. Der Name wir auch zum Einloggen verwendet dabei wird Groß-/Kleinschreibung ignoriert. </app-popup> </div> <label class=\\\"create-event-box__label\\\">Personen</label> <app-personen-liste id=\\\"personen-liste\\\"></app-personen-liste> <div id=\\\"creating\\\" class=\\\"create-event-box__processing\\\"> <span class=\\\"spinner\\\"></span> </div> <div> <button id=\\\"create-button\\\" class=\\\"button\\\">Erstellen</button> </div> <div> <a id=\\\"home-button\\\" class=\\\"button\\\" href=\\\"\\\"> <span class=\\\"material-icons\\\"> home </span> zurück </a> </div> </div>\";\n// Exports\nexport default code;","import template from \"./PersonenListenEintrag.html\";\n\nexport class PersonenListenEintrag extends HTMLElement {\n    private removeButton: HTMLButtonElement;\n    private nameInput: HTMLInputElement;\n    private rendered = false;\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.innerHTML = template;\n            this.rendered = true;\n            this.removeButton = this.querySelector(\"#remove\");\n            this.nameInput = this.querySelector(\"#name\");\n        }\n        this.nameInput.addEventListener(\"change\", () => {\n            this.dispatchEvent(new Event(\"change\"));\n        });\n        this.removeButton.addEventListener(\"click\", () => {\n            this.dispatchEvent(new CustomEvent(\"onremove\"));\n        })\n    }\n\n    get name() {\n        return this.nameInput.value;\n    }\n\n    disconnectedCallback() {\n\n    }\n\n}\nexport const PersonenListenEintragTagName = 'app-personen-listen-eintrag';\ncustomElements.define(PersonenListenEintragTagName, PersonenListenEintrag);\n","// Module\nvar code = \"<input type=\\\"text\\\" id=\\\"name\\\" placehoder=\\\"Name\\\"/> <button id=\\\"remove\\\" class=\\\"button\\\"> <span class=\\\"material-icons\\\"> delete </span> entfernen </button>\";\n// Exports\nexport default code;","import template from \"./PersonenListe.html\";\nimport { PersonenListenEintrag, PersonenListenEintragTagName } from \"./PersonenListenEintrag\";\n\nexport class PersonenListe extends HTMLElement {\n    private addPersonButton: HTMLButtonElement;\n    private personenListe: HTMLUListElement;\n    private rendered = false;\n\n    constructor() {\n        super();\n    }\n\n    get personen() {\n        let names: string[] = [];\n        this.personenListe.querySelectorAll(PersonenListenEintragTagName).forEach((v: PersonenListenEintrag) => names.push(v.name));\n        return names;\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.innerHTML = template;\n            this.addPersonButton = this.querySelector(\"#add-person\");\n            this.personenListe = this.querySelector(\"#personen-liste\");\n            this.rendered = true;\n        }\n        this.addPersonButton.addEventListener(\"click\", () => {\n            let li = document.createElement(\"li\");\n            let e = new PersonenListenEintrag();\n            li.appendChild(e);\n            this.personenListe.appendChild(li);\n            e.querySelector(\"input\").focus();\n            e.addEventListener(\"onremove\", () => {\n                this.personenListe.removeChild(li);\n            });\n        });\n    }\n\n    disconnectedCallback() {\n\n    }\n\n}\n\ncustomElements.define('app-personen-liste', PersonenListe);\n","// Module\nvar code = \"<ul id=\\\"personen-liste\\\" class=\\\"mdc-list mdc-list--non-interactive\\\"> </ul> <button type=\\\"button\\\" class=\\\"button\\\" id=\\\"add-person\\\"> <span class=\\\"material-icons\\\"> add </span> Person hinzufügen </button>\";\n// Exports\nexport default code;","import template from \"./CreateKontokorrent.html\";\nimport { Store } from \"../../state/Store\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { State } from \"../../state/State\";\nimport { AccountActionCreator, accountActionCreatorFactory } from \"../../state/actions/AccountActionCreator\";\nimport \"../PersonenListe/PersonenListe\";\nimport { PersonenListe } from \"../PersonenListe/PersonenListe\";\nimport { v4 as uuid } from \"uuid\";\nimport \"./CreateKontokorrent.scss\";\nimport { KontokorrentHinzufuegenActionCreator, kontokorrentHinzufuegenActionCreatorFactory } from \"../../state/actions/KontokorrentHinzufuegenActionCreator\";\nimport \"../ui-components/popup/popup\";\nimport \"../ui-components/tip-button/tip-button\";\nimport { convertLinks } from \"../convertLinks\";\n\nexport class CreateKontokorrent extends HTMLElement {\n    store: Store;\n    subscription: () => void;\n    routingActionCreator: RoutingActionCreator;\n    private accountActionCreator: AccountActionCreator;\n\n\n    private personenListe: PersonenListe;\n    private emptyNameError: HTMLDivElement;\n    private eventCreateError: HTMLDivElement;\n    private personCountError: HTMLDivElement;\n    private eventNameRequiredError: HTMLDivElement;\n    private createButton: HTMLButtonElement;\n    private eventName: HTMLInputElement;\n    private readonly kontokorrentId: string;\n    private creating: HTMLDivElement;\n    private eventNameDuplicate: HTMLDivElement;\n    private kontokorrentHinzufuegenActionCreator: KontokorrentHinzufuegenActionCreator;\n    private accountCreationFailed: HTMLDivElement;\n    private personNameDuplicateError: HTMLDivElement;\n    private rendered = false;\n    private eventNameError: HTMLDivElement;\n\n    constructor() {\n        super();\n        this.kontokorrentId = uuid();\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.accountActionCreator = accountActionCreatorFactory(serviceLocator);\n        this.kontokorrentHinzufuegenActionCreator = kontokorrentHinzufuegenActionCreatorFactory(serviceLocator);\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.personenListe = this.querySelector(\"#personen-liste\");\n            this.emptyNameError = this.querySelector(\"#empty-name-error\");\n            this.eventCreateError = this.querySelector(\"#event-create-error\");\n            this.personCountError = this.querySelector(\"#person-count-error\");\n            this.eventNameRequiredError = this.querySelector(\"#event-name-required-error\");\n            this.eventNameError = this.querySelector(\"#event-name-error\");\n            this.createButton = this.querySelector(\"#create-button\");\n            this.eventName = this.querySelector(\"#event-name\");\n            this.creating = this.querySelector(\"#creating\");\n            this.eventNameDuplicate = this.querySelector(\"#event-name-duplicate\");\n            this.accountCreationFailed = this.querySelector(\"#account-creation-failed\");\n            this.personNameDuplicateError = this.querySelector(\"#person-name-duplicate-error\");\n        }\n\n        this.createButton.addEventListener(\"click\", this.createEvent.bind(this));\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.applyStoreState(this.store.state);\n        convertLinks(this.querySelectorAll(\"a\"), this.routingActionCreator);\n    }\n\n    private async createEvent() {\n        let eventName = this.eventName.value;\n        let personNames = this.personenListe.personen;\n        this.eventNameRequiredError.style.display = eventName ? \"none\" : \"block\";\n        let personCountOk = personNames.length >= 2;\n        this.personCountError.style.display = personCountOk ? \"none\" : \"block\";\n        let personNameError = personNames.some(v => !v);\n        this.emptyNameError.style.display = personNameError ? \"block\" : \"none\";\n        let oeffentlicherName = (this.eventName.value || \"\").toLowerCase();\n        let nameError = (oeffentlicherName && !/^[a-z0-9]+$/.test(oeffentlicherName));\n        this.eventNameError.style.display = nameError ? \"block\" : \"none\";\n        let personNameDuplicateError = (personNames.some((item, index) => personNames.indexOf(item) != index));\n        this.personNameDuplicateError.style.display = personNameDuplicateError ? \"block\" : \"none\";\n        if (eventName && personCountOk && !personNameError && !nameError && !personNameDuplicateError) {\n            if (await this.accountActionCreator.ensureAccount()) {\n                if (await this.kontokorrentHinzufuegenActionCreator.kontokorrentErstellen(this.kontokorrentId, this.eventName.value, oeffentlicherName, personNames)) {\n                    await this.routingActionCreator.navigateKontokorrentById(this.kontokorrentId);\n                };\n            }\n        } else {\n            document.scrollingElement.scroll({ top: 0, behavior: \"smooth\" });\n        }\n    }\n\n    private applyStoreState(state: State) {\n        this.creating.style.display = state.kontokorrents.creating || state.account.accountCreating ? \"flex\" : \"none\";\n        this.eventCreateError.style.display = state.kontokorrents.creationFailed ? \"block\" : \"none\";\n        this.eventNameDuplicate.style.display = state.kontokorrents.creationFailed && state.kontokorrents.creationFailed.exists ? \"block\" : \"none\";\n        this.accountCreationFailed.style.display = !state.account.accountCreating && state.account.accountCreationFailed ?\n            \"block\" : \"none\";\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n    }\n}\n\ncustomElements.define('app-create-event', CreateKontokorrent);","import { RoutingActionCreator } from \"../state/actions/RoutingActionCreator\";\n\nexport function convertLinks(elements: Array<HTMLAnchorElement> | NodeListOf<HTMLAnchorElement>, routingActionCreator: RoutingActionCreator) {\n    elements.forEach((e: HTMLAnchorElement) => {\n        e.addEventListener(\"click\", ev => {\n            ev.preventDefault();\n            routingActionCreator.navigate(e.getAttribute(\"href\"));\n        });\n    });\n}","export class Popup extends HTMLElement {\n    private popupShown: boolean = false;\n    constructor() {\n        super();\n        this.keyListener = this.keyListener.bind(this);\n        this.clickListener = this.clickListener.bind(this);\n    }\n\n    connectedCallback() {\n        this.updateStyles();\n    }\n\n    private keyListener(ev: KeyboardEvent) {\n        if (ev.key == \"Escape\") {\n            this.hide();\n        }\n    }\n\n    private clickListener(ev: MouseEvent | TouchEvent) {\n        if (!this.contains(<Element>(event.target))) {\n            this.hide();\n        }\n    }\n\n    public hide() {\n        if (this.popupShown) {\n            document.removeEventListener(\"keydown\", this.keyListener);\n            document.removeEventListener(\"click\", this.clickListener);\n            this.popupShown = false;\n            this.updateStyles();\n        }\n    }\n\n    public show() {\n        if (!this.popupShown) {\n            document.addEventListener(\"keydown\", this.keyListener);\n            document.addEventListener(\"click\", this.clickListener);\n            this.popupShown = true;\n            this.updateStyles();\n        }\n    }\n\n    private updateStyles() {\n        this.style.display = this.popupShown ? \"block\" : \"none\";\n    }\n\n    public toggle() {\n        if (!this.popupShown) {\n            this.show();\n        }\n        else {\n            this.hide();\n\n        }\n    }\n\n    disconnectedCallback() {\n        this.hide();\n    }\n}\ncustomElements.define(\"app-popup\", Popup);\n","import { Popup } from \"../popup/popup\";\n\nexport const PopupIdAttribute = \"popup-id\";\n\nexport class TipButton extends HTMLElement {\n    private popupId: string;\n    constructor() {\n        super();\n        this.clickListener = this.clickListener.bind(this);\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.popupId = this.getAttribute(PopupIdAttribute);\n\n    }\n\n    static get observedAttributes() {\n        return [PopupIdAttribute];\n    }\n\n    connectedCallback() {\n        this.addEventListener(\"click\", this.clickListener);\n    }\n\n    private clickListener(ev: MouseEvent) {\n        let popup: Popup = document.querySelector(`#${this.popupId}`);\n        popup.toggle();\n        ev.stopPropagation();\n    }\n\n\n    disconnectedCallback() {\n        this.removeEventListener(\"click\", this.clickListener);\n    }\n}\ncustomElements.define(\"tip-button\", TipButton);\n","import { ApiClient } from \"../../api/ApiClient\";\nimport { KontokorrentInfo } from \"../../api/KontokorrentInfo\";\nimport { NeuerKontokorrentRequest } from \"../../api/NeuerKontokorrentRequest\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { Action } from \"../lib/Action\";\nimport { Store } from \"../Store\";\nimport { ActionNames } from \"./ActionNames\";\nimport { v4 as uuid } from \"uuid\";\n\nexport class KontokorrentCreationFailed implements Action {\n    readonly type = ActionNames.KontokorrentCreationFailed;\n    constructor(public exists: boolean) {\n\n    }\n}\n\nexport class KontokorrentCreating implements Action {\n    readonly type = ActionNames.KontokorrentCreating;\n    constructor() {\n\n    }\n}\n\nexport class KontokorrentCreated implements Action {\n    readonly type = ActionNames.KontokorrentCreated;\n    constructor(public kontokorrent: KontokorrentInfo) {\n\n    }\n}\n\nexport class KontokorrentHinzufuegenFailed implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegenFailed;\n    constructor(public notFound: boolean) {\n\n    }\n}\n\nexport class KontokorrentHinzufuegen implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegen;\n    constructor() {\n\n    }\n}\n\nexport class KontokorrentHinzufuegenSuccess implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegenSuccess;\n    constructor(public kontokorrents: KontokorrentInfo[]) {\n\n    }\n}\n\nexport class LoginPageGeoeffnet implements Action {\n    readonly type = ActionNames.LoginPageGeoeffnet;\n    constructor() {\n\n    }\n}\n\nexport class NichtGefundenPageGeoeffnet implements Action {\n    readonly type = ActionNames.NichtGefundenPageGeoeffnet;\n    constructor() {\n\n    }\n}\n\nexport type KontokorrentHinzufuegenActions = KontokorrentCreationFailed\n    | KontokorrentCreating\n    | KontokorrentCreated\n    | KontokorrentHinzufuegenFailed\n    | KontokorrentHinzufuegen\n    | KontokorrentHinzufuegenSuccess\n    | LoginPageGeoeffnet\n    | NichtGefundenPageGeoeffnet;\n\nexport class KontokorrentHinzufuegenActionCreator {\n\n    constructor(private store: Store,\n        private apiClient: ApiClient,\n        private db: KontokorrentDatabase) {\n\n    }\n\n    loginPageGeoeffnet() {\n        this.store.dispatch(new LoginPageGeoeffnet());\n    }\n\n    nichtGefundenPageGeoeffnet() {\n        this.store.dispatch(new NichtGefundenPageGeoeffnet());\n    }\n\n    async kontokorrentErstellen(id: string, name: string, oeffentlicherName: string, personen: string[]) {\n        let request: NeuerKontokorrentRequest = {\n            name,\n            id,\n            oeffentlicherName,\n            personen: personen.map(v => { return { name: v, id: uuid() } })\n        };\n        this.store.dispatch(new KontokorrentCreating());\n        let res = await this.apiClient.neuerKontokorrent(request);\n        if (!res.success) {\n            this.store.dispatch(new KontokorrentCreationFailed(res.exists));\n        }\n        else {\n            await this.db.addKontokorrent({\n                id: id,\n                name: name,\n                personen: request.personen,\n                oeffentlicherName: oeffentlicherName\n            });\n            this.store.dispatch(new KontokorrentCreated({\n                id: id,\n                name: name,\n                personen: request.personen,\n                oeffentlicherName: oeffentlicherName\n            }));\n            return true;\n        }\n        return false;\n    }\n\n    async kontokorrentHinzufuegen(oeffentlicherName: string) {\n        let kk = await this.db.getPerOeffentlichName(oeffentlicherName);\n        if (null != kk) {\n            return kk.id;\n        }\n        this.store.dispatch(new KontokorrentHinzufuegen());\n        try {\n            let res = await this.apiClient.kontokorrentHinzufuegen(oeffentlicherName, null);\n            if (null == res) {\n                this.store.dispatch(new KontokorrentHinzufuegenFailed(true));\n            }\n            else {\n                let newIds = await this.db.setKontokorrents(res.map(v => {\n                    return {\n                        id: v.id,\n                        name: v.name,\n                        personen: v.personen,\n                        oeffentlicherName: v.oeffentlicherName\n                    };\n                }));\n                this.store.dispatch(new KontokorrentHinzufuegenSuccess(res));\n                return newIds[0];\n            }\n        }\n        catch (err) {\n            this.store.dispatch(new KontokorrentHinzufuegenFailed(false));\n        }\n        return false;\n    }\n}\n\nexport function kontokorrentHinzufuegenActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"KontokorrentHinzufuegenActionCreator\",\n        serviceLocator => new KontokorrentHinzufuegenActionCreator(\n            serviceLocator.store,\n            serviceLocator.apiClient,\n            serviceLocator.db\n        ));\n}"],"names":["PersonenListenEintrag","HTMLElement","constructor","super","rendered","connectedCallback","this","innerHTML","removeButton","querySelector","nameInput","addEventListener","dispatchEvent","Event","CustomEvent","value","disconnectedCallback","PersonenListenEintragTagName","customElements","define","PersonenListe","names","personenListe","querySelectorAll","forEach","v","push","name","addPersonButton","li","document","createElement","e","appendChild","focus","removeChild","CreateKontokorrent","kontokorrentId","addServices","serviceLocator","store","routingActionCreator","accountActionCreator","kontokorrentHinzufuegenActionCreator","emptyNameError","eventCreateError","personCountError","eventNameRequiredError","eventNameError","createButton","eventName","creating","eventNameDuplicate","accountCreationFailed","personNameDuplicateError","createEvent","bind","subscription","subscribe","state","applyStoreState","convertLinks","personNames","personen","style","display","personCountOk","length","personNameError","some","oeffentlicherName","toLowerCase","nameError","test","item","index","indexOf","scrollingElement","scroll","top","behavior","ensureAccount","kontokorrentErstellen","navigateKontokorrentById","kontokorrents","account","accountCreating","creationFailed","exists","elements","ev","preventDefault","navigate","getAttribute","Popup","popupShown","keyListener","clickListener","updateStyles","key","hide","contains","event","target","removeEventListener","show","toggle","PopupIdAttribute","TipButton","attributeChangedCallback","updateAttributes","popupId","stopPropagation","KontokorrentCreationFailed","type","KontokorrentCreating","KontokorrentCreated","kontokorrent","KontokorrentHinzufuegenFailed","notFound","KontokorrentHinzufuegen","KontokorrentHinzufuegenSuccess","LoginPageGeoeffnet","NichtGefundenPageGeoeffnet","KontokorrentHinzufuegenActionCreator","apiClient","db","loginPageGeoeffnet","dispatch","nichtGefundenPageGeoeffnet","id","request","map","res","neuerKontokorrent","success","addKontokorrent","kk","getPerOeffentlichName","kontokorrentHinzufuegen","newIds","setKontokorrents","err","kontokorrentHinzufuegenActionCreatorFactory","get"],"sourceRoot":""}