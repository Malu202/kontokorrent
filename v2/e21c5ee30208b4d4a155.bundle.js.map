{"version":3,"file":"e21c5ee30208b4d4a155.bundle.js","mappings":"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","sources":["webpack://kontokorrent/./src/components/MultiBezahlungZeile/MultiBezahlungZeile.ts","webpack://kontokorrent/./src/components/MultiBezahlungZeile/MultiBezahlungZeile.html","webpack://kontokorrent/./src/components/MultiBezahlungEintragenPage/MultiBezahlungEintragenPage.ts","webpack://kontokorrent/./src/components/MultiBezahlungEintragenPage/MultiBezahlungEintragenPage.html","webpack://kontokorrent/./src/utils/formatCurrency.ts","webpack://kontokorrent/./src/utils/round.ts"],"sourcesContent":["import { formatCurrency } from \"../../utils/formatCurrency\";\nimport template from \"./MultiBezahlungZeile.html\";\nimport \"./MultiBezahlungZeile.scss\";\n\nexport class MultiBezahlungZeile extends HTMLElement {\n    private datumText: HTMLSpanElement;\n    private betreffInput: HTMLInputElement;\n    private betragText: HTMLSpanElement;\n    private removeBtn: HTMLButtonElement;\n    private removeClickListener: () => void;\n    private status: HTMLSpanElement;\n    private rendered = false;\n    private betrag: number;\n    private betreff: string;\n    private datum: Date;\n    private done: boolean;\n    private error: boolean;\n    private pendingdata = false;\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.datumText = this.querySelector(`[data-ref=\"datum\"]`);\n            this.betreffInput = this.querySelector(`[data-ref=\"betreff\"]`);\n            this.betragText = this.querySelector(`[data-ref=\"betrag\"]`);\n            this.removeBtn = this.querySelector(`[data-ref=\"remove\"]`);\n            this.status = this.querySelector(`[data-ref=\"status\"]`);\n            this.updateStyle();\n        }\n        this.removeClickListener = () => this.removeClick();\n        this.removeBtn.addEventListener(\"click\", this.removeClickListener);\n    }\n\n    private removeClick() {\n        this.dispatchEvent(new CustomEvent(\"removebezahlung\"));\n    }\n\n    disconnectedCallback() {\n        this.removeBtn.removeEventListener(\"click\", this.removeClickListener);\n    }\n\n    setData(d: { betreff?: string; betrag?: number; datum?: Date; done: boolean, error: boolean }) {\n        this.betrag = d.betrag;\n        this.betreff = d.betreff;\n        this.datum = d.datum;\n        this.done = d.done;\n        this.error = d.error;\n        this.pendingdata = true;\n        this.updateStyle();\n    }\n\n    private updateStyle() {\n        if (this.rendered && this.pendingdata) {\n            this.pendingdata = false;\n            this.betragText.innerText = formatCurrency(this.betrag);\n            this.datumText.innerText = new Intl.DateTimeFormat().format(this.datum);\n            this.betreffInput.value = this.betreff;\n            this.status.innerText = this.error ? \"Fehler\" : (this.done ? \"gespeichert\" : \"\");\n        }\n    }\n\n    getData() {\n        return { betreff: this.betreffInput.value };\n    }\n}\n\ncustomElements.define(\"multi-bezahlung-zeile\", MultiBezahlungZeile);\n","// Module\nvar code = \"<button class=\\\"button\\\" data-ref=\\\"remove\\\">entfernen</button> <span data-ref=\\\"datum\\\"></span> <input type=\\\"text\\\" data-ref=\\\"betreff\\\"/> <span data-ref=\\\"betrag\\\"></span> <span data-ref=\\\"status\\\"></span>\";\n// Exports\nexport default code;","import template from \"./MultiBezahlungEintragenPage.html\";\nimport { Store } from \"../../state/Store\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { AppBar, AppBarTagName } from \"../AppBar/AppBar\";\nimport \"./MultiBezahlungEintragenPage.scss\";\nimport { BezahlungActionCreator, bezahlungActionCreatorFactory } from \"../../state/actions/BezahlungActionCreator\";\nimport { Person, State } from \"../../state/State\";\nimport \"../BezahlungEintragenForm/BezahlungEintragenForm\";\nimport { parse } from \"date-fns\";\nimport { de } from \"date-fns/locale\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { convertLinks } from \"../convertLinks\";\nimport { MultiBezahlungZeile } from \"../MultiBezahlungZeile/MultiBezahlungZeile\";\nimport { BezahlendePersonRadioButton } from \"../BezahlendePersonRadioButton/BezahlendePersonRadioButton\";\n\nconst schema: {\n    name: string,\n    seperator: RegExp,\n    mappings: ({ typ: \"betreff\", column: number, parse: (s: string) => string }\n        | { typ: \"datum\", column: number, parse: (s: string) => Date }\n        | { typ: \"betrag\", column: number, parse: (s: string) => number })[]\n}[] = [{\n    name: \"BAWAG\",\n    seperator: /\\t/g,\n    mappings: [\n        {\n            typ: \"betreff\", column: 1, parse: (s: string) => {\n                return s.replace(/\\d{2,}/g, \"\").replace(/\\s+/g, \" \");\n            }\n        },\n        { typ: \"datum\", column: 2, parse: (s: string) => parse(s, \"P\", new Date(), { locale: de }) },\n        { typ: \"betrag\", column: 4, parse: (s: string) => -parseFloat(s.replace(\".\", \"\").replace(\",\", \".\").replace(/ /g, \"\")) }\n    ]\n}];\n\nexport class MultiBezahlungEintragenPage extends HTMLElement {\n    private store: Store;\n    private kontokorrentsSubscription: () => void;\n    private routingActionCreator: RoutingActionCreator;\n    private appBar: AppBar;\n    private bezahlungActionCreator: BezahlungActionCreator;\n    private kontokorrentId: string;\n    private onPasteHandler: (ev: ClipboardEvent) => void;\n    private bezahlungenTable: HTMLTableElement;\n    private bezahlungen: { id: number, betreff?: string; betrag?: number; datum?: Date; done: boolean; error: boolean; }[];\n    private bezahlungenRenderer: ArrayToElementRenderer<{ id: number, betreff?: string; betrag?: number; datum?: Date; done: boolean; error: boolean; }, MultiBezahlungZeile, number>;\n    zahlendePersonRenderer: ArrayToElementRenderer<any, any, string>;\n    private saveHandler: () => void;\n    private saveBtn: HTMLButtonElement;\n    private form: HTMLFormElement;\n    private personen: Person[];\n    private rendered = false;\n    private serviceLocator: ServiceLocator;\n\n    constructor() {\n        super();\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.bezahlungActionCreator = bezahlungActionCreatorFactory(serviceLocator);\n        this.serviceLocator = serviceLocator;\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.appBar = this.querySelector(AppBarTagName);\n            this.appBar.addServices(this.serviceLocator);\n        }\n        this.bezahlungenTable = this.querySelector(\"#bezahlungen-table\");\n        this.bezahlungenRenderer = new ArrayToElementRenderer(this.bezahlungenTable,\n            b => b.id,\n            b => {\n                let e = new MultiBezahlungZeile();\n                e.addEventListener(\"removebezahlung\", () => {\n                    this.bezahlungen.splice(this.bezahlungen.indexOf(b), 1);\n                    this.renderBezahlungen();\n                });\n                e.addEventListener(\"change\", () => {\n                    b.betreff = e.getData().betreff;\n                });\n                return e;\n            });\n        this.zahlendePersonRenderer = new ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>(\n            this.querySelector(\"#zahlende-person-auswahl\"),\n            p => p.id,\n            p => new BezahlendePersonRadioButton());\n        this.kontokorrentsSubscription = this.store.subscribe(\"kontokorrents\", s => this.applyStoreState(s));\n        this.appBar.addEventListener(\"gotokontokorrent\", (e: CustomEvent) => {\n            this.bezahlungActionCreator.bezahlungEintragenKontokorrentChanged(e.detail);\n        });\n        this.bezahlungActionCreator.bezahlungEintragenGeoeffnet();\n        this.applyStoreState(this.store.state);\n        this.onPasteHandler = (ev: ClipboardEvent) => this.onPaste(ev);\n        this.saveHandler = () => this.save();\n        this.saveBtn = this.querySelector(\"#save\");\n        this.form = this.querySelector(\"#multi-bezahlung-form\");\n        this.saveBtn.addEventListener(\"click\", this.saveHandler);\n        document.addEventListener(\"paste\", this.onPasteHandler);\n        convertLinks([this.querySelector(\"#zurueck-zum-kontokorrent\")], this.routingActionCreator);\n    }\n    private async save() {\n        for (let b of this.bezahlungen) {\n            try {\n                await this.bezahlungActionCreator.bezahlungDirektHinzufuegen(this.kontokorrentId, {\n                    betrag: b.betrag,\n                    betreff: b.betreff,\n                    bezahlendePerson: this.form[\"bezahlende-person\"].value,\n                    datum: b.datum,\n                    empfaenger: this.personen.map(p => p.id)\n                });\n                b.done = true;\n            } catch (error) {\n                b.error = true;\n                console.error(error);\n            }\n            this.renderBezahlungen();\n        }\n    }\n\n    private onPaste(ev: ClipboardEvent) {\n        let text = ev.clipboardData.getData(\"text/plain\");\n        if (text) {\n            let lines = text.split(/\\r\\n|\\n|\\r/g);\n            var mappedBySchema = schema.map(s => {\n                let id = 0;\n                return lines.map(l => {\n                    let columns = l.split(s.seperator);\n                    if (columns.length < s.mappings.map(s => s.column).sort((a, b) => b - a)[0]) {\n                        return null;\n                    }\n                    let res: any = {};\n                    for (let m of s.mappings) {\n                        let val = m.parse(columns[m.column]);\n                        switch (typeof val) {\n                            case \"number\":\n                                if (isNaN(val)) {\n                                    return null;\n                                }\n                                break;\n                            case \"object\":\n                                if (isNaN(val.getTime())) {\n                                    return null;\n                                }\n                                break;\n                            default: break;\n                        }\n                        res[m.typ] = val;\n                    }\n                    let ret: { id: number, betreff?: string; betrag?: number; datum?: Date; done: boolean, error: boolean } = { ...res, id: ++id, done: false, error: false };\n                    return ret;\n                }).filter(v => null != v);\n            }).filter(v => v.length > 0);\n            if (mappedBySchema.length > 0) {\n                this.bezahlungen = mappedBySchema.sort((a, b) => b.length - a.length)[0];\n                this.renderBezahlungen();\n            }\n        }\n    }\n\n    private renderBezahlungen() {\n        this.bezahlungenRenderer.update(this.bezahlungen, (e, b) => {\n            e.setData(b);\n        });\n    }\n\n    private applyStoreState(s: State) {\n        if (s.kontokorrents.activeKontokorrentId) {\n\n        }\n        this.kontokorrentId = s.kontokorrents.activeKontokorrentId;\n        this.personen = this.kontokorrentId ? s.kontokorrents.kontokorrents[this.kontokorrentId]?.personen : [];\n        if (this.personen) {\n            this.zahlendePersonRenderer.update(this.personen, (element, person) => {\n                element.person = person;\n                element.radioName = \"bezahlende-person\";\n            });\n        }\n    }\n\n    disconnectedCallback() {\n        this.kontokorrentsSubscription();\n        document.removeEventListener(\"paste\", this.onPasteHandler);\n        this.saveBtn.removeEventListener(\"click\", this.saveHandler);\n    }\n}\n\ncustomElements.define('multi-bezahlung-eintragen-page', MultiBezahlungEintragenPage);\n","// Module\nvar code = \"<app-bar></app-bar> <a id=\\\"zurueck-zum-kontokorrent\\\" class=\\\"button\\\"> <span class=\\\"material-icons\\\"> arrow_back </span> zurück </a> <form id=\\\"multi-bezahlung-form\\\" novalidate> <label for=\\\"zahlende-person\\\">Diese Person zahlt</label> <div id=\\\"zahlende-person-auswahl\\\"></div> </form> <div id=\\\"bezahlungen-table\\\"> </div> <button class=\\\"button\\\" title=\\\"speichern\\\" id=\\\"save\\\"> <span class=\\\"material-icons\\\"> save </span> alle speichern </button>\";\n// Exports\nexport default code;","import { round } from \"./round\";\n\nexport function formatCurrency(wert: number) {\n    var Betrag: string = \"\" + round(wert, 2);\n    var Kommaindex = Betrag.toString().indexOf(\".\");\n    var Nachkommastellen = 0;\n    if (Kommaindex != -1) {\n        Nachkommastellen = Betrag.toString().length - (Kommaindex + 1);\n        if (Nachkommastellen == 1)\n            Betrag += '0';\n    }\n    return Betrag;\n}\n","export function round(value: number, decimals: number) {\n\n    //Removing scientific notation if used:\n    var valueString = value.toString();\n    var indexOfE = valueString.indexOf(\"E\");\n    var indexOfe = valueString.indexOf(\"e\");\n    var power = 0;\n    if (indexOfe > -1) {\n        power = parseFloat(valueString.substring(indexOfe + 1));\n        valueString = valueString.substring(0, indexOfe)\n    } else if (indexOfE > -1) {\n        power = parseFloat(valueString.substring(indexOfE + 1));\n        valueString = valueString.substring(0, indexOfE)\n    }\n    //round\n    return Number(Math.round(Number(valueString + 'e' + (power + decimals))) + 'e-' + (decimals));\n}"],"names":["MultiBezahlungZeile","HTMLElement","constructor","super","rendered","pendingdata","connectedCallback","this","innerHTML","datumText","querySelector","betreffInput","betragText","removeBtn","status","updateStyle","removeClickListener","removeClick","addEventListener","dispatchEvent","CustomEvent","disconnectedCallback","removeEventListener","setData","d","betrag","betreff","datum","done","error","innerText","formatCurrency","Intl","DateTimeFormat","format","value","getData","customElements","define","schema","name","seperator","mappings","typ","column","parse","s","replace","Date","locale","de","parseFloat","MultiBezahlungEintragenPage","addServices","serviceLocator","store","routingActionCreator","bezahlungActionCreator","appBar","AppBar","bezahlungenTable","bezahlungenRenderer","ArrayToElementRenderer","b","id","e","bezahlungen","splice","indexOf","renderBezahlungen","zahlendePersonRenderer","p","BezahlendePersonRadioButton","kontokorrentsSubscription","subscribe","applyStoreState","bezahlungEintragenKontokorrentChanged","detail","bezahlungEintragenGeoeffnet","state","onPasteHandler","ev","onPaste","saveHandler","save","saveBtn","form","document","convertLinks","bezahlungDirektHinzufuegen","kontokorrentId","bezahlendePerson","empfaenger","personen","map","console","text","clipboardData","lines","split","mappedBySchema","l","columns","length","sort","a","res","m","val","isNaN","getTime","filter","v","update","kontokorrents","activeKontokorrentId","element","person","radioName","wert","valueString","indexOfE","indexOfe","power","Betrag","toString","substring","Number","Math","round","Kommaindex"],"sourceRoot":""}