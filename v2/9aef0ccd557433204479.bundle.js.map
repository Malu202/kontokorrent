{"version":3,"sources":["webpack://kontokorrent/webpack/runtime/load script","webpack://kontokorrent/webpack/runtime/css loading","webpack://kontokorrent/./src/api/InteractionRequiredException.ts","webpack://kontokorrent/./src/api/TokenRenewFailedException.ts","webpack://kontokorrent/./src/state/Store.ts","webpack://kontokorrent/./src/state/lib/BaseStore.ts","webpack://kontokorrent/./src/ServiceLocator.ts","webpack://kontokorrent/./src/lib/AccountInfoStore.ts","webpack://kontokorrent/./src/api/postJson.ts","webpack://kontokorrent/./src/api/ApiException.ts","webpack://kontokorrent/./src/environment.ts","webpack://kontokorrent/./src/api/NeueBezahlungFailedException.ts","webpack://kontokorrent/./src/api/BezahlungBearbeitenFailedException.ts","webpack://kontokorrent/./src/api/BezahlungLoeschenFailedException.ts","webpack://kontokorrent/./src/api/ApiClient.ts","webpack://kontokorrent/./src/state/reducers/AccountReducer.ts","webpack://kontokorrent/./src/state/reducers/KontokorrentsReducer.ts","webpack://kontokorrent/./src/lib/KontokorrentDatabase.ts","webpack://kontokorrent/./src/state/actions/InitializationActionCreator.ts","webpack://kontokorrent/./src/state/reducers/BeschreibungVorschlaegeReducer.ts","webpack://kontokorrent/./src/index.ts","webpack://kontokorrent/./src/lib/AccountType.ts","webpack://kontokorrent/./src/lib/testFeatures.ts","webpack://kontokorrent/./src/routing/KontokorrentRouteResolver.ts","webpack://kontokorrent/./src/components/FeaturesRequired/FeaturesRequired.ts","webpack://kontokorrent/./src/state/State.ts","webpack://kontokorrent/./src/state/actions/AccountActionCreator.ts","webpack://kontokorrent/./src/state/actions/KontokorrentListenActionCreator.ts","webpack://kontokorrent/./src/state/actions/RoutingActionCreator.ts","webpack://kontokorrent/./src/sw.constants.ts","webpack://kontokorrent/./src/utils/sortBy.ts","webpack://kontokorrent/./src/components/FeaturesRequired/FeaturesRequired.html","webpack://kontokorrent/webpack/bootstrap","webpack://kontokorrent/webpack/runtime/compat get default export","webpack://kontokorrent/webpack/runtime/define property getters","webpack://kontokorrent/webpack/runtime/ensure chunk","webpack://kontokorrent/webpack/runtime/get javascript chunk filename","webpack://kontokorrent/webpack/runtime/get mini-css chunk filename","webpack://kontokorrent/webpack/runtime/global","webpack://kontokorrent/webpack/runtime/hasOwnProperty shorthand","webpack://kontokorrent/webpack/runtime/make namespace object","webpack://kontokorrent/webpack/runtime/publicPath","webpack://kontokorrent/webpack/runtime/jsonp chunk loading","webpack://kontokorrent/webpack/startup"],"names":["inProgress","dataWebpackPrefix","loadStylesheet","installedCssChunks","InteractionRequiredException","TokenRenewFailedException","networkError","Store","initState","this","subscriptions","reducerSubscriptions","state","area","call","sub","push","splice","indexOf","reducer","action","updatedAreas","s","applyUpdateFn","cb","onDispatch","err","console","error","type","length","ServiceLocator","store","router","apiClient","db","accountInfoStore","services","name","factoryFunction","AccountInfoStore","accountInfo","setAccountInfo","getAccountInfo","clearAccountInfo","tokenType","getAccessToken","value","lastTimeStamp","updateAccessTokenIfNewer","async","postJson","url","body","token","init","method","headers","JSON","stringify","fetch","ApiException","API_URL","environment","NeueBezahlungFailedException","BezahlungBearbeitenFailedException","BezahlungLoeschenFailedException","baseUrl","ApiClient","id","secret","ok","success","res","getAuthHeader","json","oeffentlicherName","einladungsCode","params","encodeURIComponent","status","request","exists","kontokorrentId","ab","query","notfound","aktionen","mapAktionen","a","bezahlung","zeitpunkt","Date","aktion","bezahlungId","info","get","Error","AccountType","tokenResponse","tokenInfo","expires","parse","timestamp","AccountReducer","updateStore","accountCreating","accountCreationFailed","accountCreated","loginExpired","interactionRequired","KontokorrentsReducer","listeLaden","kontokorrents","extendMap","hinzufuegen","hinzufuegenFailed","kontokorrentNotFound","notFound","creating","creationFailed","kontokorrent","synchronisieren","personen","map","p","balance","bezahlungen","bezahlungAnlegen","angezeigteBezahlung","activeKontokorrentId","extendPersonenInfo","Object","entries","e","updateKontokorrentStatus","updateAngezeigteBezahlung","bearbeitungsStatus","upsertBezahlung","updateStatus","bearbeiteteBezahlungId","removeBezahlung","deleteStatus","geloeschteBezahlungId","updateKontokorrentStatusFn","ks","update","b","existing","find","d","personenInfo","personenMap","Map","set","Array","from","values","kk","k","v","KontokorrentsStore","AppStateStore","AktionenStore","NeueBezahlungenStore","KontokorrentDatabase","oldVersion","newVersion","createObjectStore","keyPath","createIndex","put","zuletztGesehenerKontokorrentId","accesstokens","accountinfo","objectStoreNames","contains","deleteObjectStore","close","withInitialized","sortBy","getAll","mapped","unwrapped","Promise","resolve","reject","tx","transaction","onerror","oncomplete","objectStore","add","ev","log","laufendeNummer","preventDefault","stopPropagation","appState","kks","getKontokorrents","filter","some","delete","newIds","ex","combined","getFromIndex","getAllFromIndex","clear","t","durability","done","m","InitializationActionCreator","routingActionCreator","accountActionCreator","kontokorrentsActionCreator","testFeatures","allPassed","run","navigateFeaturesRequired","initialized","initializeAccount","window","history","replaceState","document","title","syncKontokorrentListe","requestIdleCallback","zwischengespeicherteSynchronisieren","navigator","reg","serviceWorker","ready","getZwischengespeicherteBezahlungen","sync","register","zwischengespeicherteSynchronisierenAsync","catch","BeschreibungVorschlagReducer","vorschlaege","addEventListener","then","registration","registrationError","account","beschreibungVorschlaege","data","msg","dispatch","routeResolver","KontokorrentRouteResolver","addReducer","serviceLocator","setServiceLocator","initializationActionCreatorFactory","initializeApplication","testdbname","indexedDB","open","onsuccess","result","deleteDatabase","Paths","FeaturesRequired","HTMLElement","super","innerHTML","navigateHome","location","reload","customElements","define","KontokorrentPage","component","addServices","lastRoute","currentRoute","Info","Login","CreateEvent","CreateKontokorrent","BezahlungEintragen","BezahlungEintragenPage","MultiBezahlungEintragen","MultiBezahlungEintragenPage","DatabaseDebug","kontokorrentsRoute","exec","getKontokorrentPageComponent","setRouteParameters","bezahlungRoute","BezahlungPage","BezahlungStatus","AccountCreating","AccountCreationFailed","AccountCreated","AccountInitialized","LoggedOut","LoginExpired","AccountActionCreator","getUserInfo","neuerBenutzer","navigateLogin","accountActionCreatorFactory","KontokorrentListeLaden","KontokorrentListe","KontokorrentListeLadenFailed","KontokorrentListenActionCreator","replace","getZuletztGesehenerKontokorrentId","navigateKontokorrent","listenTask","kontokorrentsAuflisten","liste","setKontokorrents","kontokorrentListenActionCreatorFactory","RoutingActionCreator","navigate","path","routingActionCreatorFactory","NeueBezahlungBackgroundSyncTag","sortByAlphabetically","collection","keySelector","sort","toLowerCase","localeCompare","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","x","n","getter","__esModule","definition","key","o","defineProperty","enumerable","f","chunkId","all","keys","reduce","promises","u","miniCssF","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","l","script","needAttach","undefined","scripts","getElementsByTagName","i","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onload","clearTimeout","doneFns","parentNode","removeChild","forEach","fn","setTimeout","bind","target","head","appendChild","r","Symbol","toStringTag","href","fullhref","existingLinkTags","dataHref","tag","rel","existingStyleTags","findStylesheet","linkTag","errorType","realHref","code","createStylesheet","826","miniCss","baseURI","self","installedChunks","deferredModules","j","installedChunkData","promise","realSrc","message","checkDeferredModules","webpackJsonpCallback","parentChunkLoadingFunction","chunkIds","moreModules","runtime","executeModules","resolves","shift","apply","chunkLoadingGlobal","checkDeferredModulesImpl","deferredModule","fulfilled","depId","startup"],"mappings":"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","file":"9aef0ccd557433204479.bundle.js","sourcesContent":["var inProgress = {};\nvar dataWebpackPrefix = \"kontokorrent:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","var createStylesheet = function(chunkId, fullhref, resolve, reject) {\n\tvar linkTag = document.createElement(\"link\");\n\n\tlinkTag.rel = \"stylesheet\";\n\tlinkTag.type = \"text/css\";\n\tvar onLinkComplete = function(event) {\n\t\t// avoid mem leaks.\n\t\tlinkTag.onerror = linkTag.onload = null;\n\t\tif (event.type === 'load') {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + realHref + \")\");\n\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n\t\t\terr.type = errorType;\n\t\t\terr.request = realHref;\n\t\t\tlinkTag.parentNode.removeChild(linkTag)\n\t\t\treject(err);\n\t\t}\n\t}\n\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n\tlinkTag.href = fullhref;\n\n\tdocument.head.appendChild(linkTag);\n\treturn linkTag;\n};\nvar findStylesheet = function(href, fullhref) {\n\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n\tfor(var i = 0; i < existingLinkTags.length; i++) {\n\t\tvar tag = existingLinkTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n\t}\n\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n\tfor(var i = 0; i < existingStyleTags.length; i++) {\n\t\tvar tag = existingStyleTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\");\n\t\tif(dataHref === href || dataHref === fullhref) return tag;\n\t}\n};\nvar loadStylesheet = function(chunkId) {\n\treturn new Promise(function(resolve, reject) {\n\t\tvar href = __webpack_require__.miniCssF(chunkId);\n\t\tvar fullhref = __webpack_require__.p + href;\n\t\tif(findStylesheet(href, fullhref)) return resolve();\n\t\tcreateStylesheet(chunkId, fullhref, resolve, reject);\n\t});\n}\n// object to store loaded CSS chunks\nvar installedCssChunks = {\n\t826: 0\n};\n\n__webpack_require__.f.miniCss = function(chunkId, promises) {\n\tvar cssChunks = {\"220\":1,\"443\":1,\"493\":1,\"575\":1,\"581\":1,\"635\":1,\"697\":1,\"938\":1};\n\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(function() {\n\t\t\tinstalledCssChunks[chunkId] = 0;\n\t\t}, function(e) {\n\t\t\tdelete installedCssChunks[chunkId];\n\t\t\tthrow e;\n\t\t}));\n\t}\n};\n\n// no hmr","export class InteractionRequiredException {\n\n}\n\n","export class TokenRenewFailedException {\n    constructor(public readonly networkError: boolean) {\n\n    }\n}","import { State } from \"./State\";\nimport { BaseStore } from \"./lib/BaseStore\";\n\nexport class Store extends BaseStore<State> {\n    \n};","import { Reducer } from \"./Reducer\";\nimport { Action } from \"./Action\";\nimport { Store } from \"./Store\";\n\ninterface Subscription<TState> {\n    call(a: TState): void;\n    area: keyof TState | \"\";\n}\n\ninterface ReducerSubscription<TState> {\n    reducer: Reducer<any, any>;\n    area: keyof TState | null;\n}\n\nexport class BaseStore<TState> implements Store {\n    public state: TState;\n    private subscriptions: Subscription<TState>[];\n    private reducerSubscriptions: ReducerSubscription<TState>[];\n    constructor(initState: () => TState) {\n        this.subscriptions = [];\n        this.reducerSubscriptions = [];\n        this.state = initState();\n    }\n    subscribe<K extends keyof TState>(area: K | null, call: (a: TState) => void) {\n        let sub = { area, call };\n        this.subscriptions.push(sub);\n        return () => {\n            this.subscriptions.splice(this.subscriptions.indexOf(sub), 1);\n        };\n    }\n    addReducer<K extends keyof TState>(area: K | null, reducer: Reducer<TState[K] | TState, any>) {\n        this.reducerSubscriptions.push({ area, reducer });\n    }\n    dispatch(action: Action) {\n        let updatedAreas: (keyof TState | \"\")[] = [];\n        for (let s of this.reducerSubscriptions) {\n            let applyUpdateFn;\n            if (s.area) {\n                applyUpdateFn = (cb: (a: any) => any) => {\n                    (<any>this.state[s.area]) = cb(this.state[s.area]);\n                    updatedAreas.push(s.area);\n                };\n            }\n            else {\n                applyUpdateFn = (cb: (a: any) => any) => {\n                    this.state = cb(this.state);\n                    updatedAreas.push(\"\");\n                };\n            }\n            try {\n                s.reducer.onDispatch(action, applyUpdateFn);\n            }\n            catch (err) {\n                console.error(`Error while dispatching ${action.type}.`, err);\n            }\n        }\n        if (updatedAreas.length) {\n            for (let s of this.subscriptions) {\n                if (!s.area || updatedAreas.indexOf(s.area) > -1) {\n                    try {\n                        s.call(this.state);\n                    }\n                    catch (err) {\n                        console.error(`Error while updating on ${s.area || \"global\"} after ${action.type}.`, err);\n                    }\n                }\n            }\n        }\n    }\n}","import { Store } from \"./state/Store\";\nimport { Router } from \"route-it\";\nimport { ApiClient } from \"./api/ApiClient\";\nimport { KontokorrentDatabase } from \"./lib/KontokorrentDatabase\";\nimport { AccountInfoStore } from \"./lib/AccountInfoStore\";\n\nexport class ServiceLocator {\n    private services: { [name: string]: any };\n    constructor(public store: Store,\n        public router: Router<HTMLElement>,\n        public apiClient: ApiClient,\n        public db: KontokorrentDatabase,\n        public accountInfoStore: AccountInfoStore) {\n        this.services = {};\n    }\n\n    get<T>(name: string, factoryFunction: (serviceLocator: ServiceLocator) => T) {\n        if (!this.services[name]) {\n            this.services[name] = factoryFunction(this);\n        }\n        return this.services[name];\n    }\n}\n\n\n","import { AccountInfo } from \"./AccountInfo\";\nimport { KontokorrentDatabase } from \"./KontokorrentDatabase\";\n\nexport class AccountInfoStore {\n    constructor(private db: KontokorrentDatabase) {\n\n    }\n\n    async set(accountInfo: AccountInfo): Promise<void> {\n        await this.db.setAccountInfo(accountInfo);\n    }\n    async get(): Promise<AccountInfo> {\n        return await this.db.getAccountInfo();\n    }\n    async clear(): Promise<void> {\n        await this.db.clearAccountInfo();\n    }\n\n    async getAccessToken(tokenType: \"google\" | \"anonymous\"): Promise<{ timestamp: number, value: string }> {\n        return await this.db.getAccessToken(tokenType);\n    }\n\n    async updateAccessTokenIfNewer(tokenType: \"anonymous\" | \"google\", value: string, lastTimeStamp: number) {\n        return await this.db.updateAccessTokenIfNewer(tokenType, value, lastTimeStamp);\n    }\n}\n\n","export async function postJson(url: string, body: any, token?: string) {\n    let init: RequestInit = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    };\n    if (token) {\n        init.headers = { ...init.headers, \"Authorization\": `Bearer ${token}` };\n    }\n    return await fetch(url, init);\n}","\nexport class ApiException {\n}\n","let API_URL;\nif (__ENVIRONMENT == \"local\") {\n    API_URL = \"https://kontokorrent.azurewebsites.net\";\n}\nelse if (__ENVIRONMENT == \"gh-pages\") {\n    API_URL = \"https://kontokorrent.azurewebsites.net\";\n}\nelse if (__ENVIRONMENT == \"gh-pagesv2\") {\n    API_URL = \"https://kontokorrent.azurewebsites.net\";\n}\nelse {\n    API_URL = \"https://kontokorrent.azurewebsites.net\";\n}\n\nexport const environment = {\n    API_URL: API_URL\n};\n","\nexport class NeueBezahlungFailedException {\n}\n\n\n","\nexport class BezahlungBearbeitenFailedException {\n}\n","\nexport class BezahlungLoeschenFailedException {\n}\n","import { postJson } from \"./postJson\";\nimport { AccountType } from \"../lib/AccountType\";\nimport { AccountInfoStore } from \"../lib/AccountInfoStore\";\nimport { KontokorrentInfo } from \"./KontokorrentInfo\";\nimport { NeuerKontokorrentRequest } from \"./NeuerKontokorrentRequest\";\nimport { TokenRenewFailedException } from \"./TokenRenewFailedException\";\nimport { InteractionRequiredException } from \"./InteractionRequiredException\";\nimport { ApiException } from \"./ApiException\";\nimport { Aktion } from \"./Aktion\";\nimport { environment } from \"../environment\";\nimport { NeueBezahlungRequest } from \"./NeueBezahlungRequest\";\nimport { NeueBezahlungFailedException } from \"./NeueBezahlungFailedException\";\nimport { BezahlungBearbeitenRequest } from \"./BezahlungBearbeitenRequest\";\nimport { BezahlungBearbeitenFailedException } from \"./BezahlungBearbeitenFailedException\";\nimport { BezahlungLoeschenFailedException } from \"./BezahlungLoeschenFailedException\";\n\nconst baseUrl = environment.API_URL;\n\nexport class ApiClient {\n\n    constructor(private accountInfoStore: AccountInfoStore) {\n\n    }\n\n    async neuerBenutzer(id: string, secret: string) {\n        try {\n            let res = await postJson(`${baseUrl}/api/v2/accounts`, { id, secret });\n            if (!res.ok) {\n                return { success: false };\n            }\n            return { success: true };\n        }\n        catch(err) {\n            return { success: false };\n        }\n    }\n\n    async getUserInfo() {\n        let res = await fetch(`${baseUrl}/api/v2/userinfo`, { headers: await this.getAuthHeader() });\n        return await res.json();\n    }\n\n    private async getAuthHeader() {\n        return { \"Authorization\": `Bearer ${await this.getAccessToken()}` };\n    }\n\n    async kontokorrentHinzufuegen(oeffentlicherName: string, einladungsCode: string) {\n        let params = \"\";\n        if (oeffentlicherName) {\n            params = `oeffentlicherName=${encodeURIComponent(oeffentlicherName)}`;\n        }\n        else {\n            params = `einladungsCode=${encodeURIComponent(einladungsCode)}`;\n        }\n        let headers = await this.getAuthHeader();\n        let res = await fetch(`${baseUrl}/api/v2/kontokorrents?${params}`, { method: \"PUT\", headers: headers });\n        if (res.status == 404) {\n            return null;\n        }\n        return <KontokorrentInfo[]>await res.json();\n    }\n\n    async kontokorrentsAuflisten() {\n        let res = await fetch(`${baseUrl}/api/v2/kontokorrents`, { headers: await this.getAuthHeader() });\n        if (!res.ok) {\n            throw new ApiException();\n        }\n        return <KontokorrentInfo[]>await res.json();\n    }\n\n\n    async neuerKontokorrent(request: NeuerKontokorrentRequest) {\n        let res = await postJson(`${baseUrl}/api/v2/kontokorrents`, request, await this.getAccessToken());\n        if (res.status == 422) {\n            return { success: false, exists: true };\n        }\n        else if (res.ok) {\n            return { success: true };\n        }\n        return { success: false };\n    }\n\n    async getAktionen(kontokorrentId: string, ab?: number) {\n        let query = ab ? `?ab=${ab}` : \"\";\n        let res = await fetch(`${baseUrl}/api/v2/kontokorrents/${kontokorrentId}/aktionen${query}`, { headers: await this.getAuthHeader() });\n        if (res.status == 404) {\n            return {\n                success: false,\n                notfound: true\n            };\n        }\n        else if (res.ok) {\n            let aktionen: Aktion[] = await res.json();\n            return {\n                success: true,\n                aktionen: this.mapAktionen(aktionen)\n            }\n        }\n    }\n\n    private mapAktionen(aktionen : Aktion[]) : Aktion[] {\n        for (let a of aktionen) {\n            if (a.bezahlung) {\n                a.bezahlung.zeitpunkt = new Date(a.bezahlung.zeitpunkt);\n            }\n        }\n        return aktionen;\n    }\n\n    async neueBezahlung(kontokorrentId: string, request: NeueBezahlungRequest) {\n        let init: RequestInit = {\n            method: \"POST\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/vnd+kontokorrent.hinzufuegenaktion+json\",\n                \"Authorization\": `Bearer ${await this.getAccessToken()}`\n            },\n            body: JSON.stringify(request)\n        };\n        let res = await fetch(`${baseUrl}/api/v2/kontokorrents/${kontokorrentId}/aktionen`, init);\n        if (res.ok) {\n            let aktion = <Aktion>(await res.json());\n            return this.mapAktionen([aktion])[0];\n        }\n        throw new NeueBezahlungFailedException();\n    }\n\n    async bezahlungLoeschen(kontokorrentId: string, bezahlungId:string) {\n        let init: RequestInit = {\n            method: \"POST\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/vnd+kontokorrent.loeschenaktion+json\",\n                \"Authorization\": `Bearer ${await this.getAccessToken()}`\n            },\n            body: JSON.stringify({id:bezahlungId})\n        };\n        let res = await fetch(`${baseUrl}/api/v2/kontokorrents/${kontokorrentId}/aktionen`, init);\n        if (res.ok) {\n            let aktion = <Aktion>(await res.json());\n            return this.mapAktionen([aktion])[0];\n        }\n        throw new BezahlungLoeschenFailedException();\n    }\n\n    async bezahlungBearbeiten(kontokorrentId: string, request: BezahlungBearbeitenRequest) {\n        let init: RequestInit = {\n            method: \"POST\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/vnd+kontokorrent.bearbeitenaktion+json\",\n                \"Authorization\": `Bearer ${await this.getAccessToken()}`\n            },\n            body: JSON.stringify(request)\n        };\n        let res = await fetch(`${baseUrl}/api/v2/kontokorrents/${kontokorrentId}/aktionen`, init);\n        if (res.ok) {\n            let aktion = <Aktion>(await res.json());\n            return this.mapAktionen([aktion])[0];\n        }\n        throw new BezahlungBearbeitenFailedException();\n    }\n\n\n    private async getAccessToken() {\n        let info = await this.accountInfoStore.get();\n        if (null == info) {\n            throw new Error(\"Keine Account Information gespeichert.\");\n        }\n        if (info.type == AccountType.anonym) {\n            let tokenInfo = await this.accountInfoStore.getAccessToken(\"anonymous\");\n            if (null != tokenInfo) {\n                let { token, expires } = JSON.parse(tokenInfo.value);\n                if (token && expires && expires >= +new Date()) {\n                    return token;\n                }\n            }\n            let tokenResponse;\n            try {\n                let res = await postJson(`${baseUrl}/api/v2/token`, { id: info.id, secret: info.secret });\n                if (!res.ok) {\n                    throw new TokenRenewFailedException(false);\n                }\n                tokenResponse = await res.json();\n            }\n            catch(err) {\n                throw new TokenRenewFailedException(true);\n            }\n            await this.accountInfoStore.updateAccessTokenIfNewer(\"anonymous\", JSON.stringify(tokenResponse), tokenInfo?.timestamp);\n            return tokenResponse.token;\n        }\n        else if (info.type == AccountType.google) {\n            throw new InteractionRequiredException();\n            // let flow = new OAuth2PopupFlow({\n            //     authorizationUri: \"https://accounts.google.com/o/oauth2/v2/auth/.well-known/openid-configuration\",\n            //     clientId: \"82890837151-n0e81vsn3ns2qn1ksh7bdohmnlau468k.apps.googleusercontent.com\",\n            //     redirectUri: \"http://localhost:4200\",\n            //     scope: \"openid\",\n            //     responseType: \"id_token\",\n            //     additionalAuthorizationParameters: { \"login_hint\": info.id },\n            //     accessTokenStorageKey: \"access_token_google\"\n            // });\n            // return await flow.token();\n        }\n        else {\n            throw new Error(`Account Typ ${info.type} unbekannt`);\n        }\n    }\n}","import { Reducer } from \"../lib/Reducer\";\nimport { State, AccountState } from \"../State\";\nimport { AccountActions } from \"../actions/AccountActionCreator\";\nimport { KontokorrentListenActions } from \"../actions/KontokorrentListenActionCreator\";\nimport { ActionNames } from \"../actions/ActionNames\";\n\nexport class AccountReducer implements Reducer<AccountState, AccountActions | KontokorrentListenActions> {\n    onDispatch(action: AccountActions | KontokorrentListenActions, updateStore: (a: (s: AccountState) => AccountState) => void): void {\n        switch (action.type) {\n            case ActionNames.AccountCreating: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        accountCreating: true,\n                        accountCreationFailed: false\n                    };\n                })\n            }\n                break;\n            case ActionNames.AccountCreated: {\n                updateStore(s => {\n                    return {\n                        ...s, accountCreating: false,\n                        accountCreated: true,\n                        accountInfo: action.info\n                    };\n                })\n            }\n                break;\n            case ActionNames.AccountCreationFailed: {\n                updateStore(s => {\n                    return {\n                        ...s, accountCreationFailed: true,\n                        accountCreating: false,\n                        accountCreated: false\n                    };\n                })\n            }\n                break;\n            case ActionNames.AccountInitialized: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        accountCreated: true,\n                        accountInfo: action.info\n                    };\n                })\n            }\n                break;\n            case ActionNames.LoggedOut: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        accountCreated: false\n                    };\n                })\n            }\n                break;\n            case ActionNames.LoginExpired:\n                {\n                    updateStore(s => {\n                        return {\n                            ...s,\n                            loginExpired: true\n                        };\n                    })\n                }\n                break;\n            case ActionNames.KontokorrentListeLadenFailed: {\n                if (action.interactionRequired) {\n                    updateStore(s => {\n                        return {\n                            ...s,\n                            loginExpired: true\n                        };\n                    })\n                }\n            }\n                break;\n        }\n    }\n}","import { Reducer } from \"../lib/Reducer\";\nimport { KontokorrentsState, KontokorrentState, Bezahlung, Person, RequestStatus, BezahlungStatus, AngezeigteBezahlungState } from \"../State\";\nimport { KontokorrentListenActions } from \"../actions/KontokorrentListenActionCreator\";\nimport { KontokorrentInfo } from \"../../api/KontokorrentInfo\";\nimport { AccountActions } from \"../actions/AccountActionCreator\";\nimport { BezahlungActions } from \"../actions/BezahlungActionCreator\";\nimport { ActionNames } from \"../actions/ActionNames\";\nimport { KontokorrentHinzufuegenActions } from \"../actions/KontokorrentHinzufuegenActionCreator\";\nimport { KontokorrentActions, KontokorrentBalanceAktualisiert } from \"../actions/KontokorrentActionCreator\";\nimport { ServiceWorkerActions } from \"../actions/ServiceWorkerActions\";\n\ntype Actions = KontokorrentListenActions\n    | AccountActions\n    | BezahlungActions\n    | KontokorrentHinzufuegenActions\n    | KontokorrentActions\n    | ServiceWorkerActions;\ntype PersonOptional = Partial<Omit<Person, \"id\">> & { id: string };\ntype BezhalungOptional = Partial<Omit<Bezahlung, \"id\">> & { id: string };\n\nexport class KontokorrentsReducer implements Reducer<KontokorrentsState, Actions> {\n    onDispatch(action: Actions, updateStore: (a: (s: KontokorrentsState) => KontokorrentsState) => void): void {\n        switch (action.type) {\n            case ActionNames.KontokorrentListeLaden: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        listeLaden: true\n                    };\n                })\n            }\n                break;\n            case ActionNames.KontokorrentListeLadenFailed: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        listeLaden: false\n                    };\n                })\n            }\n                break;\n            case ActionNames.KontokorrentListe: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        kontokorrents: this.extendMap(s.kontokorrents, action.kontokorrents)\n                    };\n                })\n            }\n                break;\n            case ActionNames.KontokorrentHinzufuegen: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        hinzufuegen: true\n                    };\n                })\n            }\n                break;\n            case ActionNames.KontokorrentHinzufuegenFailed: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        hinzufuegen: false,\n                        hinzufuegenFailed: { kontokorrentNotFound: action.notFound },\n                    };\n                })\n            }\n                break;\n            case ActionNames.KontokorrentHinzufuegenSuccess: {\n                updateStore(s => {\n\n                    return {\n                        ...s,\n                        hinzufuegen: false,\n                        kontokorrents: this.extendMap(s.kontokorrents, action.kontokorrents)\n                    };\n                })\n            }\n            case ActionNames.KontokorrentCreating: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        creating: true,\n                        creationFailed: null\n                    };\n                })\n            }\n                break;\n            case ActionNames.KontokorrentCreationFailed: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        creating: false,\n                        creationFailed: {\n                            exists: action.exists\n                        }\n                    };\n                })\n            }\n                break;\n            case ActionNames.KontokorrentCreated: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        creating: false,\n                        kontokorrents: {\n                            ...s.kontokorrents, [action.kontokorrent.id]: {\n                                id: action.kontokorrent.id,\n                                name: action.kontokorrent.name,\n                                synchronisieren: false,\n                                personen: action.kontokorrent.personen.map(p => {\n                                    return {\n                                        balance: 0,\n                                        ...p\n                                    }\n                                }),\n                                bezahlungen: [],\n                                bezahlungAnlegen: null,\n                                angezeigteBezahlung: {}\n                            }\n                        }\n                    };\n                });\n                break;\n            }\n            case ActionNames.KontokorrentGeoeffnet: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        activeKontokorrentId: action.id\n                    };\n                });\n                break;\n            }\n            case ActionNames.KontokorrentBezahlungen: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        kontokorrents: {\n                            ...s.kontokorrents, [action.kontokorrentId]: {\n                                ...s.kontokorrents[action.kontokorrentId],\n                                bezahlungen: action.bezahlungen\n                            }\n                        }\n                    };\n                });\n                break;\n            }\n            case ActionNames.KontokorrentSynchronisieren: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        kontokorrents: {\n                            ...s.kontokorrents, [action.kontokorrentId]: {\n                                ...s.kontokorrents[action.kontokorrentId],\n                                synchronisieren: true\n                            }\n                        }\n                    };\n                });\n                break;\n            }\n            case ActionNames.KontokorrentSynchronisiert: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        kontokorrents: {\n                            ...s.kontokorrents, [action.kontokorrentId]: {\n                                ...s.kontokorrents[action.kontokorrentId],\n                                synchronisieren: false\n                            }\n                        }\n                    };\n                });\n                break;\n            }\n            case ActionNames.KontokorrentBalanceAktualisiert: {\n                updateStore(s => this.extendPersonenInfo(s, action.kontokorrentId, Object.entries(action.balance).map(e => {\n                    return { id: e[0], balance: e[1] };\n                })));\n                break;\n            }\n            case ActionNames.LoginPageGeoeffnet: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        hinzufuegen: false,\n                        hinzufuegenFailed: null\n                    };\n                });\n                break;\n            }\n            case ActionNames.LoggedOut: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        activeKontokorrentId: null,\n                        kontokorrents: {}\n                    };\n                });\n                break;\n            }\n            case ActionNames.BezahlungEintragenKontokorrentGeandert: {\n                updateStore(s => this.updateKontokorrentStatus({\n                    ...s,\n                    activeKontokorrentId: action.kontokorrentId\n                }, action.kontokorrentId, { bezahlungAnlegen: null }));\n                break;\n            }\n            case ActionNames.BezahlungGeoeffnet: {\n                updateStore(s => {\n                    s = {\n                        ...s,\n                        activeKontokorrentId: action.kontokorrentId,\n                    };\n                    s = this.updateAngezeigteBezahlung(s, action.kontokorrentId, action.bezahlungId, {\n                        bearbeitungsStatus: action.bearbeitungsStatus\n                    });\n                    if (action.bezahlung) {\n                        s = this.upsertBezahlung(s, action.kontokorrentId, action.bezahlung);\n                    }\n                    return s;\n                });\n                break;\n            }\n            case ActionNames.NeueBezahlungAnlegen: {\n                updateStore(s => this.updateKontokorrentStatus(s, action.kontokorrentId, { bezahlungAnlegen: RequestStatus.InProgress }));\n                break;\n            }\n            case ActionNames.NeueBezahlungAnlegenFailed: {\n                updateStore(s => this.updateKontokorrentStatus(s, action.kontokorrentId, { bezahlungAnlegen: RequestStatus.Failed }));\n                break;\n            }\n            case ActionNames.NeueBezahlungAngelegt: {\n                updateStore(s => {\n                    s = this.updateKontokorrentStatus(s, action.kontokorrentId, { bezahlungAnlegen: RequestStatus.Success });\n                    return this.upsertBezahlung(s, action.kontokorrentId, action.bezahlung);\n                });\n                break;\n            }\n            case ActionNames.ServiceWorkerBezahlungAnlegen: {\n                updateStore(s => this.upsertBezahlung(s, action.kontokorrentId, { status: BezahlungStatus.Speichern, id: action.bezahlungId }));\n                break;\n            }\n            case ActionNames.ServiceWorkerBezahlungAngelegt: {\n                updateStore(s => this.upsertBezahlung(s, action.kontokorrentId, { status: BezahlungStatus.Gespeichert, id: action.bezahlungId }));\n                break;\n            }\n            case ActionNames.BezahlungBearbeiten: {\n                updateStore(s => this.updateAngezeigteBezahlung(s, action.kontokorrentId, action.bezahlungId, { updateStatus: RequestStatus.InProgress }));\n                break;\n            }\n            case ActionNames.BezahlungBearbeitenFailed: {\n                updateStore(s => this.updateAngezeigteBezahlung(s, action.kontokorrentId, action.bezahlungId, { updateStatus: RequestStatus.Failed }));\n                break;\n            }\n            case ActionNames.BezahlungBearbeitet: {\n                updateStore(s => {\n                    s = this.updateAngezeigteBezahlung(s, action.kontokorrentId, action.bearbeiteteBezahlungId, { updateStatus: RequestStatus.Success });\n                    s = this.removeBezahlung(s, action.kontokorrentId, action.bearbeiteteBezahlungId);\n                    return this.upsertBezahlung(s, action.kontokorrentId, action.bezahlung);\n                });\n                break;\n            }\n            case ActionNames.BezahlungLoeschen: {\n                updateStore(s => this.updateAngezeigteBezahlung(s, action.kontokorrentId, action.bezahlungId, { deleteStatus: RequestStatus.InProgress }));\n                break;\n            }\n            case ActionNames.BezahlungLoeschenFailed: {\n                updateStore(s => this.updateAngezeigteBezahlung(s, action.kontokorrentId, action.bezahlungId, { deleteStatus: RequestStatus.Failed }));\n                break;\n            }\n            case ActionNames.BezahlungGeloescht: {\n                updateStore(s => {\n                    s = this.updateAngezeigteBezahlung(s, action.kontokorrentId, action.geloeschteBezahlungId, { deleteStatus: RequestStatus.Success });\n                    return this.removeBezahlung(s, action.kontokorrentId, action.geloeschteBezahlungId);\n                });\n                break;\n            }\n        }\n    }\n\n    private updateKontokorrentStatus(s: KontokorrentsState, kontokorrentId: string, state: Partial<KontokorrentState>) {\n        return this.updateKontokorrentStatusFn(s, kontokorrentId, ks => { return { ...ks, ...state } });\n    }\n\n    private updateKontokorrentStatusFn(s: KontokorrentsState, kontokorrentId: string, update: (ks: KontokorrentState) => KontokorrentState) {\n        return {\n            ...s,\n            kontokorrents: {\n                ...s.kontokorrents, [kontokorrentId]: update(s.kontokorrents[kontokorrentId])\n            }\n        };\n    }\n\n    private updateAngezeigteBezahlung(s: KontokorrentsState, kontokorrentId: string, bezahlungId: string, state: Partial<AngezeigteBezahlungState>) {\n        return this.updateKontokorrentStatusFn(s, kontokorrentId, ks => {\n            return {\n                ...ks,\n                angezeigteBezahlung: {\n                    ...ks.angezeigteBezahlung,\n                    [bezahlungId]: {\n                        ...(ks.angezeigteBezahlung || {})[bezahlungId],\n                        ...state\n                    }\n                }\n            }\n        })\n    }\n\n    private upsertBezahlung(s: KontokorrentsState, kontokorrentId: string, b: BezhalungOptional):\n        KontokorrentsState {\n        let bezahlungen = s.kontokorrents[kontokorrentId]?.bezahlungen || [];\n        let existing = bezahlungen.find(d => b.id == d.id);\n        if (existing) {\n            bezahlungen.splice(bezahlungen.indexOf(existing), 1);\n        }\n        bezahlungen.push({ ...existing, ...b });\n        return {\n            ...s,\n            kontokorrents: {\n                ...s.kontokorrents, [kontokorrentId]: {\n                    ...s.kontokorrents[kontokorrentId],\n                    bezahlungen: bezahlungen\n                }\n            }\n        }\n    }\n\n    private removeBezahlung(s: KontokorrentsState, kontokorrentId: string, bezahlungId: string):\n        KontokorrentsState {\n        let bezahlungen = s.kontokorrents[kontokorrentId]?.bezahlungen || [];\n        let existing = bezahlungen.find(d => bezahlungId == d.id);\n        bezahlungen.splice(bezahlungen.indexOf(existing), 1);\n        return {\n            ...s,\n            kontokorrents: {\n                ...s.kontokorrents, [kontokorrentId]: {\n                    ...s.kontokorrents[kontokorrentId],\n                    bezahlungen: bezahlungen\n                }\n            }\n        }\n    }\n\n    private extendPersonenInfo(s: KontokorrentsState, kontokorrentId: string, personenInfo: PersonOptional[]):\n        KontokorrentsState {\n        let personenMap = new Map((s.kontokorrents[kontokorrentId]?.personen || []).map(p => [p.id, p]));\n        for (let info of personenInfo) {\n            personenMap.set(info.id, { ...personenMap.get(info.id), ...info });\n        }\n        return {\n            ...s,\n            kontokorrents: {\n                ...s.kontokorrents, [kontokorrentId]: {\n                    ...s.kontokorrents[kontokorrentId],\n                    personen: Array.from(personenMap.values())\n                }\n            }\n        }\n    }\n\n    private extendMap(map: { [id: string]: KontokorrentState }, kk: KontokorrentInfo[]) {\n        let kontokorrents: { [id: string]: KontokorrentState } = {};\n        for (let k of kk) {\n            let kontokorrent: KontokorrentState = {\n                ...k,\n                // default props\n                synchronisieren: false,\n                bezahlungen: <Bezahlung[]>[],\n                angezeigteBezahlung: {},\n                // old model\n                ...map[k.id],\n                personen: k.personen.map(v => {\n                    let p = map[k.id]?.personen?.find(p => p.id == v.id);\n                    return {\n                        ...v,\n                        balance: 0,\n                        ...p\n                    }\n                })\n            };\n            kontokorrents[k.id] = kontokorrent;\n        }\n        return kontokorrents;\n    }\n}","import { openDB, IDBPDatabase, DBSchema, unwrap } from \"idb\";\nimport { KontokorrentDbModel } from \"./KontokorrentDbModel\";\nimport { sortByAlphabetically } from \"../utils/sortBy\";\nimport { Aktion } from \"../api/Aktion\";\nimport { AktionDbModel } from \"./AktionDbModel\";\nimport { AccountInfo } from \"./AccountInfo\";\nimport { NeueBezahlungDbModel } from \"./NeueBezahlungDbModel\";\nimport { BearbeitungsStatus } from \"./BearbeitungsStatus\";\n\n\nconst KontokorrentsStore = \"KontokorrentsStore\";\nconst AppStateStore = \"AppStateStore\";\nconst AktionenStore = \"AktionenStore\";\nconst NeueBezahlungenStore = \"NeueBezahlungenStore\";\n\ninterface AccessTokenInfo {\n    timestamp: number;\n    value: string;\n    type: \"google\" | \"anonymous\";\n}\n\ninterface AppSettings {\n    id: number;\n    zuletztGesehenerKontokorrentId: string\n    accesstokens: AccessTokenInfo[];\n    accountinfo: AccountInfo;\n}\n\ninterface KontokorrentDbSchema extends DBSchema {\n    KontokorrentsStore: {\n        key: string;\n        value: KontokorrentDbModel;\n        indexes: { \"oeffentlicherName\": string };\n    };\n    AppStateStore: {\n        value: AppSettings;\n        key: number;\n    };\n    AktionenStore: {\n        key: [number, string],\n        value: AktionDbModel,\n        indexes: { \"kontokorrentId\": string };\n    };\n    NeueBezahlungenStore: {\n        key: string,\n        value: NeueBezahlungDbModel,\n        indexes: { \"kontokorrentId\": string };\n    }\n}\n\n\nconst initialSettings: (() => AppSettings) = () => { return { id: 0, zuletztGesehenerKontokorrentId: null, accesstokens: [], accountinfo: null } };\nexport class KontokorrentDatabase {\n\n    private async withInitialized<T>(cb: (db: IDBPDatabase<KontokorrentDbSchema>) => Promise<T>) {\n        let db = await openDB<KontokorrentDbSchema>(\"kontokorrent-db\", 5, {\n            upgrade(db, oldVersion: number, newVersion: number) {\n                if (oldVersion < 1) {\n                    let store = db.createObjectStore(KontokorrentsStore, { keyPath: \"id\" });\n                    store.createIndex(\"oeffentlicherName\", \"oeffentlicherName\");\n                }\n                if (oldVersion < 2) {\n                    let store = db.createObjectStore(AppStateStore, { keyPath: \"id\" });\n                    store.put(initialSettings());\n                }\n                if (oldVersion < 3) {\n                    let store = db.createObjectStore(AktionenStore, { keyPath: [\"laufendeNummer\", \"kontokorrentId\"] });\n                    store.createIndex(\"kontokorrentId\", \"kontokorrentId\");\n                }\n                if (oldVersion < 5) {\n                    if (db.objectStoreNames.contains(NeueBezahlungenStore)) {\n                        db.deleteObjectStore(NeueBezahlungenStore)\n                    }\n                    let store = db.createObjectStore(NeueBezahlungenStore, { keyPath: \"id\" });\n                    store.createIndex(\"kontokorrentId\", \"kontokorrentId\");\n                }\n            },\n        });\n        try {\n            return await cb(db);\n        }\n        finally {\n            db.close();\n        }\n    }\n\n    async getKontokorrents(): Promise<KontokorrentDbModel[]> {\n        return await this.withInitialized(async db => {\n            return sortByAlphabetically((await db.getAll(KontokorrentsStore)), k => k.name);\n        });\n    }\n\n    async addAktionen(id: string, aktionen: Aktion[]): Promise<void> {\n        if (!aktionen.length) {\n            return;\n        }\n        let mapped = aktionen\n            .map(v => {\n                let a: AktionDbModel = {\n                    ...v,\n                    kontokorrentId: id\n                };\n                return a;\n            });\n        return await this.withInitialized(db => {\n            const unwrapped = unwrap(<IDBPDatabase>db);\n            return new Promise((resolve, reject) => {\n                const tx = unwrapped.transaction(AktionenStore, \"readwrite\");\n                tx.onerror = err => {\n                    console.error(\"addAktionen failed\", err, tx.error);\n                    reject(tx.error);\n                };\n                tx.oncomplete = () => {\n                    resolve();\n                }\n                for (let a of mapped) {\n                    let request = tx.objectStore(AktionenStore).add(a);\n                    request.onerror = ev => {\n                        if (request.error.name == \"ConstraintError\") {\n                            console.log(`Aktion ${a.laufendeNummer} für Kontokorrent ${id} bereits gespeichert.`, ev, request.error);\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                        } else {\n                            console.error(`Aktion ${a.laufendeNummer} für Kontokorrent ${id} konnte nicht gespeichert werden.`, ev, request.error);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    async getZuletztGesehenerKontokorrentId(): Promise<string> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            if (appState.zuletztGesehenerKontokorrentId) {\n                return appState.zuletztGesehenerKontokorrentId;\n            }\n            else {\n                let kks = await (await this.getKontokorrents());\n                if (kks.length) {\n                    return kks[0].id;\n                }\n                return null;\n            }\n        });\n    }\n\n    async setZuletztGesehenerKontokorrentId(id: string): Promise<void> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            appState.zuletztGesehenerKontokorrentId = id;\n            await db.put(AppStateStore, appState);\n        });\n    }\n\n    async setKontokorrents(kontokorrents: {\n        name: string, id: string, personen: { name: string, id: string }[],\n        oeffentlicherName: string\n    }[]): Promise<string[]> {\n        return await this.withInitialized(async db => {\n            let existing: KontokorrentDbModel[] = (await db.getAll(KontokorrentsStore));\n            for (let v of existing.filter(e => !kontokorrents.some(d => e.id === d.id))) {\n                await db.delete(KontokorrentsStore, v.id);\n            }\n            let newIds: string[] = [];\n            for (let v of kontokorrents) {\n                let ex = existing.find(d => d.id == v.id);\n                if (!ex) {\n                    newIds.push(v.id);\n                }\n                let combined = {\n                    ...ex, name: v.name, personen: v.personen, id: v.id,\n                    oeffentlicherName: v.oeffentlicherName\n                };\n                await db.put(KontokorrentsStore, combined);\n            }\n            return newIds;\n        });\n    }\n\n    async addKontokorrent(kk: KontokorrentDbModel): Promise<void> {\n        return await this.withInitialized(async db => {\n            if (!await db.get(KontokorrentsStore, kk.id)) {\n                await db.add(KontokorrentsStore, kk);\n            }\n        });\n    }\n\n    async getKontokorrent(id: string): Promise<KontokorrentDbModel> {\n        return await this.withInitialized(async db => {\n            return <KontokorrentDbModel>await db.get(KontokorrentsStore, id);\n        });\n    }\n\n    async getPerOeffentlichName(id: string): Promise<KontokorrentDbModel> {\n        return await this.withInitialized(async db => {\n            return <KontokorrentDbModel>await db.getFromIndex(KontokorrentsStore, \"oeffentlicherName\", id);\n        });\n    }\n\n    async getAktionen(id: string): Promise<AktionDbModel[]> {\n        return await this.withInitialized(async db => {\n            return await db.getAllFromIndex(AktionenStore, \"kontokorrentId\", id);\n        });\n    }\n\n    async clear() {\n        return await this.withInitialized(async db => {\n            await db.clear(AktionenStore);\n            await db.clear(KontokorrentsStore);\n            await db.put(AppStateStore, initialSettings());\n        });\n    }\n\n    async getAccessToken(tokenType: \"anonymous\" | \"google\"): Promise<AccessTokenInfo> {\n        return await this.withInitialized(async db => {\n            let appState = await db.get(AppStateStore, 0);\n            return (appState.accesstokens || []).find(t => t.type === tokenType);\n        });\n    }\n\n    async updateAccessTokenIfNewer(tokenType: \"anonymous\" | \"google\", value: string, lastTimeStamp: number): Promise<boolean> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\", { durability: \"strict\" });\n            let appState = await tx.store.get(0);\n            if (!appState.accesstokens) {\n                appState.accesstokens = [];\n            }\n            let existing = appState.accesstokens.find(t => t.type === tokenType);\n            if (!existing) {\n                appState.accesstokens.push({\n                    timestamp: 1,\n                    type: tokenType,\n                    value: value\n                });\n            } else if (existing.timestamp == lastTimeStamp) {\n                existing.value = value;\n                existing.timestamp++;\n            }\n            else {\n                console.error(`The accesstoken of type ${tokenType} was already updated since reading.`);\n                await tx.done;\n                return false;\n            }\n            await tx.store.put(appState);\n            await tx.done;\n            return true;\n        });\n    }\n\n    async setAccountInfo(accountInfo: AccountInfo): Promise<void> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\");\n            let appState = await tx.store.get(0);\n            appState.accountinfo = accountInfo;\n            await tx.store.put(appState);\n            await tx.done;\n        });\n    }\n\n    async getAccountInfo(): Promise<AccountInfo> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readonly\");\n            let appState = await tx.store.get(0);\n            return appState?.accountinfo;\n        });\n    }\n\n    async clearAccountInfo(): Promise<void> {\n        return await this.withInitialized(async db => {\n            const tx = db.transaction(AppStateStore, \"readwrite\");\n            let appState = await tx.store.get(0);\n            appState.accountinfo = null;\n            appState.accesstokens = [];\n            await tx.store.put(appState);\n            await tx.done;\n        });\n    }\n\n    async getZwischengespeicherteBezahlungen(): Promise<NeueBezahlungDbModel[]> {\n        return await this.withInitialized(async db => {\n            return (await db.getAll(NeueBezahlungenStore));\n        });\n    }\n\n    async getBezahlungAktion(kontokorrentId: string, bezahlungId: string): Promise<AktionDbModel> {\n        return await this.withInitialized(async db => {\n            var aktionen = db.getAllFromIndex(AktionenStore, \"kontokorrentId\", kontokorrentId);\n            return (await aktionen).find(a => a.bezahlung && a.bezahlung.id == bezahlungId);\n        });\n    }\n\n    async getBearbeitungsStatus(kontokorrentId: string, bezahlungId: string): Promise<{ aktion: AktionDbModel, status: BearbeitungsStatus }> {\n        return await this.withInitialized(async db => {\n            let aktionen: AktionDbModel[] = await db.getAllFromIndex(AktionenStore, \"kontokorrentId\", kontokorrentId);\n            let aktion = aktionen.find(a => a.bezahlung && a.bezahlung.id == bezahlungId);\n            if (!aktion) {\n                let neueBezahlungen: NeueBezahlungDbModel[] = await db.getAllFromIndex(NeueBezahlungenStore, \"kontokorrentId\", kontokorrentId);\n                let neueBezahlung = neueBezahlungen.find(a => a.id == bezahlungId);\n                if (neueBezahlung) {\n                    return { aktion: null, status: BearbeitungsStatus.Zwischengespeichert };\n                }\n                return { aktion: null, status: BearbeitungsStatus.NichtGefunden };\n            }\n            let bearbeitendeAktion = aktionen.find(a => a.bearbeiteteBezahlungId == bezahlungId);\n            if (null != bearbeitendeAktion) {\n                return { aktion: aktion, status: BearbeitungsStatus.Bearbeitet };\n            }\n            let loeschendeAktion = aktionen.find(a => a.geloeschteBezahlungId == bezahlungId);\n            if (null != loeschendeAktion) {\n                return { aktion: aktion, status: BearbeitungsStatus.Geloescht };\n            }\n            return { aktion: aktion, status: BearbeitungsStatus.Bearbeitbar };\n        });\n    }\n\n    async getZwischengespeicherteBezahlungenForKontokorrent(kontokorrentId: string): Promise<NeueBezahlungDbModel[]> {\n        return await this.withInitialized(async db => {\n            return await db.getAllFromIndex(NeueBezahlungenStore, \"kontokorrentId\", kontokorrentId);\n        });\n    }\n\n    async bezahlungZwischenspeichern(m: NeueBezahlungDbModel) {\n        return await this.withInitialized(async db => {\n            db.add(NeueBezahlungenStore, m);\n        });\n    }\n\n    async zwischengespeicherteBezahlungErledigt(id: string) {\n        await this.withInitialized(async db => {\n            db.delete(NeueBezahlungenStore, id);\n        });\n    }\n}\n","import { Store } from \"../Store\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"./RoutingActionCreator\";\nimport { testFeatures } from \"../../lib/testFeatures\";\nimport { AccountActionCreator, accountActionCreatorFactory } from \"./AccountActionCreator\";\nimport { Router } from \"route-it/dist/router\";\nimport { KontokorrentListenActionCreator, kontokorrentListenActionCreatorFactory } from \"./KontokorrentListenActionCreator\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { Paths } from \"../../routing/KontokorrentRouteResolver\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { NeueBezahlungBackgroundSyncTag } from \"../../sw.constants\";\n\nexport class InitializationActionCreator {\n\n    constructor(private store: Store,\n        private db: KontokorrentDatabase,\n        private routingActionCreator: RoutingActionCreator,\n        private accountActionCreator: AccountActionCreator,\n        private kontokorrentsActionCreator: KontokorrentListenActionCreator,\n        private router: Router<unknown>) {\n\n    }\n\n    async initializeApplication() {\n        if (!(await testFeatures()).allPassed) {\n            this.router.run();\n            this.routingActionCreator.navigateFeaturesRequired();\n            return;\n        }\n        let initialized = await this.accountActionCreator.initializeAccount();\n        if (!initialized) {\n            window.history.replaceState({}, document.title, Paths.Login);\n        }\n        this.router.run();\n        if (initialized) {\n            await this.kontokorrentsActionCreator.syncKontokorrentListe();\n            if (\"requestIdleCallback\" in window) {\n                window.requestIdleCallback(() => {\n                    this.zwischengespeicherteSynchronisieren();\n                });\n            }\n            else {\n                this.zwischengespeicherteSynchronisieren();\n            }\n        }\n    }\n\n    private async zwischengespeicherteSynchronisierenAsync(): Promise<void> {\n        if (\"serviceWorker\" in navigator && \"SyncManager\" in window) {\n            let reg = await navigator.serviceWorker.ready;\n            if ((await this.db.getZwischengespeicherteBezahlungen()).length) {\n                await reg.sync.register(NeueBezahlungBackgroundSyncTag);\n                console.log(\"background sync scheduled\");\n            }\n        }\n    }\n\n    private zwischengespeicherteSynchronisieren() {\n        this.zwischengespeicherteSynchronisierenAsync()\n            .catch(err => console.error(err));\n    }\n}\n\nexport function initializationActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"InitializationActionCreator\",\n        serviceLocator => new InitializationActionCreator(serviceLocator.store,\n            serviceLocator.db,\n            routingActionCreatorFactory(serviceLocator),\n            accountActionCreatorFactory(serviceLocator),\n            kontokorrentListenActionCreatorFactory(serviceLocator),\n            serviceLocator.router));\n}","import { Reducer } from \"../lib/Reducer\";\nimport { BeschreibungVorschlagState } from \"../State\";\nimport { ActionNames } from \"../actions/ActionNames\";\nimport { BeschreibungVorschlagActions } from \"../actions/BeschreibungVorschlagActionCreator\";\n\nexport class BeschreibungVorschlagReducer implements Reducer<BeschreibungVorschlagState, BeschreibungVorschlagActions> {\n    onDispatch(action: BeschreibungVorschlagActions, updateStore: (a: (s: BeschreibungVorschlagState) => BeschreibungVorschlagState) => void): void {\n        switch (action.type) {\n            case ActionNames.BeschreibungsVorschlaege: {\n                updateStore(s => {\n                    return {\n                        ...s,\n                        kontokorrentId: action.kontokorrentId,\n                        vorschlaege: action.vorschlaege\n                    };\n                })\n            }\n                break;\n        }\n    }\n}","import { Router, BodyChildRouteRenderer } from \"route-it\";\nimport { KontokorrentRouteResolver } from \"./routing/KontokorrentRouteResolver\";\nimport { Store } from \"./state/Store\";\nimport { ServiceLocator } from \"./ServiceLocator\";\nimport { AccountInfoStore } from \"./lib/AccountInfoStore\";\nimport { ApiClient } from \"./api/ApiClient\";\nimport { AccountReducer } from \"./state/reducers/AccountReducer\";\nimport { KontokorrentsReducer } from \"./state/reducers/KontokorrentsReducer\";\nimport \"./styles.scss\";\nimport { AsyncRouteResolver } from \"route-it/dist/router\";\nimport { KontokorrentDatabase } from \"./lib/KontokorrentDatabase\";\nimport { initializationActionCreatorFactory } from \"./state/actions/InitializationActionCreator\";\nimport { ServiceWorkerActions } from \"./state/actions/ServiceWorkerActions\";\nimport { BeschreibungVorschlagReducer } from \"./state/reducers/BeschreibungVorschlaegeReducer\";\n\nif (\"serviceWorker\" in navigator) {\n    window.addEventListener(\"load\", async () => {\n        navigator.serviceWorker.register(\"./sw.js\").then(registration => {\n        }).catch(registrationError => {\n            console.log('SW registration failed: ', registrationError);\n        });\n    });\n}\n\nasync function run() {\n    const store = new Store(() => {\n        return {\n            account: {\n                accountCreated: false,\n                accountCreating: false,\n                accountCreationFailed: false,\n                loginExpired: false,\n                accountInfo: null\n            },\n            kontokorrents: {\n                hinzufuegen: false,\n                hinzufuegenFailed: null,\n                creating: false,\n                creationFailed: null,\n                kontokorrents: {},\n                listeLaden: false,\n                activeKontokorrentId: null\n            },\n            beschreibungVorschlaege: {\n                vorschlaege: [],\n                kontokorrentId: null\n            }\n        }\n    });\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.addEventListener(\"message\", ev => {\n            if (ev.data?.type == \"statedispatch\") {\n                let msg = ev.data.msg as ServiceWorkerActions;\n                store.dispatch(msg);\n            }\n        });\n    }\n    const routeResolver = new KontokorrentRouteResolver(store);\n    const router = new Router(routeResolver as AsyncRouteResolver<HTMLElement>, new BodyChildRouteRenderer());\n    const db = new KontokorrentDatabase();\n    store.addReducer(\"account\", new AccountReducer());\n    store.addReducer(\"kontokorrents\", new KontokorrentsReducer());\n    store.addReducer(\"beschreibungVorschlaege\", new BeschreibungVorschlagReducer());\n\n    const accountInfoStore = new AccountInfoStore(db);\n    const apiClient = new ApiClient(accountInfoStore);\n\n    const serviceLocator = new ServiceLocator(store,\n        router,\n        apiClient,\n        db,\n        accountInfoStore);\n    routeResolver.setServiceLocator(serviceLocator);\n\n    await initializationActionCreatorFactory(serviceLocator).initializeApplication();\n}\n\nrun().catch(err => console.error(err));","export enum AccountType {\n    google = \"google\",\n    anonym = \"anonym\"\n};\n","import { KontokorrentDatabase } from \"./KontokorrentDatabase\";\n\nimport { v4 as uuid } from \"uuid\";\n\nexport function testFeatures(): Promise<{ allPassed: boolean }> {\n    return new Promise((resolve, reject) => {\n        let indexedDBEnabled = \"indexedDB\" in window;\n        if (indexedDBEnabled) {\n            const testdbname = uuid();\n            let res = window.indexedDB.open(testdbname, 1);\n            res.onsuccess = () => {\n                resolve({\n                    allPassed: true\n                });\n                res.result.close();\n                window.indexedDB.deleteDatabase(testdbname);\n            };\n            res.onerror = () => {\n                resolve({\n                    allPassed: false\n                });\n            }\n        } else {\n            resolve({\n                allPassed: false\n            });\n        }\n    });\n}","import { Router } from \"route-it\";\nimport { ServiceLocator } from \"../ServiceLocator\";\nimport \"../components/FeaturesRequired/FeaturesRequired\";\nimport { FeaturesRequired } from \"../components/FeaturesRequired/FeaturesRequired\";\nimport { Store } from \"../state/Store\";\nimport { AsyncRouteResolver } from \"route-it/dist/router\";\n\n\nexport enum Paths {\n    Login = \"login\",\n    Info = \"info\",\n    Home = \"\",\n    FeaturesRequired = \"features-required\",\n    Kontokorrents = \"kontokorrents\",\n    CreateEvent = \"create-event\",\n    BezahlungEintragen = \"eintragen\",\n    MultiBezahlungEintragen = \"multi-eintragen\",\n    DatabaseDebug = \"database-debug\"\n}\n\nexport class KontokorrentRouteResolver implements AsyncRouteResolver<HTMLElement> {\n    constructor(private store: Store) {\n    }\n\n    serviceLocator: ServiceLocator;\n    setServiceLocator(serviceLocator: ServiceLocator) {\n        this.serviceLocator = serviceLocator;\n    }\n\n    private async getKontokorrentPageComponent() {\n        const { KontokorrentPage } = await import(\"../components/KontokorrentPage/KontokorrentPage\");\n        let component = new KontokorrentPage();\n        component.addServices(this.serviceLocator);\n        return component;\n    }\n\n    async resolve(lastRoute: string, currentRoute: string, router: Router<HTMLElement>) {\n        switch (currentRoute) {\n            case Paths.Info:\n                const { Info } = await import(\"../components/Info/info\");\n                let component = new Info();\n                component.addServices(this.serviceLocator);\n                return component;\n            case Paths.FeaturesRequired: {\n                let component = new FeaturesRequired();\n                component.addServices(this.serviceLocator);\n                return component;\n            }\n            case Paths.Login: {\n                const { Login } = await import(\"../components/Login/Login\");\n                let component = new Login();\n                component.addServices(this.serviceLocator);\n                return component;\n            }\n            case Paths.CreateEvent: {\n                const { CreateKontokorrent } = await import(\"../components/CreateKontokorrent/CreateKontokorrent\");\n                let component = new CreateKontokorrent();\n                component.addServices(this.serviceLocator);\n                return component;\n            }\n        }\n        if (!this.store.state.account.accountCreated) {\n            return false;\n        }\n        switch (currentRoute) {\n            case Paths.BezahlungEintragen: {\n                const { BezahlungEintragenPage } = await import(\"../components/BezahlungEintragenPage/BezahlungEintragenPage\");\n                let component = new BezahlungEintragenPage();\n                component.addServices(this.serviceLocator);\n                return component;\n            }\n            case Paths.MultiBezahlungEintragen: {\n                const { MultiBezahlungEintragenPage } = await import(\"../components/MultiBezahlungEintragenPage/MultiBezahlungEintragenPage\");\n                let component = new MultiBezahlungEintragenPage();\n                component.addServices(this.serviceLocator);\n                return component;\n            }\n            case Paths.DatabaseDebug: {\n                const { DatabaseDebug } = await import(\"../components/DatabaseDebug/DatabaseDebug\");\n                let component = new DatabaseDebug();\n                component.addServices(this.serviceLocator);\n                return component;\n            }\n        }\n        let kontokorrentsRoute = /^kontokorrents\\/([a-zA-Z0-9\\-]+)$/.exec(currentRoute);\n        if (kontokorrentsRoute) {\n            let id: string = kontokorrentsRoute[1];\n            let component = await this.getKontokorrentPageComponent();\n            component.setRouteParameters(id);\n            return component;\n        }\n        let bezahlungRoute = /^kontokorrents\\/([a-zA-Z0-9\\-]+)\\/bezahlungen\\/([a-zA-Z0-9\\-]+)$/.exec(currentRoute);\n        if (bezahlungRoute) {\n            let kontokorrentId = bezahlungRoute[1];\n            let bezahlungId = bezahlungRoute[2];\n            const { BezahlungPage } = await import(\"../components/BezahlungPage/BezahlungPage\");\n            let component = new BezahlungPage();\n            component.addServices(this.serviceLocator);\n            component.setRouteParameters(kontokorrentId, bezahlungId);\n            return component;\n        }\n        let component = await this.getKontokorrentPageComponent();\n        component.addServices(this.serviceLocator);\n        return component;\n    }\n}\n","import template from \"./FeaturesRequired.html\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { testFeatures } from \"../../lib/testFeatures\";\nexport class FeaturesRequired extends HTMLElement {\n    routingActionCreator: RoutingActionCreator;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n    }\n\n    connectedCallback() {\n        testFeatures().then(t => {\n            if (t.allPassed) {\n                this.routingActionCreator.navigateHome();\n                window.location.reload();\n            }\n        });\n    }\n\n\n    disconnectedCallback() {\n    }\n}\n\ncustomElements.define('app-features-required', FeaturesRequired);","import { AccountInfo } from \"../lib/AccountInfo\";\nimport { BearbeitungsStatus } from \"../lib/BearbeitungsStatus\";\n\nexport interface AccountState {\n    accountCreated: boolean,\n    accountCreating: boolean,\n    accountCreationFailed: boolean\n    loginExpired: boolean;\n    accountInfo: AccountInfo\n}\n\nexport interface KontokorrentsState {\n    kontokorrents: { [id: string]: KontokorrentState };\n    hinzufuegen: boolean;\n    listeLaden: boolean;\n    hinzufuegenFailed: {\n        kontokorrentNotFound: boolean\n    }\n    creating: boolean;\n    creationFailed: { exists: boolean };\n    activeKontokorrentId: string;\n}\n\nexport interface Person {\n    name: string;\n    id: string;\n    balance: number;\n}\n\nexport enum BezahlungStatus {\n    Zwischengespeichert = \"zwischengespeichert\",\n    Speichern = \"speichern\",\n    Gespeichert = \"gespeichert\"\n}\n\nexport interface Bezahlung {\n    id: string;\n    zeitpunkt: Date;\n    bezahlendePersonId: string;\n    empfaengerIds: string[];\n    wert: number;\n    beschreibung: string;\n    status: BezahlungStatus\n}\n\nexport const enum RequestStatus {\n    InProgress,\n    Success,\n    Failed\n}\n\nexport interface AngezeigteBezahlungState {\n    bearbeitungsStatus: BearbeitungsStatus;\n    updateStatus?: RequestStatus;\n    deleteStatus?: RequestStatus;\n}\n\nexport interface KontokorrentState {\n    id: string;\n    name: string;\n    personen: Person[];\n    bezahlungen: Bezahlung[];\n    synchronisieren: boolean;\n    bezahlungAnlegen: RequestStatus;\n    angezeigteBezahlung: { [id: string]: AngezeigteBezahlungState }\n}\n\nexport interface BeschreibungVorschlagState {\n    kontokorrentId: string;\n    vorschlaege: string[];\n}\n\nexport interface State {\n    account: AccountState\n    kontokorrents: KontokorrentsState;\n    beschreibungVorschlaege: BeschreibungVorschlagState;\n}\n","import { Store } from \"../Store\";\nimport { ApiClient } from \"../../api/ApiClient\";\nimport { Action } from \"../lib/Action\";\nimport { AccountInfoStore } from \"../../lib/AccountInfoStore\";\nimport { v4 as uuid } from \"uuid\";\nimport { AccountType } from \"../../lib/AccountType\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"./RoutingActionCreator\";\nimport { TokenRenewFailedException } from \"../../api/TokenRenewFailedException\";\nimport { InteractionRequiredException } from \"../../api/InteractionRequiredException\";\nimport { AccountInfo } from \"../../lib/AccountInfo\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { ActionNames } from \"./ActionNames\";\n\n\nexport class AccountCreating implements Action {\n    readonly type = ActionNames.AccountCreating;\n    constructor() {\n\n    }\n}\n\nexport class AccountCreationFailed implements Action {\n    readonly type = ActionNames.AccountCreationFailed;\n    constructor() {\n\n    }\n}\n\nexport class AccountCreated implements Action {\n    readonly type = ActionNames.AccountCreated;\n    constructor(public info: AccountInfo) {\n\n    }\n}\n\nexport class AccountInitialized implements Action {\n    readonly type = ActionNames.AccountInitialized;\n    constructor(public info: AccountInfo) {\n\n    }\n}\n\nexport class LoggedOut implements Action {\n    readonly type = ActionNames.LoggedOut;\n    constructor() {\n\n    }\n}\n\nexport class LoginExpired implements Action {\n    readonly type = ActionNames.LoginExpired;\n    constructor() {\n\n    }\n}\n\nexport type AccountActions = AccountInitialized\n    | AccountCreating\n    | AccountCreated\n    | AccountCreationFailed\n    | LoggedOut\n    | LoginExpired;\n\nexport class AccountActionCreator {\n\n    constructor(private store: Store,\n        private apiClient: ApiClient,\n        private accountInfoStore: AccountInfoStore,\n        private routingActionCreator: RoutingActionCreator,\n        private db: KontokorrentDatabase) {\n    }\n\n    async initializeAccount(): Promise<boolean> {\n        let info = await this.accountInfoStore.get();\n        if (!info) {\n            return false;\n        }\n        this.store.dispatch(new AccountInitialized(info));\n        this.getUserInfo();\n        return true;\n    }\n\n    async getUserInfo() {\n        try {\n            let userInfo = await this.apiClient.getUserInfo();\n        }\n        catch (e) {\n            if (e instanceof TokenRenewFailedException) {\n                let accountInfo = await this.accountInfoStore.get();\n                if (!e.networkError && accountInfo.type == AccountType.anonym) {\n                    // anonymer token renew failed - wir haben ein ernstes problem\n                    // reset and duck out\n                    await this.accountInfoStore.clear();\n                    window.location.reload();\n                }\n            }\n            else if (e instanceof InteractionRequiredException) {\n                this.store.dispatch(new LoginExpired());\n            }\n        }\n    }\n\n    async ensureAccount() {\n        if (!this.store.state.account.accountCreated) {\n            let accountInfo = {\n                id: uuid(),\n                secret: uuid(),\n                type: AccountType.anonym\n            };\n            this.store.dispatch(new AccountCreating());\n            let res = await this.apiClient.neuerBenutzer(accountInfo.id, accountInfo.secret);\n            if (!res.success) {\n                this.store.dispatch(new AccountCreationFailed());\n            }\n            else {\n                this.store.dispatch(new AccountCreated(accountInfo));\n                await this.accountInfoStore.set(accountInfo);\n            }\n            return res.success;\n        }\n        return true;\n    }\n\n    async logout() {\n        await this.accountInfoStore.clear();\n        await this.db.clear();\n        this.store.dispatch(new LoggedOut());\n        this.routingActionCreator.navigateLogin();\n    }\n}\n\nexport function accountActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"AccountActionCreator\",\n        serviceLocator => new AccountActionCreator(serviceLocator.store,\n            serviceLocator.apiClient,\n            serviceLocator.accountInfoStore,\n            routingActionCreatorFactory(serviceLocator),\n            serviceLocator.db\n        ));\n}","import { Store } from \"../Store\";\nimport { ApiClient } from \"../../api/ApiClient\";\nimport { Action } from \"../lib/Action\";\nimport { KontokorrentInfo } from \"../../api/KontokorrentInfo\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { InteractionRequiredException } from \"../../api/InteractionRequiredException\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"./RoutingActionCreator\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { ActionNames } from \"./ActionNames\";\n\nexport class KontokorrentListeLaden implements Action {\n    readonly type = ActionNames.KontokorrentListeLaden;\n    constructor() {\n\n    }\n}\n\nexport class KontokorrentListe implements Action {\n    readonly type = ActionNames.KontokorrentListe;\n    constructor(public kontokorrents: KontokorrentInfo[]) {\n\n    }\n}\n\nexport class KontokorrentListeLadenFailed implements Action {\n    readonly type = ActionNames.KontokorrentListeLadenFailed;\n    constructor(public interactionRequired: boolean) {\n\n    }\n}\n\nexport type KontokorrentListenActions =\n    | KontokorrentListeLaden\n    | KontokorrentListeLadenFailed\n    | KontokorrentListe;\n\nexport class KontokorrentListenActionCreator {\n    constructor(private store: Store,\n        private apiClient: ApiClient,\n        private routingActionCreator: RoutingActionCreator,\n        private db: KontokorrentDatabase) {\n\n    }\n\n    async navigiereZuLetztGesehenem(replace?: boolean) {\n        let id = await this.db.getZuletztGesehenerKontokorrentId();\n        if (id) {\n            this.routingActionCreator.navigateKontokorrent(id, replace);\n            return true;\n        }\n        return false;\n    }\n\n    async syncKontokorrentListe() {\n        this.store.dispatch(new KontokorrentListeLaden());\n        const listenTask = this.apiClient.kontokorrentsAuflisten();\n\n        let kontokorrents = await this.db.getKontokorrents();\n        this.store.dispatch(new KontokorrentListe(kontokorrents));\n        try {\n            let liste = await listenTask;\n            await this.db.setKontokorrents(liste.map(e => {\n                return {\n                    id: e.id,\n                    name: e.name,\n                    personen: e.personen,\n                    oeffentlicherName: e.oeffentlicherName\n                }\n            }));\n            this.store.dispatch(new KontokorrentListe(liste));\n        }\n        catch (e) {\n            if (e instanceof InteractionRequiredException) {\n                this.store.dispatch(new KontokorrentListeLadenFailed(true));\n            }\n            else {\n                this.store.dispatch(new KontokorrentListeLadenFailed(false));\n            }\n        }\n    }\n}\n\nexport function kontokorrentListenActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"KontokorrentListenActionCreator\",\n        serviceLocator => new KontokorrentListenActionCreator(\n            serviceLocator.store,\n            serviceLocator.apiClient,\n            routingActionCreatorFactory(serviceLocator),\n            serviceLocator.db\n        ));\n}","import { Router } from \"route-it\";\nimport { Paths } from \"../../routing/KontokorrentRouteResolver\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nexport class RoutingActionCreator {\n    constructor(private router: Router<HTMLElement>) {\n    }\n    navigateHome() {\n        this.router.navigate(Paths.Home, null);\n    }\n    navigateLogin(replace?: boolean) {\n        this.router.navigate(Paths.Login, null, replace);\n    }\n    navigateFeaturesRequired() {\n        this.router.navigate(Paths.FeaturesRequired, null);\n    }\n    navigate(path: string) {\n        this.router.navigate(path, null);\n    }\n    navigateKontokorrent(id: string, replace?: boolean) {\n        this.router.navigate(`${Paths.Kontokorrents}/${id}`, null, replace);\n    }\n    navigateBezahlung(kontokorrentId: string, id: string, replace?: boolean) {\n        this.router.navigate(`kontokorrents/${kontokorrentId}/bezahlungen/${id}`, null, replace);\n    }\n}\n\nexport function routingActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"RoutingActionCreator\",\n        serviceLocator => new RoutingActionCreator(serviceLocator.router));\n}\n","export const NeueBezahlungBackgroundSyncTag = \"NeueBezahlungBackgroundSync\";","export function sortByAlphabetically<T, P extends keyof T>(collection: T[], keySelector: (x: T) => string): T[] {\n    return collection.sort((a, b) => keySelector(a).toLowerCase().localeCompare(keySelector(b).toLowerCase()));\n}","// Module\nvar code = \"<h1>Speicherzugriff benötigt</h1> Kontokorrent speichert die Zahlungen und weitere Informationen im lokalen Speicher dieses Geräts. Auf diese Weise kann man für einige Tage eingeloggt bleiben, und die Anwendung auch verwenden, wenn die Internetverbindung schlecht ist. In den meisten Browsern (Chrome, Edge) muss dazu der Webseite erlaubt werden <strong>Cookies</strong> zu speichern. Nachdem die Berechtigung erteilt wurde die Webseite neu laden.\";\n// Exports\nmodule.exports = code;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n// It's empty as some runtime module handles the default behavior\n__webpack_require__.x = function() {}\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"\" + {\"220\":\"57ab50f3e041c05b6385\",\"443\":\"37d31356754f9375c485\",\"458\":\"81f5bce0c80087f8ac62\",\"493\":\"c078ef1dee43c5c4a1ac\",\"568\":\"4dac6b29fa73b28bbebf\",\"575\":\"7ef16d73f3031403fb0a\",\"581\":\"4ecb940578583eee0f86\",\"635\":\"cd9ec37f33e37a6460d3\",\"697\":\"7ed920b106fc209236b0\",\"938\":\"03b04fd5d322707a1c92\",\"971\":\"bb42d4052bd9b4c81a9c\"}[chunkId] + \".bundle.js\";\n};","// This function allow to reference all chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"\" + (chunkId === 826 ? \"index\" : chunkId) + \".\" + {\"119\":\"31d6cfe0d16ae931b73c\",\"220\":\"8c5b220bf6f482881a90\",\"443\":\"9ac55577324a9d8770ee\",\"458\":\"31d6cfe0d16ae931b73c\",\"493\":\"505ccf4a800e1bfdffd6\",\"568\":\"31d6cfe0d16ae931b73c\",\"575\":\"e256e36af4cdca485fe4\",\"581\":\"235039f640690a82cbb1\",\"635\":\"806c079fde03ae5e3fe0\",\"697\":\"1978569dbeabf274902f\",\"858\":\"31d6cfe0d16ae931b73c\",\"938\":\"a52825de2d65447b7fb8\",\"971\":\"31d6cfe0d16ae931b73c\"}[chunkId] + \".css\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/v2/\";","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// Promise = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t826: 0\n};\n\nvar deferredModules = [\n\t[5134,858,119]\n];\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) {\n\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n\t\t\t\t\t});\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\nvar checkDeferredModules = function() {};\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tvar executeModules = data[3];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0, resolves = [];\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tresolves.push(installedChunks[chunkId][0]);\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\tfor(moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\twhile(resolves.length) {\n\t\tresolves.shift()();\n\t}\n\n\t// add entry modules from loaded chunk to deferred list\n\tif(executeModules) deferredModules.push.apply(deferredModules, executeModules);\n\n\t// run deferred modules when all chunks ready\n\treturn checkDeferredModules();\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkkontokorrent\"] = self[\"webpackChunkkontokorrent\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n\nfunction checkDeferredModulesImpl() {\n\tvar result;\n\tfor(var i = 0; i < deferredModules.length; i++) {\n\t\tvar deferredModule = deferredModules[i];\n\t\tvar fulfilled = true;\n\t\tfor(var j = 1; j < deferredModule.length; j++) {\n\t\t\tvar depId = deferredModule[j];\n\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferredModules.splice(i--, 1);\n\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n\t\t}\n\t}\n\tif(deferredModules.length === 0) {\n\t\t__webpack_require__.x();\n\t\t__webpack_require__.x = function() {};\n\t}\n\treturn result;\n}\nvar startup = __webpack_require__.x;\n__webpack_require__.x = function() {\n\t// reset startup function so it can be called again when more startup code is added\n\t__webpack_require__.x = startup || (function() {});\n\treturn (checkDeferredModules = checkDeferredModulesImpl)();\n};","// run startup\nreturn __webpack_require__.x();\n"],"sourceRoot":""}