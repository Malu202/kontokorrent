{"version":3,"sources":["webpack://kontokorrent/./src/components/CreateKontokorrent/CreateKontokorrent.html","webpack://kontokorrent/./src/components/PersonenListe/PersonenListe.html","webpack://kontokorrent/./src/components/PersonenListe/PersonenListenEintrag.html","webpack://kontokorrent/./src/components/PersonenListe/PersonenListenEintrag.ts","webpack://kontokorrent/./src/components/PersonenListe/PersonenListe.ts","webpack://kontokorrent/./src/components/CreateKontokorrent/CreateKontokorrent.ts","webpack://kontokorrent/./src/state/actions/KontokorrentHinzufuegenActionCreator.ts"],"names":["module","exports","PersonenListenEintrag","HTMLElement","super","this","innerHTML","removeButton","querySelector","nameInput","addEventListener","dispatchEvent","Event","CustomEvent","value","PersonenListenEintragTagName","customElements","define","PersonenListe","names","personenListe","querySelectorAll","forEach","v","push","name","addPersonButton","li","document","createElement","e","appendChild","removeChild","CreateKontokorrent","kontokorrentId","oeffentlicherNameManuell","serviceLocator","store","routingActionCreator","accountActionCreator","kontokorrentHinzufuegenActionCreator","element","emptyNameError","eventCreateError","personCountError","eventNameError","createButton","eventName","creating","oeffentlicherName","oeffentlich","oeffentlichBox","oeffentlicherNameError","eventNameDuplicate","accountCreationFailed","personNameDuplicateError","createEvent","bind","style","display","checked","subscription","subscribe","state","applyStoreState","personNames","personen","personCountOk","length","personNameError","some","test","item","index","indexOf","ensureAccount","kontokorrentErstellen","navigateKontokorrent","kontokorrents","account","accountCreating","creationFailed","exists","KontokorrentCreationFailed","type","KontokorrentCreating","KontokorrentCreated","kontokorrent","KontokorrentHinzufuegenFailed","notFound","KontokorrentHinzufuegen","KontokorrentHinzufuegenSuccess","LoginPageGeoeffnet","KontokorrentHinzufuegenActionCreator","apiClient","db","dispatch","id","request","map","res","neuerKontokorrent","success","addKontokorrent","kk","getPerOeffentlichName","kontokorrentHinzufuegen","newIds","setKontokorrents","kontokorrentHinzufuegenActionCreatorFactory","get"],"mappings":"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","file":"3a9f99de5185674238cc.bundle.js","sourcesContent":["// Module\nvar code = \"<h1>Event erstellen</h1> <label for=\\\"event-name\\\">Eventname</label> <input type=\\\"text\\\" id=\\\"event-name\\\" name=\\\"event-name\\\"> <label for=\\\"event-name\\\">Oeffentlich</label> <input type=\\\"checkbox\\\" id=\\\"oeffentlich\\\" name=\\\"oeffentlich\\\" checked=\\\"checked\\\"> <div id=\\\"oeffentlich-box\\\"> <label for=\\\"oeffentlicher-name\\\">Öffentlicher Name</label> <input type=\\\"text\\\" id=\\\"oeffentlicher-name\\\" name=\\\"oeffentlicher-name\\\"> </div> <div id=\\\"empty-name-error\\\" style=\\\"display:none\\\">Für alle Personen Namen angeben</div> <div id=\\\"person-count-error\\\" style=\\\"display:none\\\">Mindestens zwei Personen angeben</div> <div id=\\\"event-create-error\\\" style=\\\"display:none\\\">Kontokorrent konnte nicht erstellt werden</div> <div id=\\\"event-name-duplicate\\\" style=\\\"display:none\\\">Ein Kontokorrent mit diesem Namen exisitert bereits</div> <div id=\\\"event-name-error\\\" style=\\\"display:none\\\">Eventname angeben</div> <div id=\\\"oeffentlicher-name-error\\\" style=\\\"display:none\\\">Öfferntlicher Name: Nur Kleinbuchstaben und Zahlen</div> <div id=\\\"person-name-duplicate-error\\\" style=\\\"display:none\\\">Personennamen müssen unterschiedlich sein</div> <div id=\\\"creating\\\" style=\\\"display:none\\\">Wird erstellt</div> <div id=\\\"account-creation-failed\\\" style=\\\"display:none\\\">Account konnte nicht erstellt werden</div> <app-personen-liste id=\\\"personen-liste\\\"></app-personen-liste> <button id=\\\"create-button\\\">Erstellen</button>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<ul id=\\\"personen-liste\\\" class=\\\"mdc-list mdc-list--non-interactive\\\"> </ul> <button type=\\\"button\\\" id=\\\"add-person\\\">Person hinzufügen</button>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<input type=\\\"text\\\" id=\\\"name\\\" placehoder=\\\"Name\\\"/> <button id=\\\"remove\\\">entfernen</button>\";\n// Exports\nmodule.exports = code;","import template from \"./PersonenListenEintrag.html\";\n\nexport class PersonenListenEintrag extends HTMLElement {\n    private removeButton: HTMLButtonElement;\n    private nameInput: HTMLInputElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n    }\n\n    connectedCallback() {\n        let element = this;\n        this.removeButton = element.querySelector(\"#remove\");\n        this.nameInput = element.querySelector(\"#name\");\n        this.nameInput.addEventListener(\"change\", () => {\n            this.dispatchEvent(new Event(\"change\"));\n        });\n        this.removeButton.addEventListener(\"click\", () => {\n            this.dispatchEvent(new CustomEvent(\"onremove\"));\n        })\n    }\n\n    get name(){\n        return this.nameInput.value;\n    }\n\n    disconnectedCallback() {\n\n    }\n\n}\nexport const PersonenListenEintragTagName = 'app-personen-listen-eintrag'; \ncustomElements.define(PersonenListenEintragTagName, PersonenListenEintrag);\n","import template from \"./PersonenListe.html\";\nimport { PersonenListenEintrag, PersonenListenEintragTagName } from \"./PersonenListenEintrag\";\n\nexport class PersonenListe extends HTMLElement {\n    private addPersonButton: HTMLButtonElement;\n    private personenListe: HTMLUListElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n    }\n\n    get personen() {\n        let names: string[] = [];\n        this.personenListe.querySelectorAll(PersonenListenEintragTagName).forEach((v: PersonenListenEintrag) => names.push(v.name));\n        return names;\n    }\n\n    connectedCallback() {\n        let element = this;\n        this.addPersonButton = element.querySelector(\"#add-person\");\n        this.personenListe = element.querySelector(\"#personen-liste\");\n        this.addPersonButton.addEventListener(\"click\", () => {\n            let li = document.createElement(\"li\");\n            let e = new PersonenListenEintrag();\n            li.appendChild(e);\n            this.personenListe.appendChild(li);\n            e.addEventListener(\"onremove\", () => {\n                this.personenListe.removeChild(li);\n            });\n        });\n    }\n\n    disconnectedCallback() {\n\n    }\n\n}\n\ncustomElements.define('app-personen-liste', PersonenListe);\n","import template from \"./CreateKontokorrent.html\";\nimport { Store } from \"../../state/Store\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { State } from \"../../state/State\";\nimport { AccountActionCreator, accountActionCreatorFactory } from \"../../state/actions/AccountActionCreator\";\nimport \"../PersonenListe/PersonenListe\";\nimport { PersonenListe } from \"../PersonenListe/PersonenListe\";\nimport { v4 as uuid } from \"uuid\";\nimport { KontokorrentListenActionCreator, kontokorrentListenActionCreatorFactory } from \"../../state/actions/KontokorrentListenActionCreator\";\nimport { KontokorrentHinzufuegenActionCreator, kontokorrentHinzufuegenActionCreatorFactory } from \"../../state/actions/KontokorrentHinzufuegenActionCreator\";\n\nexport class CreateKontokorrent extends HTMLElement {\n    store: Store;\n    subscription: () => void;\n    routingActionCreator: RoutingActionCreator;\n    private accountActionCreator: AccountActionCreator;\n\n\n    private personenListe: PersonenListe;\n    private emptyNameError: HTMLDivElement;\n    private eventCreateError: HTMLDivElement;\n    private personCountError: HTMLDivElement;\n    private eventNameError: HTMLDivElement;\n    private createButton: HTMLButtonElement;\n    private eventName: HTMLInputElement;\n    private readonly kontokorrentId: string;\n    private creating: HTMLDivElement;\n    private oeffentlicherName: HTMLInputElement;\n    private oeffentlich: HTMLInputElement;\n    private oeffentlichBox: HTMLDivElement;\n    private oeffentlicherNameManuell: boolean;\n    private oeffentlicherNameError: HTMLDivElement;\n    private eventNameDuplicate: HTMLDivElement;\n    private kontokorrentHinzufuegenActionCreator: KontokorrentHinzufuegenActionCreator;\n    private accountCreationFailed: HTMLDivElement;\n    private personNameDuplicateError: HTMLDivElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.kontokorrentId = uuid();\n        this.oeffentlicherNameManuell = false;\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.accountActionCreator = accountActionCreatorFactory(serviceLocator);\n        this.kontokorrentHinzufuegenActionCreator = kontokorrentHinzufuegenActionCreatorFactory(serviceLocator);\n    }\n\n    connectedCallback() {\n        let element = this;\n        this.personenListe = element.querySelector(\"#personen-liste\");\n        this.emptyNameError = element.querySelector(\"#empty-name-error\");\n        this.eventCreateError = element.querySelector(\"#event-create-error\");\n        this.personCountError = element.querySelector(\"#person-count-error\");\n        this.eventNameError = element.querySelector(\"#event-name-error\");\n        this.createButton = element.querySelector(\"#create-button\");\n        this.eventName = element.querySelector(\"#event-name\");\n        this.creating = element.querySelector(\"#creating\");\n        this.oeffentlicherName = element.querySelector(\"#oeffentlicher-name\");\n        this.oeffentlich = element.querySelector(\"#oeffentlich\");\n        this.oeffentlichBox = element.querySelector(\"#oeffentlich-box\");\n        this.oeffentlicherNameError = element.querySelector(\"#oeffentlicher-name-error\");\n        this.eventNameDuplicate = element.querySelector(\"#event-name-duplicate\");\n        this.accountCreationFailed = element.querySelector(\"#account-creation-failed\");\n        this.personNameDuplicateError = element.querySelector(\"#person-name-duplicate-error\");\n\n\n        this.createButton.addEventListener(\"click\", this.createEvent.bind(this));\n\n        this.oeffentlich.addEventListener(\"change\", () => {\n            this.oeffentlichBox.style.display = this.oeffentlich.checked ? \"block\" : \"none\";\n        });\n\n        this.eventName.addEventListener(\"change\", () => {\n            if (!this.oeffentlicherNameManuell) {\n                this.oeffentlicherName.value = this.eventName.value;\n            }\n        });\n\n        this.oeffentlicherName.addEventListener(\"change\", () => {\n            this.oeffentlicherNameManuell = true;\n        });\n\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.applyStoreState(this.store.state);\n    }\n\n    async createEvent() {\n        let eventName = this.eventName.value;\n        let personNames = this.personenListe.personen;\n        this.eventNameError.style.display = eventName ? \"none\" : \"block\";\n        let personCountOk = personNames.length >= 2;\n        this.personCountError.style.display = personCountOk ? \"none\" : \"block\";\n        let personNameError = personNames.some(v => !v);\n        this.emptyNameError.style.display = personNameError ? \"block\" : \"none\";\n        let oeffentlicherNameError = this.oeffentlich.checked && (!this.oeffentlicherName.value || !/^[a-z0-9]+$/.test(this.oeffentlicherName.value));\n        this.oeffentlicherNameError.style.display = oeffentlicherNameError ? \"block\" : \"none\";\n        let personNameDuplicateError = (personNames.some((item, index) => personNames.indexOf(item) != index));\n        this.personNameDuplicateError.style.display = personNameDuplicateError ? \"block\" : \"none\";\n        if (eventName && personCountOk && !personNameError && !oeffentlicherNameError && !personNameDuplicateError) {\n            if (await this.accountActionCreator.ensureAccount()) {\n                if (await this.kontokorrentHinzufuegenActionCreator.kontokorrentErstellen(this.kontokorrentId, this.eventName.value, this.oeffentlich.checked ? this.oeffentlicherName.value : null, personNames)) {\n                    this.routingActionCreator.navigateKontokorrent(this.kontokorrentId);\n                };\n            }\n        }\n    }\n\n    private applyStoreState(state: State) {\n        this.creating.style.display = state.kontokorrents.creating || state.account.accountCreating ? \"block\" : \"none\";\n        this.eventCreateError.style.display = state.kontokorrents.creationFailed ? \"block\" : \"none\";\n        this.eventNameDuplicate.style.display = state.kontokorrents.creationFailed && state.kontokorrents.creationFailed.exists ? \"block\" : \"none\";\n        this.accountCreationFailed.style.display = !state.account.accountCreating && state.account.accountCreationFailed ?\n            \"block\" : \"none\";\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n    }\n}\n\ncustomElements.define('app-create-event', CreateKontokorrent);","import { ApiClient } from \"../../api/ApiClient\";\nimport { KontokorrentInfo } from \"../../api/KontokorrentInfo\";\nimport { NeuerKontokorrentRequest } from \"../../api/NeuerKontokorrentRequest\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { Action } from \"../lib/Action\";\nimport { Store } from \"../Store\";\nimport { ActionNames } from \"./ActionNames\";\nimport { v4 as uuid } from \"uuid\";\n\nexport class KontokorrentCreationFailed implements Action {\n    readonly type = ActionNames.KontokorrentCreationFailed;\n    constructor(public exists: boolean) {\n\n    }\n}\n\nexport class KontokorrentCreating implements Action {\n    readonly type = ActionNames.KontokorrentCreating;\n    constructor() {\n\n    }\n}\n\nexport class KontokorrentCreated implements Action {\n    readonly type = ActionNames.KontokorrentCreated;\n    constructor(public kontokorrent: KontokorrentInfo) {\n\n    }\n}\n\nexport class KontokorrentHinzufuegenFailed implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegenFailed;\n    constructor(public notFound: boolean) {\n\n    }\n}\n\nexport class KontokorrentHinzufuegen implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegen;\n    constructor() {\n\n    }\n}\n\nexport class KontokorrentHinzufuegenSuccess implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegenSuccess;\n    constructor(public kontokorrents: KontokorrentInfo[]) {\n\n    }\n}\n\nexport class LoginPageGeoeffnet implements Action {\n    readonly type = ActionNames.LoginPageGeoeffnet;\n    constructor() {\n\n    }\n}\n\nexport type KontokorrentHinzufuegenActions = KontokorrentCreationFailed\n    | KontokorrentCreating\n    | KontokorrentCreated\n    | KontokorrentHinzufuegenFailed\n    | KontokorrentHinzufuegen\n    | KontokorrentHinzufuegenSuccess\n    | LoginPageGeoeffnet;\n\nexport class KontokorrentHinzufuegenActionCreator {\n\n    constructor(private store: Store,\n        private apiClient: ApiClient,\n        private db: KontokorrentDatabase) {\n\n    }\n\n    loginPageGeoeffnet() {\n        this.store.dispatch(new LoginPageGeoeffnet());\n    }\n\n    async kontokorrentErstellen(id: string, name: string, oeffentlicherName: string, personen: string[]) {\n        let request: NeuerKontokorrentRequest = {\n            name,\n            id,\n            oeffentlicherName,\n            personen: personen.map(v => { return { name: v, id: uuid() } })\n        };\n        this.store.dispatch(new KontokorrentCreating());\n        let res = await this.apiClient.neuerKontokorrent(request);\n        if (!res.success) {\n            this.store.dispatch(new KontokorrentCreationFailed(res.exists));\n        }\n        else {\n            await this.db.addKontokorrent({\n                id: id,\n                name: name,\n                personen: request.personen,\n                oeffentlicherName: oeffentlicherName\n            });\n            this.store.dispatch(new KontokorrentCreated({\n                id: id,\n                name: name,\n                personen: request.personen,\n                oeffentlicherName: oeffentlicherName\n            }));\n            return true;\n        }\n        return false;\n    }\n\n    async kontokorrentHinzufuegen(oeffentlicherName: string) {\n        let kk = await this.db.getPerOeffentlichName(oeffentlicherName);\n        if (null != kk) {\n            return kk.id;\n        }\n        this.store.dispatch(new KontokorrentHinzufuegen());\n        try {\n            let res = await this.apiClient.kontokorrentHinzufuegen(oeffentlicherName, null);\n            if (null == res) {\n                this.store.dispatch(new KontokorrentHinzufuegenFailed(true));\n            }\n            else {\n                let newIds = await this.db.setKontokorrents(res.map(v => {\n                    return {\n                        id: v.id,\n                        name: v.name,\n                        personen: v.personen,\n                        oeffentlicherName: v.oeffentlicherName\n                    };\n                }));\n                this.store.dispatch(new KontokorrentHinzufuegenSuccess(res));\n                return newIds[0];\n            }\n        }\n        catch {\n            this.store.dispatch(new KontokorrentHinzufuegenFailed(false));\n        }\n        return false;\n    }\n}\n\nexport function kontokorrentHinzufuegenActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"KontokorrentHinzufuegenActionCreator\",\n        serviceLocator => new KontokorrentHinzufuegenActionCreator(\n            serviceLocator.store,\n            serviceLocator.apiClient,\n            serviceLocator.db\n        ));\n}"],"sourceRoot":""}