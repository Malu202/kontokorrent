{"version":3,"sources":["webpack:///./src/components/convertLinks.ts","webpack:///./src/utils/ArrayToElementRenderer.ts","webpack:///./src/components/ui-components/popup/popup.ts","webpack:///./src/utils/ReuseableTemplate.ts","webpack:///./src/components/AppBar/AppBar.html","webpack:///./src/components/KontokorrentSelect/KontokorrentSelect.html","webpack:///./src/components/KontokorrentSelect/KontokorrentSelectList.html","webpack:///./src/components/KontokorrentSelect/KontokorrentSelectListEntry.html","webpack:///./src/components/KontokorrentSelect/KontokorrentSelectListEntry.ts","webpack:///./src/components/KontokorrentSelect/KontokorrentSelectList.ts","webpack:///./src/components/KontokorrentSelect/KontokorrentSelect.ts","webpack:///./src/components/AppBar/AppBar.ts","webpack:///./src/components/BezahlungEintragenPage/BezahlungEintragenPage.html","webpack:///./src/components/BezahlungEintragenForm/BezahlungEintragenForm.html","webpack:///./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.html","webpack:///./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.html","webpack:///./src/components/MdcCheckbox/MdcCheckbox.html","webpack:///./src/state/actions/BezahlungActionCreator.ts","webpack:///./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.ts","webpack:///./src/components/MdcCheckbox/MdcCheckbox.ts","webpack:///./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.ts","webpack:///./src/components/BezahlungEintragenForm/BezahlungEintragenForm.ts","webpack:///./src/components/BezahlungEintragenPage/BezahlungEintragenPage.ts"],"names":["convertLinks","elements","routingActionCreator","forEach","e","addEventListener","ev","preventDefault","navigate","getAttribute","ArrayToElementRenderer","listElement","keySelector","createElement","this","keyToElement","Map","elementToKey","WeakMap","list","updateElement","keyCache","getKey","d","get","key","set","x","Array","from","children","el","data","find","i","removeChild","before","nextKeyToElement","t","childElement","firstElementChild","prepend","nextElementSibling","insertAdjacentElement","Popup","HTMLElement","super","popupShown","keyListener","bind","clickListener","updateStyles","hide","contains","event","document","removeEventListener","style","display","show","customElements","define","ReuseableTemplate","template","instance","innerHTML","importNode","content","module","exports","name","querySelector","link","clickEvent","dispatchEvent","CustomEvent","detail","kontokorrent","id","bubbles","isActive","innerText","href","classList","toggle","_kontokorrents","kontokorrentsRenderer","k","li","appendChild","update","firstChild","_activeKontokorrentId","kontokorrents","sortBy","kontokorrentName","kontokorrentSelectList","addButton","popup","updateAttributes","stopPropagation","activeKontokorrentId","updatesStyle","length","activeKontokorrent","kontokorrentSelect","logoutDialog","accountActionCreator","logout","querySelectorAll","subscription","store","subscribe","state","applyStoreState","navigateLogin","Object","values","setAttribute","serviceLocator","AppBarTagName","BezahlungKontokorrentGeandert","kontokorrentId","type","BezahlungActionCreator","db","getZuletztGesehenerKontokorrentId","dispatch","setZuletztGesehenerKontokorrentId","input","personLabel","label","v","value","nativeControl","mdcCheckBox","checkboxId","checkboxName","zahlendePersonRenderer","p","empfaengerRenderer","element","person","radioName","zurueckLink","appBar","AppBar","bezahlungEintragenForm","bezahlungActionCreator","bezahlungActionCreatorFactory","addServices","s","bezahlungEintragenKontokorrentChanged","bezahlungEintragenGeoeffnet","personen"],"mappings":"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","file":"2.a1a94267284bdf4e6da9.bundle.js","sourcesContent":["import { RoutingActionCreator } from \"../state/actions/RoutingActionCreator\";\n\nexport function convertLinks(elements: Array<HTMLAnchorElement> | NodeListOf<HTMLAnchorElement>, routingActionCreator: RoutingActionCreator) {\n    elements.forEach((e: HTMLAnchorElement) => {\n        e.addEventListener(\"click\", ev => {\n            ev.preventDefault();\n            routingActionCreator.navigate(e.getAttribute(\"href\"));\n        });\n    });\n}","export class ArrayToElementRenderer<T, E extends Element, K>{\n    private keyToElement: Map<K, E>;\n    private elementToKey: WeakMap<E, K>;\n    \n    constructor(private listElement: HTMLElement,\n        private keySelector: (x: T) => K,\n        private createElement: (x: T) => E) {\n        this.keyToElement = new Map<K, E>();\n        this.elementToKey = new WeakMap<E, K>();\n    }\n\n    update(list: T[], updateElement: (x: E, data: T) => void) {\n        let keyCache = new Map<T, K>();\n        let getKey = (d: T) => keyCache.get(d) || (() => {\n            let key = this.keySelector(d);\n            keyCache.set(d, key);\n            return key;\n        })();\n        for (let x of Array.from(this.listElement.children)) {\n            let el: E = <E>x;\n            let data = list.find(i => this.elementToKey.get(el) == getKey(i));\n            if (data) {\n                updateElement(<E>el, data);\n            }\n            else {\n                this.listElement.removeChild(el);\n            }\n        }\n        let before: Element = null;\n        let nextKeyToElement = new Map<K, E>();\n        for (let t of list) {\n            let key = getKey(t);\n            let childElement: E = this.keyToElement.get(key);\n            if (!childElement) {\n                childElement = this.createElement(t);\n                updateElement(childElement, t);\n                this.elementToKey.set(childElement, key);\n            }\n            nextKeyToElement.set(key, childElement);\n            if (null == before && childElement != this.listElement.firstElementChild) {\n                this.listElement.prepend(childElement);\n            }\n            else if (null != before && before.nextElementSibling != childElement) {\n                before.insertAdjacentElement(\"afterend\", childElement);\n            }\n            before = childElement;\n        }\n        this.keyToElement = nextKeyToElement;\n    }\n\n}","export class Popup extends HTMLElement {\n    private popupShown: boolean = false;\n    constructor() {\n        super();\n        this.keyListener = this.keyListener.bind(this);\n        this.clickListener = this.clickListener.bind(this);\n    }\n\n    connectedCallback() {\n        this.updateStyles();\n    }\n\n    private keyListener(ev: KeyboardEvent) {\n        if (ev.key == \"Escape\") {\n            this.hide();\n        }\n    }\n\n    private clickListener(ev: MouseEvent | TouchEvent) {\n        if (!this.contains(<Element>(event.target))) {\n            this.hide();\n        }\n    }\n\n    public hide() {\n        if (this.popupShown) {\n            document.removeEventListener(\"keydown\", this.keyListener);\n            document.removeEventListener(\"click\", this.clickListener);\n            this.popupShown = false;\n            this.updateStyles();\n        }\n    }\n\n    public show() {\n        if (!this.popupShown) {\n            document.addEventListener(\"keydown\", this.keyListener);\n            document.addEventListener(\"click\", this.clickListener);\n            this.popupShown = true;\n            this.updateStyles();\n        }\n    }\n\n    private updateStyles() {\n        this.style.display = this.popupShown ? \"block\" : \"none\";\n    }\n\n    public toggle() {\n        if (!this.popupShown) {\n            this.show();\n        }\n        else {\n            this.hide();\n\n        }\n    }\n\n    disconnectedCallback() {\n        this.hide();\n    }\n}\ncustomElements.define(\"app-popup\", Popup);\n","export class ReuseableTemplate {\n    private instance: HTMLTemplateElement;\n    constructor(private readonly template: string) {\n    }\n\n    get(): DocumentFragment {\n        if (null == this.instance) {\n            this.instance = document.createElement(\"template\");\n            this.instance.innerHTML = this.template;\n        }\n        return document.importNode(this.instance.content, true);\n    }\n}\n","// Module\nvar code = \"<header class=\\\"app-bar\\\"> <kontokorrent-select class=\\\"app-bar__kontokorrent-select\\\"></kontokorrent-select> <nav class=\\\"app-bar__links\\\"> <button id=\\\"logout-button\\\" class=\\\"app-bar__link\\\" title=\\\"Logout\\\"> <span class=\\\"material-icons\\\"> exit_to_app </span> </button> <a href=\\\"info\\\" class=\\\"app-bar__link\\\" title=\\\"Informationen über diese App\\\"> <span class=\\\"material-icons\\\"> info </span> </a> </nav> </header> <app-popup id=\\\"logout-dialog\\\"> <div class=\\\"dialog__backdrop\\\"></div> <div class=\\\"dialog\\\"> <p> Wirklich aus allen Kontokorrents ausloggen? </p> <div class=\\\"dialog__button-pane\\\"> <button id=\\\"abort-logout\\\" class=\\\"button\\\">Abbrechen</button> <button id=\\\"confirm-logout\\\" class=\\\"button\\\">Ausloggen</button> </div> </div> </app-popup>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<div class=\\\"kontokorrent-select-wrapper\\\"> <div class=\\\"kontokorrent-select\\\"> <h1 data-ref=\\\"kontokorrent-name\\\" class=\\\"kontokorrent-select__name\\\">Kontokorrent</h1> <button class=\\\"kontokorrent-select__choose\\\" title=\\\"anderen Kontokorrent wählen\\\"> <span class=\\\"material-icons\\\"> arrow_drop_down </span> </button> </div> <app-popup class=\\\"kontokorrent-select__popup\\\"> <kontokorrent-select-list></kontokorrent-select-list> <div class=\\\"kontokorrent-select__buttons\\\"> <button id=\\\"add-kontokorrent\\\" class=\\\"button\\\">weiteren hinzufügen</button> </div> </app-popup> </div>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<ol data-ref=\\\"list\\\" class=\\\"kontokorrent-select-list\\\"> </ol>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<a data-ref=\\\"link\\\" class=\\\"kontokorrent-select-list__entry\\\"> <span data-ref=\\\"name\\\"></span> </a>\";\n// Exports\nmodule.exports = code;","import template from \"./KontokorrentSelectListEntry.html\";\nimport { KontokorrentState } from \"../../state/State\";\n\n\nexport class KontokorrentSelectListEntry extends HTMLElement {\n    private name: HTMLSpanElement;\n    private link: HTMLAnchorElement;\n    private kontokorrent: KontokorrentState;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.name = this.querySelector(`[data-ref=\"name\"]`);\n        this.link = this.querySelector(`[data-ref=\"link\"]`);\n        this.clickEvent = this.clickEvent.bind(this);\n    }\n\n    connectedCallback() {\n        this.link.addEventListener(\"click\", this.clickEvent);\n    }\n\n    private clickEvent(e: MouseEvent): void {\n        e.preventDefault();\n        this.dispatchEvent(new CustomEvent(\"gotokontokorrent\", { detail: this.kontokorrent.id, bubbles: true }));\n    }\n\n    disconnectedCallback() {\n        this.link.removeEventListener(\"click\", this.clickEvent);\n    }\n\n    update(kontokorrent: KontokorrentState, isActive: boolean) {\n        this.kontokorrent = kontokorrent;\n        this.name.innerText = kontokorrent.name;\n        this.link.href = `kontokorrents/${kontokorrent.id}`;\n        this.link.classList.toggle(\"kontokorrent-select-list__entry--active\", isActive);\n    }\n}\nexport const KontokorrentSelectListEntryTagName = \"kontokorrent-select-list-entry\";\ncustomElements.define(KontokorrentSelectListEntryTagName, KontokorrentSelectListEntry);\n","import template from \"./KontokorrentSelectList.html\";\nimport \"./KontokorrentSelectList.scss\";\nimport { KontokorrentState } from \"../../state/State\";\nimport { sortByAlphabetically } from \"../../utils/sortBy\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { KontokorrentSelectListEntry } from \"./KontokorrentSelectListEntry\";\n\nexport class KontokorrentSelectList extends HTMLElement {\n    private list: HTMLOListElement;\n    private _kontokorrents: KontokorrentState[];\n    private _activeKontokorrentId: string;\n    private kontokorrentsRenderer: ArrayToElementRenderer<KontokorrentState, HTMLLIElement, string>;\n\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.list = this.querySelector(`[data-ref=\"list\"]`);\n        this._kontokorrents = [];\n        this.kontokorrentsRenderer = new ArrayToElementRenderer(this.list,\n            (k: KontokorrentState) => k.id,\n            () => {\n                let li = document.createElement(\"li\");\n                li.appendChild(new KontokorrentSelectListEntry());\n                return li;\n            });\n    }\n\n    connectedCallback() {\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    private update() {\n        this.kontokorrentsRenderer.update(this._kontokorrents,\n            (li, kontokorrent) => {\n                let x: KontokorrentSelectListEntry = <KontokorrentSelectListEntry>li.firstChild;\n                x.update(kontokorrent, this._activeKontokorrentId == kontokorrent.id);\n            });\n    }\n\n    set kontokorrents(kontokorrents: KontokorrentState[]) {\n        this._kontokorrents = sortByAlphabetically(kontokorrents, k => k.name);\n        this.update();\n    }\n\n    set activeKontokorrentId(id: string) {\n        this._activeKontokorrentId = id;\n        this.update();\n    }\n}\nexport const KontokorrentSelectListTagName = \"kontokorrent-select-list\";\ncustomElements.define(KontokorrentSelectListTagName, KontokorrentSelectList);\n","import template from \"./KontokorrentSelect.html\";\nimport \"./KontokorrentSelect.scss\";\nimport \"./KontokorrentSelectList\";\nimport { KontokorrentState } from \"../../state/State\";\nimport { KontokorrentSelectListTagName, KontokorrentSelectList } from \"./KontokorrentSelectList\";\nimport { Popup } from \"../ui-components/popup/popup\";\nimport \"../ui-components/popup/popup\";\n\nexport class KontokorrentSelect extends HTMLElement {\n    private kontokorrentName: HTMLHeadingElement;\n    private popup: Popup;\n    private kontokorrentSelectList: KontokorrentSelectList;\n    private addButton: HTMLButtonElement;\n    private activeKontokorrentId: string;\n    private _kontokorrents: KontokorrentState[];\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.kontokorrentName = this.querySelector(`[data-ref=\"kontokorrent-name\"]`);\n        this.kontokorrentSelectList = this.querySelector(KontokorrentSelectListTagName);\n        this.addButton = this.querySelector(`#add-kontokorrent`);\n        this._kontokorrents = null;\n    }\n\n    connectedCallback() {\n        this.popup = this.querySelector(`app-popup`);\n        this.updateAttributes();\n        this.addEventListener(\"click\", e => {\n            if (!this.popup.contains(<Element>(event.target))) {\n                this.popup.toggle();\n                e.stopPropagation();\n            }\n        });\n        this.addButton.addEventListener(\"click\", e => {\n            this.dispatchEvent(new CustomEvent(\"addkontokorrent\"));\n        });\n        this.kontokorrentSelectList.addEventListener(\"gotokontokorrent\", () => {\n            this.popup.hide();\n        })\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.activeKontokorrentId = this.getAttribute(\"active-kontokorrent-id\");\n        this.kontokorrentSelectList.activeKontokorrentId = this.activeKontokorrentId;\n        this.updatesStyle();\n    }\n\n    static get observedAttributes() {\n        return [\"active-kontokorrent-id\"];\n    }\n\n    set kontokorrents(kontokorrents: KontokorrentState[]) {\n        this.kontokorrentSelectList.kontokorrents = kontokorrents;\n        this._kontokorrents = kontokorrents;\n        this.updatesStyle();\n    }\n\n    private updatesStyle() {\n        if (this._kontokorrents && this._kontokorrents.length) {\n            let activeKontokorrent = this._kontokorrents.find(k => k.id == this.activeKontokorrentId);\n            if (activeKontokorrent) {\n                this.kontokorrentName.innerText = activeKontokorrent.name;\n            }\n            else {\n                this.kontokorrentName.innerText = \"(Kontokorrent wählen)\";\n            }\n        }\n    }\n\n}\nexport const KontokorrentSelectTagName = \"kontokorrent-select\";\ncustomElements.define(KontokorrentSelectTagName, KontokorrentSelect);\n","import template from \"./AppBar.html\";\nimport \"./AppBar.scss\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { convertLinks } from \"../convertLinks\";\nimport \"../KontokorrentSelect/KontokorrentSelect\";\nimport { KontokorrentSelectTagName, KontokorrentSelect } from \"../KontokorrentSelect/KontokorrentSelect\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { AccountActionCreator, accountActionCreatorFactory } from \"../../state/actions/AccountActionCreator\";\nimport { Store } from \"../../state/Store\";\nimport { State } from \"../../state/State\";\nimport { Popup } from \"../ui-components/popup/popup\";\n\nexport class AppBar extends HTMLElement {\n    private kontokorrentSelect: KontokorrentSelect;\n    private store: Store;\n    private routingActionCreator: RoutingActionCreator;\n    private accountActionCreator: AccountActionCreator;\n    private logoutDialog: Popup;\n    private subscription: () => void;\n\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.kontokorrentSelect = this.querySelector(KontokorrentSelectTagName);\n        this.logoutDialog = this.querySelector(\"#logout-dialog\");\n    }\n\n    connectedCallback() {\n        this.querySelector(\"#logout-button\").addEventListener(\"click\", (e: MouseEvent) => {\n            this.logoutDialog.toggle();\n            e.stopPropagation();\n        });\n        this.querySelector(\"#confirm-logout\").addEventListener(\"click\", async () => {\n            await this.accountActionCreator.logout();\n        });\n        this.querySelector(\"#abort-logout\").addEventListener(\"click\", () => {\n            this.logoutDialog.hide();\n        });\n        convertLinks(this.querySelectorAll(\"a\"), this.routingActionCreator);\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.applyStoreState(this.store.state);\n        this.kontokorrentSelect.addEventListener(\"addkontokorrent\", () => {\n            this.routingActionCreator.navigateLogin();\n        });\n    }\n\n    applyStoreState(state: State): void {\n        this.kontokorrentSelect.kontokorrents = Object.values(state.kontokorrents.kontokorrents);\n        this.kontokorrentSelect.setAttribute(\"active-kontokorrent-id\", state.kontokorrents.activeKontokorrentId);\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.accountActionCreator = accountActionCreatorFactory(serviceLocator);\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n    }\n}\nexport const AppBarTagName = \"app-bar\";\ncustomElements.define(AppBarTagName, AppBar);\n","// Module\nvar code = \"<app-bar></app-bar> <div class=\\\"bezahlungen-page-menu\\\"> <a id=\\\"zurueck-zum-kontokorrent\\\" class=\\\"button\\\"> <span class=\\\"material-icons\\\"> arrow_back </span> zurück </a> <button class=\\\"button\\\" title=\\\"speichern\\\"> <span class=\\\"material-icons\\\"> save </span> speichern </button> </div> <div class=\\\"bezahlungen-page__form-container\\\"> <bezahlung-eintragen-form> </bezahlung-eintragen-form> </div>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<form novalidate class=\\\"bezahlung-eintragen-form\\\"> <label for=\\\"betrag\\\" class=\\\"bezahlung-eintragen-form__label\\\">Betrag</label> <input name=\\\"betrag\\\" id=\\\"betrag\\\" type=\\\"number\\\" novalidate step=\\\"any\\\"> <label for=\\\"zahlende-person\\\" class=\\\"bezahlung-eintragen-form__label\\\">Diese Person zahlt</label> <div id=\\\"zahlende-person-auswahl\\\"></div> <label for=\\\"empfaenger\\\" class=\\\"bezahlung-eintragen-form__label\\\">für diese Personen</label> <div id=\\\"empfaenger-auswahl\\\"></div> <label for=\\\"betreff\\\" class=\\\"bezahlung-eintragen-form__label\\\">Betreff</label> <input name=\\\"betreff\\\" id=\\\"betreff\\\" required=\\\"\\\" type=\\\"text\\\"> </form>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<input type=\\\"radio\\\" class=\\\"bezahlende-person-radio__input\\\"/> <label class=\\\"bezahlende-person-radio\\\"> <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\"> <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/> <path d=\\\"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z\\\"/> </svg> <span data-ref=\\\"label\\\"></span> </label>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<mdc-checkbox></mdc-checkbox> <label></label>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<div class=\\\"mdc-touch-target-wrapper\\\"> <div class=\\\"mdc-checkbox mdc-checkbox--touch\\\"> <input type=\\\"checkbox\\\" class=\\\"mdc-checkbox__native-control\\\"/> <div class=\\\"mdc-checkbox__background\\\"> <svg class=\\\"mdc-checkbox__checkmark\\\" viewBox=\\\"0 0 24 24\\\"> <path class=\\\"mdc-checkbox__checkmark-path\\\" fill=\\\"none\\\" d=\\\"M1.73,12.91 8.1,19.28 22.79,4.59\\\"/> </svg> <div class=\\\"mdc-checkbox__mixedmark\\\"></div> </div> <div class=\\\"mdc-checkbox__ripple\\\"></div> </div> </div>\";\n// Exports\nmodule.exports = code;","import { Store } from \"../Store\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { Action } from \"../lib/Action\";\nimport { ActionNames } from \"./ActionNames\";\n\nexport class BezahlungKontokorrentGeandert implements Action {\n    readonly type = ActionNames.BezahlungKontokorrentGeandert;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport type BezahlungActions = BezahlungKontokorrentGeandert;\n\nexport class BezahlungActionCreator {\n    constructor(private store: Store,\n        private db: KontokorrentDatabase) {\n    }\n\n    async bezahlungEintragenGeoeffnet() {\n        let id = this.store.state.kontokorrents.activeKontokorrentId || await this.db.getZuletztGesehenerKontokorrentId();\n        this.store.dispatch(new BezahlungKontokorrentGeandert(id));\n    }\n\n    async bezahlungEintragenKontokorrentChanged(id: string) {\n        this.store.dispatch(new BezahlungKontokorrentGeandert(id));\n        await this.db.setZuletztGesehenerKontokorrentId(id);\n    }\n}\n\nexport function bezahlungActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"BezahlungActionCreator\",\n        serviceLocator => new BezahlungActionCreator(serviceLocator.store,\n            serviceLocator.db));\n}\n","import { Person } from \"../../state/State\";\nimport template from \"./BezahlendePersonRadioButton.html\";\nimport \"./BezahlendePersonRadioButton.scss\";\n\nexport class BezahlendePersonRadioButton extends HTMLElement {\n    private input: HTMLInputElement;\n    private personLabel: HTMLLabelElement;\n    private label: HTMLLabelElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.input = this.querySelector(\"input\");\n        this.personLabel = this.querySelector(`[data-ref=\"label\"]`);\n        this.label = this.querySelector(\"label\");\n    }\n\n    connectedCallback() {\n\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    set radioName(v: string) {\n        this.input.name = v;\n    }\n\n    set person(value: Person) {\n        this.input.value = value.id;\n        this.personLabel.innerText = value.name;\n        this.input.id = value.id;\n        this.label.setAttribute(\"for\", value.id);\n    }\n}\n\ncustomElements.define(\"bezahlende-person-radio-button\", BezahlendePersonRadioButton);\n","import { ReuseableTemplate } from \"../../utils/ReuseableTemplate\";\nimport templateContent from \"./MdcCheckbox.html\";\nimport \"./MdcCheckbox.scss\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport class MdcCheckbox extends HTMLElement {\n    private nativeControl: HTMLInputElement;\n\n    constructor() {\n        super();\n        this.appendChild(template.get());\n        this.nativeControl = this.querySelector(\".mdc-checkbox__native-control\");\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    set checkboxId(value: string) {\n        this.nativeControl.id = value;\n    }\n\n    set checkboxName(value: string) {\n        this.nativeControl.name = value;\n    }\n}\n\ncustomElements.define(\"mdc-checkbox\", MdcCheckbox);\n","import templateContent from \"./EmpfaengerCheckbox.html\";\nimport \"./EmpfaengerCheckbox.scss\";\nimport \"../MdcCheckbox/MdcCheckbox\";\nimport { MdcCheckbox } from \"../MdcCheckbox/MdcCheckbox\";\nimport { Person } from \"../../state/State\";\nimport { ReuseableTemplate } from \"../../utils/ReuseableTemplate\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport class EmpfaengerCheckbox extends HTMLElement {\n    private mdcCheckBox: MdcCheckbox;\n    private label: HTMLLabelElement;\n\n    constructor() {\n        super();\n        this.appendChild(template.get());\n        this.mdcCheckBox = this.querySelector(\"mdc-checkbox\");\n        this.label = this.querySelector(\"label\");\n    }\n\n    set person(value: Person) {\n        this.label.innerText = value.name;\n        const id = `empfaenger-${value.id}`;\n        this.label.setAttribute(\"for\", id);\n        this.mdcCheckBox.checkboxId = id;\n        this.mdcCheckBox.checkboxName = id;\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n}\n\ncustomElements.define(\"empfaenger-checkbox\", EmpfaengerCheckbox);\n","import { Person } from \"../../state/State\";\nimport template from \"./BezahlungEintragenForm.html\";\nimport \"./BezahlungEintragenForm.scss\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { BezahlendePersonRadioButton } from \"../BezahlendePersonRadioButton/BezahlendePersonRadioButton\";\nimport { EmpfaengerCheckbox } from \"../EmpfaengerCheckbox/EmpfaengerCheckbox\";\n\nexport class BezahlungEintragenForm extends HTMLElement {\n    private zahlendePersonRenderer: ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>;\n    private empfaengerRenderer: ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.zahlendePersonRenderer = new ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>(\n            this.querySelector(\"#zahlende-person-auswahl\"),\n            p => p.id,\n            p => new BezahlendePersonRadioButton());\n        this.empfaengerRenderer = new ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>(\n            this.querySelector(\"#empfaenger-auswahl\"),\n            p => p.id,\n            p => new EmpfaengerCheckbox());\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    set personen(value: Person[]) {\n        this.zahlendePersonRenderer.update(value, (element, person) => {\n            element.person = person;\n            element.radioName = \"bezahlende-person\";\n        });\n        this.empfaengerRenderer.update(value, (element, person) => {\n            element.person = person;\n        });\n    }\n}\nexport const BezahlungEintragenFormTagName = \"bezahlung-eintragen-form\";\ncustomElements.define(BezahlungEintragenFormTagName, BezahlungEintragenForm);\n","import template from \"./BezahlungEintragenPage.html\";\nimport { Store } from \"../../state/Store\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { AppBar, AppBarTagName } from \"../AppBar/AppBar\";\nimport \"./BezahlungEintragenPage.scss\";\nimport { BezahlungActionCreator, bezahlungActionCreatorFactory } from \"../../state/actions/BezahlungActionCreator\";\nimport { State } from \"../../state/State\";\nimport { convertLinks } from \"../convertLinks\";\nimport \"../BezahlungEintragenForm/BezahlungEintragenForm\";\nimport { BezahlungEintragenForm, BezahlungEintragenFormTagName } from \"../BezahlungEintragenForm/BezahlungEintragenForm\";\n\nexport class BezahlungEintragenPage extends HTMLElement {\n    private store: Store;\n    private subscription: () => void;\n    private routingActionCreator: RoutingActionCreator;\n    private appBar: AppBar;\n    private bezahlungActionCreator: BezahlungActionCreator;\n    private zurueckLink: HTMLAnchorElement;\n    private bezahlungEintragenForm: BezahlungEintragenForm;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.zurueckLink = this.querySelector(\"#zurueck-zum-kontokorrent\");\n        this.appBar = this.querySelector(AppBarTagName);\n        this.bezahlungEintragenForm = this.querySelector(BezahlungEintragenFormTagName);\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.bezahlungActionCreator = bezahlungActionCreatorFactory(serviceLocator);\n        this.appBar.addServices(serviceLocator);\n    }\n\n    connectedCallback() {\n        this.subscription = this.store.subscribe(\"kontokorrents\", s => this.applyStoreState(s));\n        this.appBar.addEventListener(\"gotokontokorrent\", (e: CustomEvent) => {\n            this.bezahlungActionCreator.bezahlungEintragenKontokorrentChanged(e.detail);\n        });\n        this.bezahlungActionCreator.bezahlungEintragenGeoeffnet();\n        convertLinks([this.zurueckLink], this.routingActionCreator);\n        this.applyStoreState(this.store.state);\n    }\n\n    private applyStoreState(s: State) {\n        this.zurueckLink.href = s.kontokorrents.activeKontokorrentId ? `kontokorrents/${s.kontokorrents.activeKontokorrentId}` : null;\n        if (s.kontokorrents.activeKontokorrentId) {\n            this.bezahlungEintragenForm.personen = s.kontokorrents.kontokorrents[s.kontokorrents.activeKontokorrentId].personen;\n        }\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n    }\n}\n\ncustomElements.define('bezahlung-eintragen-page', BezahlungEintragenPage);\n"],"sourceRoot":""}