{"version":3,"file":"627dcd4a6dde53a37878.bundle.js","mappings":"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","sources":["webpack://kontokorrent/./src/components/KontokorrentNichtGefunden/KontokorrentNichtGefunden.ts","webpack://kontokorrent/./src/components/KontokorrentNichtGefunden/KontokorrentNichtGefunden.html","webpack://kontokorrent/./src/components/Spinner/Spinner.ts","webpack://kontokorrent/./src/components/Spinner/Spinner.html","webpack://kontokorrent/./src/state/actions/KontokorrentHinzufuegenActionCreator.ts"],"sourcesContent":["import { OeffentlicherNameParam } from \"../../routing/KontokorrentRouteResolver\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { Store } from \"../../state/Store\";\nimport { State } from \"../../state/State\";\nimport { AppBar, AppBarTagName } from \"../AppBar/AppBar\";\nimport template from \"./KontokorrentNichtGefunden.html\";\nimport \"./KontokorrentNichtGefunden.scss\";\nimport { KontokorrentHinzufuegenActionCreator, kontokorrentHinzufuegenActionCreatorFactory } from \"../../state/actions/KontokorrentHinzufuegenActionCreator\";\nimport \"../Spinner/Spinner\";\n\nexport class KontokorrentNichtGefunden extends HTMLElement {\n    private rendered = false;\n    private store: Store;\n    private routingActionCreator: RoutingActionCreator;\n    private serviceLocator: ServiceLocator;\n    private appBar: AppBar;\n    private oeffentlicherKontokorrentLabel: HTMLSpanElement;\n    private hinzufuegenBtn: HTMLButtonElement;\n    private oeffentlicherName: string;\n    private hinzufuegenClickListener: (e: MouseEvent) => void;\n    private subscription: () => void;\n    private kontokorrentHinzufuegenActionCreator: KontokorrentHinzufuegenActionCreator;\n    private notFoundError: HTMLDivElement;\n    private processing: HTMLDivElement;\n\n    constructor() {\n        super();\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.kontokorrentHinzufuegenActionCreator = kontokorrentHinzufuegenActionCreatorFactory(serviceLocator);\n        this.serviceLocator = serviceLocator;\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.oeffentlicherKontokorrentLabel = this.querySelector(\"#oeffentlicher-name\");\n            this.hinzufuegenBtn = this.querySelector(\"#hinzufuegen-btn\");\n            this.notFoundError = this.querySelector(\"#notFoundError\");\n            this.processing = this.querySelector(\"#hinzufuegen__progress\");\n            this.appBar = this.querySelector(AppBarTagName);\n            this.appBar.addServices(this.serviceLocator);\n            let searchParams = new URLSearchParams(window.location.search);\n            if (searchParams.has(OeffentlicherNameParam)) {\n                this.oeffentlicherName = searchParams.get(OeffentlicherNameParam).toLowerCase();\n                this.oeffentlicherKontokorrentLabel.innerText = this.oeffentlicherName;\n            }\n        }\n        this.appBar.addEventListener(\"gotokontokorrent\", async (e: CustomEvent) => {\n            await this.routingActionCreator.navigateKontokorrentById(e.detail);\n        });\n        this.hinzufuegenClickListener = () => this.hinzufuegen();\n        this.hinzufuegenBtn.addEventListener(\"click\", this.hinzufuegenClickListener);\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.applyStoreState(this.store.state);\n        this.kontokorrentHinzufuegenActionCreator.nichtGefundenPageGeoeffnet();\n    }\n\n    private async hinzufuegen() {\n        let id = await this.kontokorrentHinzufuegenActionCreator.kontokorrentHinzufuegen(this.oeffentlicherName);\n        if (id) {\n            await this.routingActionCreator.navigateKontokorrentById(id);\n        };\n    }\n\n    private applyStoreState(state: State) {\n        this.notFoundError.style.display = !state.kontokorrents.hinzufuegen && state.kontokorrents.hinzufuegenFailed && state.kontokorrents.hinzufuegenFailed.kontokorrentNotFound ?\n            \"block\" : \"none\";\n        let processing = state.kontokorrents.hinzufuegen || state.account.accountCreating;\n        this.processing.style.display = processing ? \"flex\" : \"none\";\n        this.hinzufuegenBtn.style.display = !processing ? \"inline-flex\" : \"none\";\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n        this.hinzufuegenBtn.removeEventListener(\"click\", this.hinzufuegenClickListener);\n    }\n}\n\ncustomElements.define(\"kontokorrent-nicht-gefunden\", KontokorrentNichtGefunden);\n","// Module\nvar code = \"<app-bar></app-bar> <div class=\\\"kontokorrent-hinzufuegen-section\\\"> Möchtest du den öffentlichen Kontokorrent zur Liste deiner Kontokorrents <strong><span id=\\\"oeffentlicher-name\\\"></span></strong> hinzufügen? </div> <div class=\\\"kontokorrent-hinzufuegen-section\\\"> <div id=\\\"notFoundError\\\" class=\\\"alert alert--error\\\" style=\\\"display:none\\\">Kontokorrent wurde nicht gefunden</div> <button class=\\\"button button--raised\\\" id=\\\"hinzufuegen-btn\\\"> hinzufügen </button> </div> <div class=\\\"hinzufuegen__progress\\\" id=\\\"hinzufuegen__progress\\\"> <app-spinner></app-spinner> <span>wird hinzugefügt</span> </div>\";\n// Exports\nexport default code;","import template from \"./Spinner.html\";\n\nexport class Spinner extends HTMLElement {\n\n    constructor() {\n        super();\n        let shadowRoot = this.attachShadow({ mode: \"open\" });\n        shadowRoot.innerHTML = template;\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n}\n\ncustomElements.define(\"app-spinner\", Spinner);\n","// Module\nvar code = \"<style>.spinner{animation:rotate 2s linear infinite;height:100%}.spinner .path{stroke:var(--spinner-color);stroke-linecap:round;animation:dash 1.5s ease-in-out infinite}@keyframes rotate{100%{transform:rotate(360deg)}}@keyframes dash{0%{stroke-dasharray:1,150;stroke-dashoffset:0}50%{stroke-dasharray:90,150;stroke-dashoffset:-35}100%{stroke-dasharray:90,150;stroke-dashoffset:-124}}</style> <svg class=\\\"spinner\\\" viewBox=\\\"0 0 50 50\\\"> <circle class=\\\"path\\\" cx=\\\"25\\\" cy=\\\"25\\\" r=\\\"20\\\" fill=\\\"none\\\" stroke-width=\\\"4\\\"></circle> </svg>\";\n// Exports\nexport default code;","import { ApiClient } from \"../../api/ApiClient\";\nimport { KontokorrentInfo } from \"../../api/KontokorrentInfo\";\nimport { NeuerKontokorrentRequest } from \"../../api/NeuerKontokorrentRequest\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { Action } from \"../lib/Action\";\nimport { Store } from \"../Store\";\nimport { ActionNames } from \"./ActionNames\";\nimport { v4 as uuid } from \"uuid\";\n\nexport class KontokorrentCreationFailed implements Action {\n    readonly type = ActionNames.KontokorrentCreationFailed;\n    constructor(public exists: boolean) {\n\n    }\n}\n\nexport class KontokorrentCreating implements Action {\n    readonly type = ActionNames.KontokorrentCreating;\n    constructor() {\n\n    }\n}\n\nexport class KontokorrentCreated implements Action {\n    readonly type = ActionNames.KontokorrentCreated;\n    constructor(public kontokorrent: KontokorrentInfo) {\n\n    }\n}\n\nexport class KontokorrentHinzufuegenFailed implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegenFailed;\n    constructor(public notFound: boolean) {\n\n    }\n}\n\nexport class KontokorrentHinzufuegen implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegen;\n    constructor() {\n\n    }\n}\n\nexport class KontokorrentHinzufuegenSuccess implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegenSuccess;\n    constructor(public kontokorrents: KontokorrentInfo[]) {\n\n    }\n}\n\nexport class LoginPageGeoeffnet implements Action {\n    readonly type = ActionNames.LoginPageGeoeffnet;\n    constructor() {\n\n    }\n}\n\nexport class NichtGefundenPageGeoeffnet implements Action {\n    readonly type = ActionNames.NichtGefundenPageGeoeffnet;\n    constructor() {\n\n    }\n}\n\nexport type KontokorrentHinzufuegenActions = KontokorrentCreationFailed\n    | KontokorrentCreating\n    | KontokorrentCreated\n    | KontokorrentHinzufuegenFailed\n    | KontokorrentHinzufuegen\n    | KontokorrentHinzufuegenSuccess\n    | LoginPageGeoeffnet\n    | NichtGefundenPageGeoeffnet;\n\nexport class KontokorrentHinzufuegenActionCreator {\n\n    constructor(private store: Store,\n        private apiClient: ApiClient,\n        private db: KontokorrentDatabase) {\n\n    }\n\n    loginPageGeoeffnet() {\n        this.store.dispatch(new LoginPageGeoeffnet());\n    }\n\n    nichtGefundenPageGeoeffnet() {\n        this.store.dispatch(new NichtGefundenPageGeoeffnet());\n    }\n\n    async kontokorrentErstellen(id: string, name: string, oeffentlicherName: string, personen: string[]) {\n        let request: NeuerKontokorrentRequest = {\n            name,\n            id,\n            oeffentlicherName,\n            personen: personen.map(v => { return { name: v, id: uuid() } })\n        };\n        this.store.dispatch(new KontokorrentCreating());\n        let res = await this.apiClient.neuerKontokorrent(request);\n        if (!res.success) {\n            this.store.dispatch(new KontokorrentCreationFailed(res.exists));\n        }\n        else {\n            await this.db.addKontokorrent({\n                id: id,\n                name: name,\n                personen: request.personen,\n                oeffentlicherName: oeffentlicherName\n            });\n            this.store.dispatch(new KontokorrentCreated({\n                id: id,\n                name: name,\n                personen: request.personen,\n                oeffentlicherName: oeffentlicherName\n            }));\n            return true;\n        }\n        return false;\n    }\n\n    async kontokorrentHinzufuegen(oeffentlicherName: string) {\n        let kk = await this.db.getPerOeffentlichName(oeffentlicherName);\n        if (null != kk) {\n            return kk.id;\n        }\n        this.store.dispatch(new KontokorrentHinzufuegen());\n        try {\n            let res = await this.apiClient.kontokorrentHinzufuegen(oeffentlicherName, null);\n            if (null == res) {\n                this.store.dispatch(new KontokorrentHinzufuegenFailed(true));\n            }\n            else {\n                let newIds = await this.db.setKontokorrents(res.map(v => {\n                    return {\n                        id: v.id,\n                        name: v.name,\n                        personen: v.personen,\n                        oeffentlicherName: v.oeffentlicherName\n                    };\n                }));\n                this.store.dispatch(new KontokorrentHinzufuegenSuccess(res));\n                return newIds[0];\n            }\n        }\n        catch (err) {\n            this.store.dispatch(new KontokorrentHinzufuegenFailed(false));\n        }\n        return false;\n    }\n}\n\nexport function kontokorrentHinzufuegenActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"KontokorrentHinzufuegenActionCreator\",\n        serviceLocator => new KontokorrentHinzufuegenActionCreator(\n            serviceLocator.store,\n            serviceLocator.apiClient,\n            serviceLocator.db\n        ));\n}"],"names":["KontokorrentNichtGefunden","HTMLElement","constructor","super","rendered","addServices","serviceLocator","this","store","routingActionCreator","kontokorrentHinzufuegenActionCreator","connectedCallback","innerHTML","oeffentlicherKontokorrentLabel","querySelector","hinzufuegenBtn","notFoundError","processing","appBar","AppBar","searchParams","URLSearchParams","window","location","search","has","oeffentlicherName","get","toLowerCase","innerText","addEventListener","async","navigateKontokorrentById","e","detail","hinzufuegenClickListener","hinzufuegen","subscription","subscribe","state","applyStoreState","nichtGefundenPageGeoeffnet","id","kontokorrentHinzufuegen","style","display","kontokorrents","hinzufuegenFailed","kontokorrentNotFound","account","accountCreating","disconnectedCallback","removeEventListener","customElements","define","Spinner","attachShadow","mode","KontokorrentCreationFailed","exists","type","KontokorrentCreating","KontokorrentCreated","kontokorrent","KontokorrentHinzufuegenFailed","notFound","KontokorrentHinzufuegen","KontokorrentHinzufuegenSuccess","LoginPageGeoeffnet","NichtGefundenPageGeoeffnet","KontokorrentHinzufuegenActionCreator","apiClient","db","loginPageGeoeffnet","dispatch","name","personen","request","map","v","res","neuerKontokorrent","success","addKontokorrent","kk","getPerOeffentlichName","newIds","setKontokorrents","err","kontokorrentHinzufuegenActionCreatorFactory"],"sourceRoot":""}