{"version":3,"sources":["webpack:///./src/state/actions/KontokorrentHinzufuegenActionCreator.ts","webpack:///./src/components/CreateKontokorrent/CreateKontokorrent.html","webpack:///./src/components/PersonenListe/PersonenListe.html","webpack:///./src/components/PersonenListe/PersonenListenEintrag.html","webpack:///./src/components/PersonenListe/PersonenListenEintrag.ts","webpack:///./src/components/PersonenListe/PersonenListe.ts","webpack:///./src/components/CreateKontokorrent/CreateKontokorrent.ts"],"names":["KontokorrentCreationFailed","exists","type","KontokorrentCreating","KontokorrentCreated","kontokorrent","KontokorrentHinzufuegenFailed","notFound","KontokorrentHinzufuegen","KontokorrentHinzufuegenSuccess","kontokorrents","LoginPageGeoeffnet","KontokorrentHinzufuegenActionCreator","store","apiClient","db","this","dispatch","id","name","oeffentlicherName","personen","request","map","v","res","neuerKontokorrent","success","addKontokorrent","kk","getPerOeffentlichName","kontokorrentHinzufuegen","newIds","setKontokorrents","kontokorrentHinzufuegenActionCreatorFactory","serviceLocator","get","module","exports","HTMLElement","super","innerHTML","removeButton","querySelector","nameInput","addEventListener","dispatchEvent","Event","CustomEvent","value","customElements","define","names","personenListe","querySelectorAll","forEach","push","addPersonButton","li","document","createElement","e","appendChild","removeChild","kontokorrentId","oeffentlicherNameManuell","routingActionCreator","accountActionCreator","kontokorrentHinzufuegenActionCreator","emptyNameError","eventCreateError","personCountError","eventNameError","createButton","eventName","creating","oeffentlich","oeffentlichBox","oeffentlicherNameError","eventNameDuplicate","accountCreationFailed","personNameDuplicateError","createEvent","bind","style","display","checked","subscription","subscribe","state","applyStoreState","personNames","personCountOk","length","personNameError","some","test","item","index","indexOf","ensureAccount","kontokorrentErstellen","navigateKontokorrent","account","accountCreating","creationFailed"],"mappings":"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","file":"4.10f90ba5a7804fbe98ea.bundle.js","sourcesContent":["import { ApiClient } from \"../../api/ApiClient\";\nimport { KontokorrentInfo } from \"../../api/KontokorrentInfo\";\nimport { NeuerKontokorrentRequest } from \"../../api/NeuerKontokorrentRequest\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { Action } from \"../lib/Action\";\nimport { Store } from \"../Store\";\nimport { ActionNames } from \"./ActionNames\";\nimport { v4 as uuid } from \"uuid\";\n\nexport class KontokorrentCreationFailed implements Action {\n    readonly type = ActionNames.KontokorrentCreationFailed;\n    constructor(public exists: boolean) {\n\n    }\n}\n\nexport class KontokorrentCreating implements Action {\n    readonly type = ActionNames.KontokorrentCreating;\n    constructor() {\n\n    }\n}\n\nexport class KontokorrentCreated implements Action {\n    readonly type = ActionNames.KontokorrentCreated;\n    constructor(public kontokorrent: KontokorrentInfo) {\n\n    }\n}\n\nexport class KontokorrentHinzufuegenFailed implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegenFailed;\n    constructor(public notFound: boolean) {\n\n    }\n}\n\nexport class KontokorrentHinzufuegen implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegen;\n    constructor() {\n\n    }\n}\n\nexport class KontokorrentHinzufuegenSuccess implements Action {\n    readonly type = ActionNames.KontokorrentHinzufuegenSuccess;\n    constructor(public kontokorrents: KontokorrentInfo[]) {\n\n    }\n}\n\nexport class LoginPageGeoeffnet implements Action {\n    readonly type = ActionNames.LoginPageGeoeffnet;\n    constructor() {\n\n    }\n}\n\nexport type KontokorrentHinzufuegenActions = KontokorrentCreationFailed\n    | KontokorrentCreating\n    | KontokorrentCreated\n    | KontokorrentHinzufuegenFailed\n    | KontokorrentHinzufuegen\n    | KontokorrentHinzufuegenSuccess\n    | LoginPageGeoeffnet;\n\nexport class KontokorrentHinzufuegenActionCreator {\n\n    constructor(private store: Store,\n        private apiClient: ApiClient,\n        private db: KontokorrentDatabase) {\n\n    }\n\n    loginPageGeoeffnet() {\n        this.store.dispatch(new LoginPageGeoeffnet());\n    }\n\n    async kontokorrentErstellen(id: string, name: string, oeffentlicherName: string, personen: string[]) {\n        let request: NeuerKontokorrentRequest = {\n            name,\n            id,\n            oeffentlicherName,\n            personen: personen.map(v => { return { name: v, id: uuid() } })\n        };\n        this.store.dispatch(new KontokorrentCreating());\n        let res = await this.apiClient.neuerKontokorrent(request);\n        if (!res.success) {\n            this.store.dispatch(new KontokorrentCreationFailed(res.exists));\n        }\n        else {\n            await this.db.addKontokorrent({\n                id: id,\n                name: name,\n                personen: request.personen,\n                oeffentlicherName: oeffentlicherName\n            });\n            this.store.dispatch(new KontokorrentCreated({\n                id: id,\n                name: name,\n                personen: request.personen,\n                oeffentlicherName: oeffentlicherName\n            }));\n            return true;\n        }\n        return false;\n    }\n\n    async kontokorrentHinzufuegen(oeffentlicherName: string) {\n        let kk = await this.db.getPerOeffentlichName(oeffentlicherName);\n        if (null != kk) {\n            return kk.id;\n        }\n        this.store.dispatch(new KontokorrentHinzufuegen());\n        try {\n            let res = await this.apiClient.kontokorrentHinzufuegen(oeffentlicherName, null);\n            if (null == res) {\n                this.store.dispatch(new KontokorrentHinzufuegenFailed(true));\n            }\n            else {\n                let newIds = await this.db.setKontokorrents(res.map(v => {\n                    return {\n                        id: v.id,\n                        name: v.name,\n                        personen: v.personen,\n                        oeffentlicherName: v.oeffentlicherName\n                    };\n                }));\n                this.store.dispatch(new KontokorrentHinzufuegenSuccess(res));\n                return newIds[0];\n            }\n        }\n        catch {\n            this.store.dispatch(new KontokorrentHinzufuegenFailed(false));\n        }\n        return false;\n    }\n}\n\nexport function kontokorrentHinzufuegenActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"KontokorrentHinzufuegenActionCreator\",\n        serviceLocator => new KontokorrentHinzufuegenActionCreator(\n            serviceLocator.store,\n            serviceLocator.apiClient,\n            serviceLocator.db\n        ));\n}","// Module\nvar code = \"<h1>Event erstellen</h1> <label for=\\\"event-name\\\">Eventname</label> <input type=\\\"text\\\" id=\\\"event-name\\\" name=\\\"event-name\\\"> <label for=\\\"event-name\\\">Oeffentlich</label> <input type=\\\"checkbox\\\" id=\\\"oeffentlich\\\" name=\\\"oeffentlich\\\" checked=\\\"checked\\\"> <div id=\\\"oeffentlich-box\\\"> <label for=\\\"oeffentlicher-name\\\">Öffentlicher Name</label> <input type=\\\"text\\\" id=\\\"oeffentlicher-name\\\" name=\\\"oeffentlicher-name\\\"> </div> <div id=\\\"empty-name-error\\\" style=\\\"display:none\\\">Für alle Personen Namen angeben</div> <div id=\\\"person-count-error\\\" style=\\\"display:none\\\">Mindestens zwei Personen angeben</div> <div id=\\\"event-create-error\\\" style=\\\"display:none\\\">Kontokorrent konnte nicht erstellt werden</div> <div id=\\\"event-name-duplicate\\\" style=\\\"display:none\\\">Ein Kontokorrent mit diesem Namen exisitert bereits</div> <div id=\\\"event-name-error\\\" style=\\\"display:none\\\">Eventname angeben</div> <div id=\\\"oeffentlicher-name-error\\\" style=\\\"display:none\\\">Öfferntlicher Name: Nur Kleinbuchstaben und Zahlen</div> <div id=\\\"person-name-duplicate-error\\\" style=\\\"display:none\\\">Personennamen müssen unterschiedlich sein</div> <div id=\\\"creating\\\" style=\\\"display:none\\\">Wird erstellt</div> <div id=\\\"account-creation-failed\\\" style=\\\"display:none\\\">Account konnte nicht erstellt werden</div> <app-personen-liste id=\\\"personen-liste\\\"></app-personen-liste> <button id=\\\"create-button\\\">Erstellen</button>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<ul id=\\\"personen-liste\\\" class=\\\"mdc-list mdc-list--non-interactive\\\"> </ul> <button type=\\\"button\\\" id=\\\"add-person\\\">Person hinzufügen</button>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<input type=\\\"text\\\" id=\\\"name\\\" placehoder=\\\"Name\\\"/> <button id=\\\"remove\\\">entfernen</button>\";\n// Exports\nmodule.exports = code;","import template from \"./PersonenListenEintrag.html\";\n\nexport class PersonenListenEintrag extends HTMLElement {\n    private removeButton: HTMLButtonElement;\n    private nameInput: HTMLInputElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n    }\n\n    connectedCallback() {\n        let element = this;\n        this.removeButton = element.querySelector(\"#remove\");\n        this.nameInput = element.querySelector(\"#name\");\n        this.nameInput.addEventListener(\"change\", () => {\n            this.dispatchEvent(new Event(\"change\"));\n        });\n        this.removeButton.addEventListener(\"click\", () => {\n            this.dispatchEvent(new CustomEvent(\"onremove\"));\n        })\n    }\n\n    get name(){\n        return this.nameInput.value;\n    }\n\n    disconnectedCallback() {\n\n    }\n\n}\nexport const PersonenListenEintragTagName = 'app-personen-listen-eintrag'; \ncustomElements.define(PersonenListenEintragTagName, PersonenListenEintrag);\n","import template from \"./PersonenListe.html\";\nimport { PersonenListenEintrag, PersonenListenEintragTagName } from \"./PersonenListenEintrag\";\n\nexport class PersonenListe extends HTMLElement {\n    private addPersonButton: HTMLButtonElement;\n    private personenListe: HTMLUListElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n    }\n\n    get personen() {\n        let names: string[] = [];\n        this.personenListe.querySelectorAll(PersonenListenEintragTagName).forEach((v: PersonenListenEintrag) => names.push(v.name));\n        return names;\n    }\n\n    connectedCallback() {\n        let element = this;\n        this.addPersonButton = element.querySelector(\"#add-person\");\n        this.personenListe = element.querySelector(\"#personen-liste\");\n        this.addPersonButton.addEventListener(\"click\", () => {\n            let li = document.createElement(\"li\");\n            let e = new PersonenListenEintrag();\n            li.appendChild(e);\n            this.personenListe.appendChild(li);\n            e.addEventListener(\"onremove\", () => {\n                this.personenListe.removeChild(li);\n            });\n        });\n    }\n\n    disconnectedCallback() {\n\n    }\n\n}\n\ncustomElements.define('app-personen-liste', PersonenListe);\n","import template from \"./CreateKontokorrent.html\";\nimport { Store } from \"../../state/Store\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { State } from \"../../state/State\";\nimport { AccountActionCreator, accountActionCreatorFactory } from \"../../state/actions/AccountActionCreator\";\nimport \"../PersonenListe/PersonenListe\";\nimport { PersonenListe } from \"../PersonenListe/PersonenListe\";\nimport { v4 as uuid } from \"uuid\";\nimport { KontokorrentListenActionCreator, kontokorrentListenActionCreatorFactory } from \"../../state/actions/KontokorrentListenActionCreator\";\nimport { KontokorrentHinzufuegenActionCreator, kontokorrentHinzufuegenActionCreatorFactory } from \"../../state/actions/KontokorrentHinzufuegenActionCreator\";\n\nexport class CreateKontokorrent extends HTMLElement {\n    store: Store;\n    subscription: () => void;\n    routingActionCreator: RoutingActionCreator;\n    private accountActionCreator: AccountActionCreator;\n\n\n    private personenListe: PersonenListe;\n    private emptyNameError: HTMLDivElement;\n    private eventCreateError: HTMLDivElement;\n    private personCountError: HTMLDivElement;\n    private eventNameError: HTMLDivElement;\n    private createButton: HTMLButtonElement;\n    private eventName: HTMLInputElement;\n    private readonly kontokorrentId: string;\n    private creating: HTMLDivElement;\n    private oeffentlicherName: HTMLInputElement;\n    private oeffentlich: HTMLInputElement;\n    private oeffentlichBox: HTMLDivElement;\n    private oeffentlicherNameManuell: boolean;\n    private oeffentlicherNameError: HTMLDivElement;\n    private eventNameDuplicate: HTMLDivElement;\n    private kontokorrentHinzufuegenActionCreator: KontokorrentHinzufuegenActionCreator;\n    private accountCreationFailed: HTMLDivElement;\n    private personNameDuplicateError: HTMLDivElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.kontokorrentId = uuid();\n        this.oeffentlicherNameManuell = false;\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.accountActionCreator = accountActionCreatorFactory(serviceLocator);\n        this.kontokorrentHinzufuegenActionCreator = kontokorrentHinzufuegenActionCreatorFactory(serviceLocator);\n    }\n\n    connectedCallback() {\n        let element = this;\n        this.personenListe = element.querySelector(\"#personen-liste\");\n        this.emptyNameError = element.querySelector(\"#empty-name-error\");\n        this.eventCreateError = element.querySelector(\"#event-create-error\");\n        this.personCountError = element.querySelector(\"#person-count-error\");\n        this.eventNameError = element.querySelector(\"#event-name-error\");\n        this.createButton = element.querySelector(\"#create-button\");\n        this.eventName = element.querySelector(\"#event-name\");\n        this.creating = element.querySelector(\"#creating\");\n        this.oeffentlicherName = element.querySelector(\"#oeffentlicher-name\");\n        this.oeffentlich = element.querySelector(\"#oeffentlich\");\n        this.oeffentlichBox = element.querySelector(\"#oeffentlich-box\");\n        this.oeffentlicherNameError = element.querySelector(\"#oeffentlicher-name-error\");\n        this.eventNameDuplicate = element.querySelector(\"#event-name-duplicate\");\n        this.accountCreationFailed = element.querySelector(\"#account-creation-failed\");\n        this.personNameDuplicateError = element.querySelector(\"#person-name-duplicate-error\");\n\n\n        this.createButton.addEventListener(\"click\", this.createEvent.bind(this));\n\n        this.oeffentlich.addEventListener(\"change\", () => {\n            this.oeffentlichBox.style.display = this.oeffentlich.checked ? \"block\" : \"none\";\n        });\n\n        this.eventName.addEventListener(\"change\", () => {\n            if (!this.oeffentlicherNameManuell) {\n                this.oeffentlicherName.value = this.eventName.value;\n            }\n        });\n\n        this.oeffentlicherName.addEventListener(\"change\", () => {\n            this.oeffentlicherNameManuell = true;\n        });\n\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.applyStoreState(this.store.state);\n    }\n\n    async createEvent() {\n        let eventName = this.eventName.value;\n        let personNames = this.personenListe.personen;\n        this.eventNameError.style.display = eventName ? \"none\" : \"block\";\n        let personCountOk = personNames.length >= 2;\n        this.personCountError.style.display = personCountOk ? \"none\" : \"block\";\n        let personNameError = personNames.some(v => !v);\n        this.emptyNameError.style.display = personNameError ? \"block\" : \"none\";\n        let oeffentlicherNameError = this.oeffentlich.checked && (!this.oeffentlicherName.value || !/^[a-z0-9]+$/.test(this.oeffentlicherName.value));\n        this.oeffentlicherNameError.style.display = oeffentlicherNameError ? \"block\" : \"none\";\n        let personNameDuplicateError = (personNames.some((item, index) => personNames.indexOf(item) != index));\n        this.personNameDuplicateError.style.display = personNameDuplicateError ? \"block\" : \"none\";\n        if (eventName && personCountOk && !personNameError && !oeffentlicherNameError && !personNameDuplicateError) {\n            if (await this.accountActionCreator.ensureAccount()) {\n                if (await this.kontokorrentHinzufuegenActionCreator.kontokorrentErstellen(this.kontokorrentId, this.eventName.value, this.oeffentlich.checked ? this.oeffentlicherName.value : null, personNames)) {\n                    this.routingActionCreator.navigateKontokorrent(this.kontokorrentId);\n                };\n            }\n        }\n    }\n\n    private applyStoreState(state: State) {\n        this.creating.style.display = state.kontokorrents.creating || state.account.accountCreating ? \"block\" : \"none\";\n        this.eventCreateError.style.display = state.kontokorrents.creationFailed ? \"block\" : \"none\";\n        this.eventNameDuplicate.style.display = state.kontokorrents.creationFailed && state.kontokorrents.creationFailed.exists ? \"block\" : \"none\";\n        this.accountCreationFailed.style.display = !state.account.accountCreating && state.account.accountCreationFailed ?\n            \"block\" : \"none\";\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n    }\n}\n\ncustomElements.define('app-create-event', CreateKontokorrent);"],"sourceRoot":""}