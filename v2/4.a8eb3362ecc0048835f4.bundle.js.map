{"version":3,"sources":["webpack:///./src/components/convertLinks.ts","webpack:///./src/components/ui-components/popup/popup.ts","webpack:///./src/components/Login/Login.html","webpack:///./src/components/ui-components/tip-button/tip-button.ts","webpack:///./src/components/Login/Login.ts"],"names":["convertLinks","elements","routingActionCreator","forEach","e","addEventListener","ev","preventDefault","navigate","getAttribute","Popup","HTMLElement","super","popupShown","this","keyListener","bind","clickListener","updateStyles","key","hide","contains","event","document","removeEventListener","style","display","show","customElements","define","module","exports","TipButton","updateAttributes","popupId","querySelector","toggle","stopPropagation","innerHTML","serviceLocator","store","RoutingActionCreator","locate","accountActionCreator","AccountActionCreator","kontokorrentsActionCreator","KontokorrentsActionCreator","querySelectorAll","eventInput","loginButton","homeButton","loginBox","eventMissingError","accountCreationFailed","notFoundError","processing","loginFuerEvent","subscription","subscribe","state","applyStoreState","initializeAccount","loginPageGeoeffnet","value","ensureAccount","id","kontokorrentHinzufuegen","navigateKontokorrent","account","accountCreating","kontokorrents","hinzufuegen","hinzufuegenFailed","kontokorrentNotFound","visibility","accountCreated","Object","keys","length"],"mappings":"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","file":"4.a8eb3362ecc0048835f4.bundle.js","sourcesContent":["import { RoutingActionCreator } from \"../state/actions/RoutingActionCreator\";\n\nexport function convertLinks(elements: Array<HTMLAnchorElement> | NodeListOf<HTMLAnchorElement>, routingActionCreator: RoutingActionCreator) {\n    elements.forEach((e: HTMLAnchorElement) => {\n        e.addEventListener(\"click\", ev => {\n            ev.preventDefault();\n            routingActionCreator.navigate(e.getAttribute(\"href\"));\n        });\n    });\n}","export class Popup extends HTMLElement {\n    private popupShown: boolean = false;\n    constructor() {\n        super();\n        this.keyListener = this.keyListener.bind(this);\n        this.clickListener = this.clickListener.bind(this);\n    }\n\n    connectedCallback() {\n        this.updateStyles();\n    }\n\n    private keyListener(ev: KeyboardEvent) {\n        if (ev.key == \"Escape\") {\n            this.hide();\n        }\n    }\n\n    private clickListener(ev: MouseEvent | TouchEvent) {\n        if (!this.contains(<Element>(event.target))) {\n            this.hide();\n        }\n    }\n\n    public hide() {\n        if (this.popupShown) {\n            document.removeEventListener(\"keydown\", this.keyListener);\n            document.removeEventListener(\"click\", this.clickListener);\n            this.popupShown = false;\n            this.updateStyles();\n        }\n    }\n\n    public show() {\n        if (!this.popupShown) {\n            document.addEventListener(\"keydown\", this.keyListener);\n            document.addEventListener(\"click\", this.clickListener);\n            this.popupShown = true;\n            this.updateStyles();\n        }\n    }\n\n    private updateStyles() {\n        this.style.display = this.popupShown ? \"block\" : \"none\";\n    }\n\n    public toggle() {\n        if (!this.popupShown) {\n            this.show();\n        }\n        else {\n            this.hide();\n\n        }\n    }\n\n    disconnectedCallback() {\n        this.hide();\n    }\n}\ncustomElements.define(\"app-popup\", Popup);\n","// Module\nvar code = \"<div class=login-error-box> <div id=eventMissingError class=\\\"alert alert--error\\\" style=display:none>Kontokorrentnamen eingeben</div> <div id=notFoundError class=\\\"alert alert--error\\\" style=display:none>Kontokorrent wurde nicht gefunden</div> <div id=account-creation-failed class=\\\"alert alert--error\\\" style=display:none>Account konnte nicht erstellt werden</div> </div> <div class=login-box id=login-box> <div class=login-box__event-input> <input type=text id=eventInput placeholder=Kontokorrentname> <tip-button popup-id=oeffentlicherNameExplainer title=\\\"öffentlicher Name Erklärung\\\"> <span class=material-icons> info </span> </tip-button> <app-popup id=oeffentlicherNameExplainer class=\\\"tip tip--with-input\\\"> Gib hier den Namen des öffentlichen Kontokorrents ein. <ul> <li>frag die anderen Event-/Gruppen- Teilnehmer nach dem Namen</li> <li>such in eurem Chat</li> <li>oder lass dir einen Einladungslink schicken</li> </ul> </app-popup> </div> <div> <button id=loginButton class=\\\"button button--raised login-box__login-button\\\"> Login </button> <div id=processing class=login-box__processing style=display:none> <span class=spinner></span> </div> </div> <a id=createEventButton class=button href=create-event> <span class=material-icons> add </span> Gruppe erstellen </a> <a id=home-button class=button href=\\\"\\\"> <span class=material-icons> home </span> zurück </a> </div>\";\n// Exports\nmodule.exports = code;","import { Popup } from \"../popup/popup\";\n\nexport const PopupIdAttribute = \"popup-id\";\n\nexport class TipButton extends HTMLElement {\n    private popupId: string;\n    constructor() {\n        super();\n        this.clickListener = this.clickListener.bind(this);\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.popupId = this.getAttribute(PopupIdAttribute);\n\n    }\n\n    static get observedAttributes() {\n        return [PopupIdAttribute];\n    }\n\n    connectedCallback() {\n        this.addEventListener(\"click\", this.clickListener);\n    }\n\n    private clickListener(ev: MouseEvent) {\n        let popup: Popup = document.querySelector(`#${this.popupId}`);\n        popup.toggle();\n        ev.stopPropagation();\n    }\n\n\n    disconnectedCallback() {\n        this.removeEventListener(\"click\", this.clickListener);\n    }\n}\ncustomElements.define(\"tip-button\", TipButton);\n","import template from \"./Login.html\";\nimport { Store } from \"../../state/Store\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { RoutingActionCreator } from \"../../state/actions/RoutingActionCreator\";\nimport { State } from \"../../state/State\";\nimport { convertLinks } from \"../convertLinks\";\nimport { AccountActionCreator } from \"../../state/actions/AccountActionCreator\";\nimport { KontokorrentsActionCreator } from \"../../state/actions/KontokorrentsActionCreator\";\nimport \"./Login.scss\";\nimport \"../ui-components/popup/popup\";\nimport \"../ui-components/tip-button/tip-button\";\n\nexport class Login extends HTMLElement {\n    store: Store;\n    subscription: () => void;\n    routingActionCreator: RoutingActionCreator;\n    private accountActionCreator: AccountActionCreator;\n    private eventInput: HTMLInputElement;\n    private loginButton: HTMLButtonElement;\n    private eventMissingError: HTMLDivElement;\n    private accountCreationFailed: HTMLDivElement;\n    private notFoundError: HTMLDivElement;\n    private kontokorrentsActionCreator: KontokorrentsActionCreator;\n    private processing: HTMLDivElement;\n    private homeButton: HTMLButtonElement;\n    private loginBox: HTMLDivElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = RoutingActionCreator.locate(serviceLocator);\n        this.accountActionCreator = AccountActionCreator.locate(serviceLocator);\n        this.kontokorrentsActionCreator = KontokorrentsActionCreator.locate(serviceLocator);\n    }\n\n    connectedCallback() {\n        let element = this;\n        convertLinks(element.querySelectorAll(\"a\"), this.routingActionCreator);\n        this.eventInput = element.querySelector(\"#eventInput\");\n        this.loginButton = element.querySelector(\"#loginButton\");\n        this.homeButton = element.querySelector(\"#home-button\");\n        this.loginBox = element.querySelector(\"#login-box\");\n        this.eventMissingError = element.querySelector(\"#eventMissingError\");\n        this.accountCreationFailed = element.querySelector(\"#account-creation-failed\");\n        this.notFoundError = element.querySelector(\"#notFoundError\");\n        this.processing = element.querySelector(\"#processing\");\n\n        this.loginButton.addEventListener(\"click\", this.loginFuerEvent.bind(this));\n\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.applyStoreState(this.store.state);\n        this.accountActionCreator.initializeAccount();\n        this.kontokorrentsActionCreator.loginPageGeoeffnet();\n    }\n\n    async loginFuerEvent() {\n        let event = this.eventInput.value;\n        this.eventMissingError.style.display = event ? \"none\" : \"block\";\n        if (event) {\n            if (await this.accountActionCreator.ensureAccount()) {\n                let id = await this.kontokorrentsActionCreator.kontokorrentHinzufuegen(event);\n                if (id) {\n                    this.routingActionCreator.navigateKontokorrent(id);\n                };\n            }\n        }\n    }\n\n    private applyStoreState(state: State) {\n        this.accountCreationFailed.style.display = !state.account.accountCreating && state.account.accountCreationFailed ?\n            \"block\" : \"none\";\n        this.notFoundError.style.display = !state.kontokorrents.hinzufuegen && state.kontokorrents.hinzufuegenFailed && state.kontokorrents.hinzufuegenFailed.kontokorrentNotFound ?\n            \"block\" : \"none\";\n        let processing = state.kontokorrents.hinzufuegen || state.account.accountCreating;\n        this.processing.style.display = processing ? \"flex\" : \"none\";\n        this.homeButton.style.visibility = state.account.accountCreated &&\n            Object.keys(state.kontokorrents.kontokorrents).length ? \"visible\" : \"hidden\";\n        this.loginButton.style.display = !processing ? \"inline-flex\" : \"none\";\n    }\n\n    disconnectedCallback() {\n\n        this.subscription();\n    }\n}\n\ncustomElements.define('app-login', Login);"],"sourceRoot":""}