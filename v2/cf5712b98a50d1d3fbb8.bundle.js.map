{"version":3,"file":"cf5712b98a50d1d3fbb8.bundle.js","mappings":"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","sources":["webpack://kontokorrent/./src/components/AppBar/AppBar.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectListEntry.ts","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectListEntry.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectList.ts","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectList.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelect.ts","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelect.html","webpack://kontokorrent/./src/components/ShareDialog/ShareDialog.ts","webpack://kontokorrent/./src/components/ShareDialog/ShareDialog.html","webpack://kontokorrent/./src/components/AppBar/AppBar.ts","webpack://kontokorrent/./src/components/convertLinks.ts","webpack://kontokorrent/./src/components/ui-components/popup/popup.ts","webpack://kontokorrent/./src/lib/WorkerService.ts","webpack://kontokorrent/./src/utils/ArrayToElementRenderer.ts","webpack://kontokorrent/./src/utils/ReuseableTemplate.ts"],"sourcesContent":["// Module\nvar code = \"<header class=\\\"app-bar\\\"> <kontokorrent-select class=\\\"app-bar__kontokorrent-select\\\"></kontokorrent-select> <nav class=\\\"app-bar__links\\\"> <button id=\\\"share-button\\\" class=\\\"app-bar__link\\\" title=\\\"Teilen-Dialog öffnen\\\"> <span class=\\\"material-icons\\\"> share </span> </button> <button id=\\\"open-menu-button\\\" class=\\\"app-bar__link\\\" title=\\\"Menü öffnen\\\"> <span class=\\\"material-icons\\\"> menu </span> </button> <app-popup class=\\\"app-bar__nav-popup\\\" id=\\\"appbar-menu\\\"> <a href=\\\"info\\\" class=\\\"button\\\" title=\\\"Informationen über diese App\\\"> <span class=\\\"material-icons\\\"> info </span> Info </a> <button id=\\\"logout-button\\\" class=\\\"button\\\"> <span class=\\\"material-icons\\\"> exit_to_app </span> Ausloggen </button> </app-popup> </nav> </header> <app-popup id=\\\"logout-dialog\\\"> <div class=\\\"dialog__backdrop\\\"></div> <div class=\\\"dialog\\\"> <p class=\\\"dialog__question\\\"> Wirklich aus allen Kontokorrents ausloggen? </p> <div class=\\\"dialog__button-pane\\\"> <button id=\\\"abort-logout\\\" class=\\\"button\\\">Abbrechen</button> <button id=\\\"confirm-logout\\\" class=\\\"button\\\">Ausloggen</button> </div> </div> </app-popup> <app-popup id=\\\"share-dialog\\\"> </app-popup>\";\n// Exports\nexport default code;","import template from \"./KontokorrentSelectListEntry.html\";\nimport { KontokorrentState } from \"../../state/State\";\n\n\nexport class KontokorrentSelectListEntry extends HTMLElement {\n    private name: HTMLSpanElement;\n    private link: HTMLAnchorElement;\n    private kontokorrent: KontokorrentState;\n    private rendered = false;\n    private isActive: boolean = false;\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.name = this.querySelector(`[data-ref=\"name\"]`);\n            this.link = this.querySelector(`[data-ref=\"link\"]`);\n            this.updateStyle();\n        }\n        this.clickEvent = this.clickEvent.bind(this);\n        this.link.addEventListener(\"click\", this.clickEvent);\n    }\n\n    private clickEvent(e: MouseEvent): void {\n        e.preventDefault();\n        this.dispatchEvent(new CustomEvent(\"gotokontokorrent\", { detail: this.kontokorrent.id, bubbles: true }));\n    }\n\n    disconnectedCallback() {\n        this.link.removeEventListener(\"click\", this.clickEvent);\n    }\n\n    update(kontokorrent: KontokorrentState, isActive: boolean) {\n        this.kontokorrent = kontokorrent;\n        this.isActive = isActive;\n        this.updateStyle();\n    }\n\n    private updateStyle() {\n        if (this.rendered && this.kontokorrent) {\n            this.name.innerText = this.kontokorrent.name;\n            this.link.href = `kontokorrents/${this.kontokorrent.id}`;\n            this.link.classList.toggle(\"kontokorrent-select-list__entry--active\", this.isActive);\n        }\n    }\n}\nexport const KontokorrentSelectListEntryTagName = \"kontokorrent-select-list-entry\";\ncustomElements.define(KontokorrentSelectListEntryTagName, KontokorrentSelectListEntry);\n","// Module\nvar code = \"<a data-ref=\\\"link\\\" class=\\\"kontokorrent-select-list__entry\\\"> <span data-ref=\\\"name\\\"></span> </a>\";\n// Exports\nexport default code;","import template from \"./KontokorrentSelectList.html\";\nimport \"./KontokorrentSelectList.scss\";\nimport { KontokorrentState } from \"../../state/State\";\nimport { sortByAlphabetically } from \"../../utils/sortBy\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { KontokorrentSelectListEntry } from \"./KontokorrentSelectListEntry\";\n\nexport class KontokorrentSelectList extends HTMLElement {\n    private list: HTMLOListElement;\n    private _kontokorrents: KontokorrentState[];\n    private _activeKontokorrentId: string;\n    private kontokorrentsRenderer: ArrayToElementRenderer<KontokorrentState, HTMLLIElement, string>;\n    private rendered = false;\n\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.list = this.querySelector(`[data-ref=\"list\"]`);\n            this._kontokorrents = [];\n            this.kontokorrentsRenderer = new ArrayToElementRenderer(this.list,\n                (k: KontokorrentState) => k.id,\n                () => {\n                    let li = document.createElement(\"li\");\n                    li.appendChild(new KontokorrentSelectListEntry());\n                    return li;\n                });\n            this.update();\n        }\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    private update() {\n        if (this.rendered) {\n            this.kontokorrentsRenderer.update(this._kontokorrents,\n                (li, kontokorrent) => {\n                    let x: KontokorrentSelectListEntry = <KontokorrentSelectListEntry>li.firstChild;\n                    x.update(kontokorrent, this._activeKontokorrentId == kontokorrent.id);\n                });\n        }\n    }\n\n    set kontokorrents(kontokorrents: KontokorrentState[]) {\n        this._kontokorrents = sortByAlphabetically(kontokorrents, k => k.name);\n        this.update();\n    }\n\n    set activeKontokorrentId(id: string) {\n        this._activeKontokorrentId = id;\n        this.update();\n    }\n}\nexport const KontokorrentSelectListTagName = \"kontokorrent-select-list\";\ncustomElements.define(KontokorrentSelectListTagName, KontokorrentSelectList);\n","// Module\nvar code = \"<ol data-ref=\\\"list\\\" class=\\\"kontokorrent-select-list\\\"> </ol>\";\n// Exports\nexport default code;","import template from \"./KontokorrentSelect.html\";\nimport \"./KontokorrentSelect.scss\";\nimport \"./KontokorrentSelectList\";\nimport { KontokorrentState } from \"../../state/State\";\nimport { KontokorrentSelectListTagName, KontokorrentSelectList } from \"./KontokorrentSelectList\";\nimport { Popup } from \"../ui-components/popup/popup\";\nimport \"../ui-components/popup/popup\";\n\nexport class KontokorrentSelect extends HTMLElement {\n    private kontokorrentName: HTMLHeadingElement;\n    private popup: Popup;\n    private kontokorrentSelectList: KontokorrentSelectList;\n    private addButton: HTMLButtonElement;\n    private activeKontokorrentId: string;\n    private _kontokorrents: KontokorrentState[] = null;\n    private rendered = false;\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.kontokorrentName = this.querySelector(`[data-ref=\"kontokorrent-name\"]`);\n            this.kontokorrentSelectList = this.querySelector(KontokorrentSelectListTagName);\n            this.addButton = this.querySelector(`#add-kontokorrent`);\n            this.popup = this.querySelector(`app-popup`);\n        }\n        this.updateAttributes();\n        this.addEventListener(\"click\", e => {\n            if (!this.popup.contains(<Element>(event.target))) {\n                this.popup.toggle();\n                e.stopPropagation();\n            }\n        });\n        this.addButton.addEventListener(\"click\", e => {\n            this.dispatchEvent(new CustomEvent(\"addkontokorrent\"));\n        });\n        this.kontokorrentSelectList.addEventListener(\"gotokontokorrent\", () => {\n            this.popup.hide();\n        })\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.activeKontokorrentId = this.getAttribute(\"active-kontokorrent-id\");\n        this.kontokorrentSelectList.activeKontokorrentId = this.activeKontokorrentId;\n        this.updatesStyle();\n    }\n\n    static get observedAttributes() {\n        return [\"active-kontokorrent-id\"];\n    }\n\n    set kontokorrents(kontokorrents: KontokorrentState[]) {\n        this.kontokorrentSelectList.kontokorrents = kontokorrents;\n        this._kontokorrents = kontokorrents;\n        this.updatesStyle();\n    }\n\n    private updatesStyle() {\n        if (this.rendered && this._kontokorrents && this._kontokorrents.length) {\n            let activeKontokorrent = this._kontokorrents.find(k => k.id == this.activeKontokorrentId);\n            if (activeKontokorrent) {\n                this.kontokorrentName.innerText = activeKontokorrent.name;\n                this.kontokorrentName.classList.remove(\"kontokorrent-select__name--unselected\");\n            }\n            else {\n                this.kontokorrentName.innerText = \"(Kontokorrent wählen)\";\n                this.kontokorrentName.classList.add(\"kontokorrent-select__name--unselected\");\n            }\n        }\n    }\n\n}\nexport const KontokorrentSelectTagName = \"kontokorrent-select\";\ncustomElements.define(KontokorrentSelectTagName, KontokorrentSelect);\n","// Module\nvar code = \"<div class=\\\"kontokorrent-select-wrapper\\\"> <div class=\\\"kontokorrent-select\\\"> <h1 data-ref=\\\"kontokorrent-name\\\" class=\\\"kontokorrent-select__name\\\">Kontokorrent</h1> <button class=\\\"kontokorrent-select__choose\\\" title=\\\"anderen Kontokorrent wählen\\\"> <span class=\\\"material-icons\\\"> arrow_drop_down </span> </button> </div> <app-popup class=\\\"kontokorrent-select__popup\\\"> <kontokorrent-select-list></kontokorrent-select-list> <div class=\\\"kontokorrent-select__buttons\\\"> <button id=\\\"add-kontokorrent\\\" class=\\\"button\\\">weiteren hinzufügen</button> </div> </app-popup> </div>\";\n// Exports\nexport default code;","import template from \"./ShareDialog.html\";\nimport \"./ShareDialog.scss\";\n\nexport const ShareKontokorrentDisplay = \"display\";\nexport const ShareKontokorrentOeffentlicherName = \"oeffentlicher-name\";\n\ninterface AttributeStore {\n    display: string;\n    oeffentlicherName: string;\n}\n\nexport class ShareDialog extends HTMLElement {\n    private rendered = false;\n    private shareDoneButton: HTMLButtonElement;\n    private shareDoneListener: (e: MouseEvent) => void;\n    private backdrop: HTMLDivElement;\n    private attributeStore: AttributeStore;\n    private shareDisplayName: HTMLSpanElement;\n    private shareOeffentlicherName: HTMLSpanElement;\n    private webShareSection: HTMLDivElement;\n    private shareLinkInput: HTMLInputElement;\n    private webShareButton: HTMLButtonElement;\n    private shareListener: (e: MouseEvent) => void;\n    private copyLinkButton : HTMLButtonElement;\n    private shareCopied : HTMLDivElement;\n    private copyLinkListener: (e: MouseEvent) => void;\n    constructor() {\n        super();\n        this.attributeStore = {\n            display: \"\",\n            oeffentlicherName: \"\"\n        };\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.shareDoneButton = this.querySelector(\"#share-done\");\n            this.backdrop = this.querySelector(\"#backdrop\");\n            this.shareDisplayName = this.querySelector(\"#share-display-name\");\n            this.shareOeffentlicherName = this.querySelector(\"#share-oeffentlicher-name\");\n            this.shareLinkInput = this.querySelector(\"#share-link\");\n            this.webShareSection = this.querySelector(\"#web-share\");\n            this.webShareButton = this.querySelector(\"#web-share-btn\");\n            this.copyLinkButton = this.querySelector(\"#share-copy-link-btn\");\n            this.shareCopied = this.querySelector(\"#share-copied\");\n            this.updateAttributes();\n        }\n        this.shareCopied.style.visibility = \"hidden\";\n        this.shareDoneListener = (e: MouseEvent) => {\n            e.stopPropagation();\n            this.dispatchEvent(new CustomEvent(\"sharedone\"));\n        };\n        this.shareDoneButton.addEventListener(\"click\", this.shareDoneListener);\n        this.backdrop.addEventListener(\"click\", this.shareDoneListener);\n        this.shareListener = (e: MouseEvent) => {\n            navigator.share({\n                title: `${this.attributeStore.display} - Kontokorrent`,\n                text: `Kontokorrent der Gruppe ${this.attributeStore.display}`,\n                url: `${document.baseURI}kontokorrents/o/${this.attributeStore.oeffentlicherName}`\n            }).then(() => {\n                this.dispatchEvent(new CustomEvent(\"sharedone\"));\n            });\n        };\n        this.webShareButton.addEventListener(\"click\", this.shareListener);\n        this.copyLinkListener = (e: MouseEvent) => {\n            navigator.clipboard.writeText(`${document.baseURI}kontokorrents/o/${this.attributeStore.oeffentlicherName}`).then(() => {\n                this.shareCopied.style.visibility = \"\";\n            });\n        };\n        this.copyLinkButton.addEventListener(\"click\", this.copyLinkListener);\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.attributeStore.display = this.getAttribute(ShareKontokorrentDisplay);\n        this.attributeStore.oeffentlicherName = this.getAttribute(ShareKontokorrentOeffentlicherName);\n        this.updatesStyle();\n    }\n\n    static get observedAttributes() {\n        return [ShareKontokorrentDisplay, ShareKontokorrentOeffentlicherName];\n    }\n\n    disconnectedCallback() {\n        this.shareDoneButton.removeEventListener(\"click\", this.shareDoneListener);\n        this.backdrop.removeEventListener(\"click\", this.shareDoneListener);\n        this.webShareButton.removeEventListener(\"click\", this.shareListener);\n        this.copyLinkButton.removeEventListener(\"click\", this.copyLinkListener);\n    }\n\n    private updatesStyle() {\n        if (this.rendered) {\n            this.webShareSection.style.display = \"share\" in navigator ? \"\" : \"none\";\n            this.shareDisplayName.innerText = this.attributeStore.display;\n            this.shareOeffentlicherName.innerText = this.attributeStore.oeffentlicherName;\n            this.shareLinkInput.value = `${document.baseURI}kontokorrents/o/${this.attributeStore.oeffentlicherName}`;\n        }\n    }\n}\nexport const ShareDialogTagName = \"share-dialog\";\ncustomElements.define(ShareDialogTagName, ShareDialog);\n","// Module\nvar code = \"<div class=\\\"dialog__backdrop\\\" id=\\\"backdrop\\\"></div> <div class=\\\"dialog\\\"> <h2> <strong class=\\\"share-dialog__display-name\\\"> <span id=\\\"share-display-name\\\"></span> </strong> teilen </h2> <p> Alle die den Namen <strong><span id=\\\"share-oeffentlicher-name\\\"></span></strong> kennen, können sich einloggen. </p> <div id=\\\"web-share\\\"> <h3>Über App Teilen</h3> <p>Teile den Kontokorrent über eine App, zum Beispiel im Chat deiner Gruppe.</p> <button title=\\\"über eine App teilen\\\" class=\\\"button button--raised\\\" id=\\\"web-share-btn\\\"> <span class=\\\"material-icons\\\"> share </span> Teilen </button> </div> <div> <h3>Link kopieren</h3> <p>Kopiere den Link und sende ihn an weitere Personen.</p> <div class=\\\"share-dialog__link-box\\\"> <input type=\\\"text\\\" readonly=\\\"readonly\\\" id=\\\"share-link\\\"> <button title=\\\"über eine App teilen\\\" class=\\\"button\\\" id=\\\"share-copy-link-btn\\\" title=\\\"Link kopieren\\\"> <span class=\\\"material-icons\\\"> content_copy </span> </button> </div> <div style=\\\"visibility:hidden\\\" class=\\\"share-dialog__copied\\\" id=\\\"share-copied\\\"> <span class=\\\"material-icons\\\"> done </span> kopiert. </div> </div> <div class=\\\"dialog__button-pane\\\"> <button id=\\\"share-done\\\" class=\\\"button\\\">Fertig</button> </div> </div>\";\n// Exports\nexport default code;","import template from \"./AppBar.html\";\nimport \"./AppBar.scss\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport \"../KontokorrentSelect/KontokorrentSelect\";\nimport { KontokorrentSelectTagName, KontokorrentSelect } from \"../KontokorrentSelect/KontokorrentSelect\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { AccountActionCreator, accountActionCreatorFactory } from \"../../state/actions/AccountActionCreator\";\nimport { Store } from \"../../state/Store\";\nimport { State } from \"../../state/State\";\nimport { Popup } from \"../ui-components/popup/popup\";\nimport { ShareDialog, ShareDialogTagName, ShareKontokorrentDisplay, ShareKontokorrentOeffentlicherName } from \"../ShareDialog/ShareDialog\";\n\nexport class AppBar extends HTMLElement {\n    private kontokorrentSelect: KontokorrentSelect;\n    private store: Store;\n    private routingActionCreator: RoutingActionCreator;\n    private accountActionCreator: AccountActionCreator;\n    private logoutDialog: Popup;\n    private subscription: () => void;\n    private rendered: boolean = false;\n    private menuPopup: Popup;\n    private openMenuButton: HTMLButtonElement;\n    private openMenuButtonListener: (e: MouseEvent) => void;\n    private shareButton: HTMLButtonElement;\n    private shareDialog: Popup;\n    private shareListener: (e: MouseEvent) => void;\n\n\n    constructor() {\n        super();\n    }\n\n    connectedCallback() {\n        if (!this.rendered) {\n            this.rendered = true;\n            this.innerHTML = template;\n            this.kontokorrentSelect = this.querySelector(KontokorrentSelectTagName);\n            this.logoutDialog = this.querySelector(\"#logout-dialog\");\n            this.menuPopup = this.querySelector(\"#appbar-menu\");\n            this.shareDialog = this.querySelector(\"#share-dialog\");\n            this.shareButton = this.querySelector(\"#share-button\");\n            this.openMenuButton = this.querySelector(\"#open-menu-button\");\n            if (this.store) {\n                this.applyStoreState(this.store.state);\n            }\n        }\n        this.querySelector(\"#logout-button\").addEventListener(\"click\", (e: MouseEvent) => {\n            this.logoutDialog.toggle();\n            this.menuPopup.hide();\n            e.stopPropagation();\n        });\n        this.querySelector(\"#confirm-logout\").addEventListener(\"click\", async () => {\n            await this.accountActionCreator.logout();\n        });\n        this.querySelector(\"#abort-logout\").addEventListener(\"click\", () => {\n            this.logoutDialog.hide();\n        });\n        this.openMenuButtonListener = (e: MouseEvent) => {\n            this.menuPopup.toggle();\n            e.stopPropagation();\n        };\n        this.shareListener = (e: MouseEvent) => {\n            this.shareDialog.show();\n            e.stopPropagation();\n            if (!this.shareDialog.querySelector(ShareDialogTagName)) {\n                let dialog = new ShareDialog();\n                dialog.addEventListener(\"sharedone\", () => {\n                    this.shareDialog.hide();\n                });\n                this.shareDialog.appendChild(dialog);\n                this.applyStoreStateToShareDialog(this.store.state);\n            }\n        };\n        this.shareButton.addEventListener(\"click\", this.shareListener);\n        this.openMenuButton.addEventListener(\"click\", this.openMenuButtonListener);\n        this.querySelectorAll(\"a\").forEach((e: HTMLAnchorElement) => {\n            e.addEventListener(\"click\", ev => {\n                ev.preventDefault();\n                this.routingActionCreator.navigate(e.getAttribute(\"href\"));\n            });\n        });\n\n        this.kontokorrentSelect.addEventListener(\"addkontokorrent\", () => {\n            this.routingActionCreator.navigateLogin();\n        });\n    }\n\n    private applyStoreState(state: State): void {\n        if (this.rendered) {\n            this.kontokorrentSelect.kontokorrents = Object.values(state.kontokorrents.kontokorrents);\n            this.kontokorrentSelect.setAttribute(\"active-kontokorrent-id\", state.kontokorrents.activeKontokorrentId);\n            this.shareButton.disabled = !state.kontokorrents.activeKontokorrentId;\n            this.applyStoreStateToShareDialog(state);\n        }\n    }\n\n    private applyStoreStateToShareDialog(state: State) {\n        let dialog = this.shareDialog.querySelector(ShareDialogTagName);\n        let kontokorrent = state.kontokorrents.kontokorrents[state.kontokorrents.activeKontokorrentId];\n        if (dialog && kontokorrent) {\n            dialog.setAttribute(ShareKontokorrentDisplay, kontokorrent.name);\n            dialog.setAttribute(ShareKontokorrentOeffentlicherName, kontokorrent.oeffentlicherName);\n        }\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.accountActionCreator = accountActionCreatorFactory(serviceLocator);\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.applyStoreState(this.store.state);\n    }\n\n    disconnectedCallback() {\n        if (this.subscription) {\n            this.subscription();\n            this.subscription = null;\n        }\n        this.openMenuButton.removeEventListener(\"click\", this.openMenuButtonListener);\n        this.shareButton.removeEventListener(\"click\", this.shareListener);\n    }\n}\nexport const AppBarTagName = \"app-bar\";\ncustomElements.define(AppBarTagName, AppBar);\n","import { RoutingActionCreator } from \"../state/actions/RoutingActionCreator\";\n\nexport function convertLinks(elements: Array<HTMLAnchorElement> | NodeListOf<HTMLAnchorElement>, routingActionCreator: RoutingActionCreator) {\n    elements.forEach((e: HTMLAnchorElement) => {\n        e.addEventListener(\"click\", ev => {\n            ev.preventDefault();\n            routingActionCreator.navigate(e.getAttribute(\"href\"));\n        });\n    });\n}","export class Popup extends HTMLElement {\n    private popupShown: boolean = false;\n    constructor() {\n        super();\n        this.keyListener = this.keyListener.bind(this);\n        this.clickListener = this.clickListener.bind(this);\n    }\n\n    connectedCallback() {\n        this.updateStyles();\n    }\n\n    private keyListener(ev: KeyboardEvent) {\n        if (ev.key == \"Escape\") {\n            this.hide();\n        }\n    }\n\n    private clickListener(ev: MouseEvent | TouchEvent) {\n        if (!this.contains(<Element>(event.target))) {\n            this.hide();\n        }\n    }\n\n    public hide() {\n        if (this.popupShown) {\n            document.removeEventListener(\"keydown\", this.keyListener);\n            document.removeEventListener(\"click\", this.clickListener);\n            this.popupShown = false;\n            this.updateStyles();\n        }\n    }\n\n    public show() {\n        if (!this.popupShown) {\n            document.addEventListener(\"keydown\", this.keyListener);\n            document.addEventListener(\"click\", this.clickListener);\n            this.popupShown = true;\n            this.updateStyles();\n        }\n    }\n\n    private updateStyles() {\n        this.style.display = this.popupShown ? \"block\" : \"none\";\n    }\n\n    public toggle() {\n        if (!this.popupShown) {\n            this.show();\n        }\n        else {\n            this.hide();\n\n        }\n    }\n\n    disconnectedCallback() {\n        this.hide();\n    }\n}\ncustomElements.define(\"app-popup\", Popup);\n","import { ServiceLocator } from \"../ServiceLocator\";\nimport { Store } from \"../state/Store\";\nimport { GetBeschreibungVorschlaegeMessage, KontokorrentOeffnenMessage, ResetBeschreibungenCacheMessage, WorkerMessageType } from \"../worker/KontokorrentWorker\";\n\nexport class WorkerService {\n    constructor(private store: Store) {\n\n    }\n    private worker: Worker;\n\n    private getWorker() {\n        if (!this.worker) {\n            this.worker = new Worker(new URL(\"../worker/KontokorrentWorker\", import.meta.url));\n            this.worker.addEventListener(\"message\", ev => {\n                if (ev.data?.type == \"statedispatch\") {\n                    let msg = ev.data.msg;\n                    this.store.dispatch(msg);\n                }\n            });\n        }\n        return this.worker;\n    }\n\n    getBeschreibungVorschlaege(kontokorrentId: string, eingabe: string) {\n        let msg: GetBeschreibungVorschlaegeMessage = {\n            kontokorrentId: kontokorrentId,\n            type: WorkerMessageType.GetBeschreibungVorschlaege,\n            eingabe: eingabe\n        };\n        this.getWorker().postMessage(msg);\n    }\n\n    resetBeschreibungenCache() {\n        let msg: ResetBeschreibungenCacheMessage = {\n            type: WorkerMessageType.ResetBeschreibungenCache,\n        };\n        this.getWorker().postMessage(msg);\n    }\n\n    kontokorrentOeffnen(oeffentlicherName: string) {\n        let msg: KontokorrentOeffnenMessage = {\n            type: WorkerMessageType.KontokorrentOeffnen,\n            oeffentlicherName: oeffentlicherName\n        };\n        this.getWorker().postMessage(msg);\n    }\n}\n\nexport function workerServiceFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"WorkerService\",\n        serviceLocator => new WorkerService(serviceLocator.store));\n}","export class ArrayToElementRenderer<T, E extends Element, K>{\n    private keyToElement: Map<K, E>;\n    private elementToKey: WeakMap<E, K>;\n    \n    constructor(private listElement: HTMLElement,\n        private keySelector: (x: T) => K,\n        private createElement: (x: T) => E) {\n        this.keyToElement = new Map<K, E>();\n        this.elementToKey = new WeakMap<E, K>();\n    }\n\n    update(list: T[], updateElement: (x: E, data: T) => void) {\n        let keyCache = new Map<T, K>();\n        let getKey = (d: T) => keyCache.get(d) || (() => {\n            let key = this.keySelector(d);\n            keyCache.set(d, key);\n            return key;\n        })();\n        for (let x of Array.from(this.listElement.children)) {\n            let el: E = <E>x;\n            let data = list.find(i => this.elementToKey.get(el) == getKey(i));\n            if (data) {\n                updateElement(<E>el, data);\n            }\n            else {\n                this.listElement.removeChild(el);\n            }\n        }\n        let before: Element = null;\n        let nextKeyToElement = new Map<K, E>();\n        for (let t of list) {\n            let key = getKey(t);\n            let childElement: E = this.keyToElement.get(key);\n            if (!childElement) {\n                childElement = this.createElement(t);\n                updateElement(childElement, t);\n                this.elementToKey.set(childElement, key);\n            }\n            nextKeyToElement.set(key, childElement);\n            if (null == before && childElement != this.listElement.firstElementChild) {\n                this.listElement.prepend(childElement);\n            }\n            else if (null != before && before.nextElementSibling != childElement) {\n                before.insertAdjacentElement(\"afterend\", childElement);\n            }\n            before = childElement;\n        }\n        this.keyToElement = nextKeyToElement;\n    }\n\n}","export interface TemplateInstance {\n    apply(e: HTMLElement): boolean;\n    isApplied(): boolean;\n}\n\nexport class ReuseableTemplate {\n    private instance: HTMLTemplateElement;\n    constructor(private readonly template: string) {\n    }\n\n    private _get(): DocumentFragment {\n        if (null == this.instance) {\n            this.instance = document.createElement(\"template\");\n            this.instance.innerHTML = this.template;\n        }\n        return document.importNode(this.instance.content, true);\n    }\n\n    getInstance(): TemplateInstance {\n        class TemplateInstance {\n            private applied = false;\n\n            constructor(private r: ReuseableTemplate) {\n            }\n\n            apply(e: HTMLElement): boolean {\n                if (this.applied) {\n                    return false;\n                }\n                e.appendChild(this.r._get());\n                this.applied = true;\n                return true;\n            }\n            isApplied() {\n                return this.applied;\n            }\n        }\n        return new TemplateInstance(this);\n    }\n}\n\n\n"],"names":["KontokorrentSelectListEntry","HTMLElement","constructor","super","rendered","isActive","connectedCallback","this","innerHTML","name","querySelector","link","updateStyle","clickEvent","bind","addEventListener","e","preventDefault","dispatchEvent","CustomEvent","detail","kontokorrent","id","bubbles","disconnectedCallback","removeEventListener","update","innerText","href","classList","toggle","customElements","define","KontokorrentSelectList","list","_kontokorrents","kontokorrentsRenderer","ArrayToElementRenderer","k","li","document","createElement","appendChild","firstChild","_activeKontokorrentId","kontokorrents","sortBy","KontokorrentSelectListTagName","KontokorrentSelect","kontokorrentName","kontokorrentSelectList","addButton","popup","updateAttributes","contains","event","target","stopPropagation","hide","attributeChangedCallback","activeKontokorrentId","getAttribute","updatesStyle","length","activeKontokorrent","find","remove","add","KontokorrentSelectTagName","ShareKontokorrentDisplay","ShareKontokorrentOeffentlicherName","ShareDialog","attributeStore","display","oeffentlicherName","shareDoneButton","backdrop","shareDisplayName","shareOeffentlicherName","shareLinkInput","webShareSection","webShareButton","copyLinkButton","shareCopied","style","visibility","shareDoneListener","shareListener","navigator","share","title","text","url","baseURI","then","copyLinkListener","clipboard","writeText","value","ShareDialogTagName","AppBar","kontokorrentSelect","logoutDialog","menuPopup","shareDialog","shareButton","openMenuButton","store","applyStoreState","state","async","accountActionCreator","logout","openMenuButtonListener","show","dialog","applyStoreStateToShareDialog","querySelectorAll","forEach","ev","routingActionCreator","navigate","navigateLogin","Object","values","setAttribute","disabled","addServices","serviceLocator","subscription","subscribe","AppBarTagName","convertLinks","elements","Popup","popupShown","keyListener","clickListener","updateStyles","key","WorkerService","getWorker","worker","Worker","URL","data","type","msg","dispatch","getBeschreibungVorschlaege","kontokorrentId","eingabe","postMessage","resetBeschreibungenCache","kontokorrentOeffnen","workerServiceFactory","get","listElement","keySelector","keyToElement","Map","elementToKey","WeakMap","updateElement","keyCache","getKey","d","set","x","Array","from","children","el","i","removeChild","before","nextKeyToElement","t","childElement","firstElementChild","prepend","nextElementSibling","insertAdjacentElement","ReuseableTemplate","template","_get","instance","importNode","content","getInstance","r","applied","apply","isApplied"],"sourceRoot":""}