{"version":3,"sources":["webpack://kontokorrent/./node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack://kontokorrent/./node_modules/date-fns/esm/startOfDay/index.js","webpack://kontokorrent/./node_modules/date-fns/esm/toDate/index.js","webpack://kontokorrent/./src/components/AppBar/AppBar.html","webpack://kontokorrent/./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.html","webpack://kontokorrent/./src/components/BezahlungEintragenForm/BezahlungEintragenForm.html","webpack://kontokorrent/./src/components/BezahlungEintragenPage/BezahlungEintragenPage.html","webpack://kontokorrent/./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelect.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectList.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectListEntry.html","webpack://kontokorrent/./src/components/MdcCheckbox/MdcCheckbox.html","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectListEntry.ts","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelectList.ts","webpack://kontokorrent/./src/components/KontokorrentSelect/KontokorrentSelect.ts","webpack://kontokorrent/./src/components/AppBar/AppBar.ts","webpack://kontokorrent/./src/lib/NeueBezahlungService.ts","webpack://kontokorrent/./src/state/actions/BezahlungActionCreator.ts","webpack://kontokorrent/./src/sw.constants.ts","webpack://kontokorrent/./src/components/BezahlendePersonRadioButton/BezahlendePersonRadioButton.ts","webpack://kontokorrent/./src/components/MdcCheckbox/MdcCheckbox.ts","webpack://kontokorrent/./src/components/EmpfaengerCheckbox/EmpfaengerCheckbox.ts","webpack://kontokorrent/./src/components/BezahlungEintragenForm/BezahlungEintragenForm.ts","webpack://kontokorrent/./src/utils/toDateInputValue.ts","webpack://kontokorrent/./node_modules/date-fns/esm/isSameDay/index.js","webpack://kontokorrent/./node_modules/date-fns/esm/endOfDay/index.js","webpack://kontokorrent/./src/components/BezahlungEintragenPage/BezahlungEintragenPage.ts","webpack://kontokorrent/./src/components/convertLinks.ts","webpack://kontokorrent/./src/components/ui-components/popup/popup.ts","webpack://kontokorrent/./src/utils/ArrayToElementRenderer.ts","webpack://kontokorrent/./src/utils/ReuseableTemplate.ts"],"names":["requiredArgs","required","args","length","TypeError","startOfDay","dirtyDate","arguments","date","setHours","toDate","argument","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","NaN","module","exports","KontokorrentSelectListEntry","HTMLElement","super","this","innerHTML","name","querySelector","link","clickEvent","bind","addEventListener","e","preventDefault","dispatchEvent","CustomEvent","detail","kontokorrent","id","bubbles","removeEventListener","isActive","innerText","href","classList","toggle","customElements","define","KontokorrentSelectList","list","_kontokorrents","kontokorrentsRenderer","ArrayToElementRenderer","k","li","document","createElement","appendChild","update","firstChild","_activeKontokorrentId","kontokorrents","sortBy","KontokorrentSelectListTagName","KontokorrentSelect","kontokorrentName","kontokorrentSelectList","addButton","popup","updateAttributes","contains","event","stopPropagation","hide","activeKontokorrentId","getAttribute","updatesStyle","activeKontokorrent","find","KontokorrentSelectTagName","AppBar","kontokorrentSelect","logoutDialog","accountActionCreator","logout","convertLinks","querySelectorAll","routingActionCreator","subscription","store","subscribe","state","applyStoreState","navigateLogin","values","setAttribute","serviceLocator","AppBarTagName","NeueBezahlungService","apiClient","db","kontokorrentId","request","aktion","neueBezahlung","addAktionen","BezahlungKontokorrentGeandert","type","NeueBezahlungAnlegen","NeueBezahlungAngelegt","bezahlung","NeueBezahlungAnlegenFailed","BezahlungActionCreator","neueBezahlungService","getZuletztGesehenerKontokorrentId","dispatch","setZuletztGesehenerKontokorrentId","direct","beschreibung","betreff","bezahlendePersonId","bezahlendePerson","empfaengerIds","empfaenger","wert","betrag","zeitpunkt","datum","navigator","window","reg","serviceWorker","ready","zwischengespeichert","bezahlungZwischenspeichern","sync","register","status","zwischengespeicherteBezahlungErledigt","log","bezahlungAnlegen","err","error","BezahlendePersonRadioButton","input","personLabel","label","v","value","template","ReuseableTemplate","CheckboxIdAttribute","CheckboxNameAttribute","get","nativeControl","mdcCheckBox","BezahlungEintragenForm","d","local","validationRequested","empfaengerAuswahl","zahlendePersonRenderer","p","empfaengerRenderer","setMinutes","getMinutes","getTimezoneOffset","toJSON","slice","zahlendePersonMissingError","betreffMissingError","betragMissingError","betragInvalidError","empfaengerMissingError","form","alleCheck","formInputListener","onFormInput","focus","alleClickListener","alleClick","checked","c","empfaengerCheckboxen","validateWhileManipulating","parseBetrag","betragValid","valid","hidden","empty","valueAsDate","dirtyDateLeft","dirtyDateRight","dateLeftStartOfDay","dateRightStartOfDay","isSameDay","endOfDay","selectedEmpfaenger","getDatum","replace","betragFloat","parseFloat","isNaN","_personen","map","filter","validity","betreffValid","zahlendePersonValid","empfaengerValid","some","element","person","radioName","BezahlungEintragenFormTagName","BezahlungEintragenPage","zurueckLink","appBar","bezahlungEintragenForm","saveButton","editingSection","savingSection","saveError","formContainer","bezahlungActionCreator","neueBezahlungServiceFactory","bezahlungActionCreatorFactory","addServices","s","bezahlungEintragenKontokorrentChanged","bezahlungEintragenGeoeffnet","saveEventListener","save","validate","data","getData","bezahlungHinzufuegen","navigateKontokorrent","scrollTop","personen","style","display","elements","forEach","ev","navigate","Popup","popupShown","keyListener","clickListener","updateStyles","key","show","listElement","keySelector","keyToElement","Map","elementToKey","WeakMap","updateElement","keyCache","getKey","set","x","Array","from","children","el","i","removeChild","before","nextKeyToElement","t","childElement","firstElementChild","prepend","nextElementSibling","insertAdjacentElement","instance","importNode","content"],"mappings":"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","file":"a824d3a21ad185629c7f.bundle.js","sourcesContent":["export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","// Module\nvar code = \"<header class=\\\"app-bar\\\"> <kontokorrent-select class=\\\"app-bar__kontokorrent-select\\\"></kontokorrent-select> <nav class=\\\"app-bar__links\\\"> <button id=\\\"logout-button\\\" class=\\\"app-bar__link\\\" title=\\\"Logout\\\"> <span class=\\\"material-icons\\\"> exit_to_app </span> </button> <a href=\\\"info\\\" class=\\\"app-bar__link\\\" title=\\\"Informationen über diese App\\\"> <span class=\\\"material-icons\\\"> info </span> </a> </nav> </header> <app-popup id=\\\"logout-dialog\\\"> <div class=\\\"dialog__backdrop\\\"></div> <div class=\\\"dialog\\\"> <p> Wirklich aus allen Kontokorrents ausloggen? </p> <div class=\\\"dialog__button-pane\\\"> <button id=\\\"abort-logout\\\" class=\\\"button\\\">Abbrechen</button> <button id=\\\"confirm-logout\\\" class=\\\"button\\\">Ausloggen</button> </div> </div> </app-popup>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<input type=\\\"radio\\\" class=\\\"bezahlende-person-radio__input\\\"/> <label class=\\\"bezahlende-person-radio\\\"> <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\"> <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/> <path d=\\\"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z\\\"/> </svg> <span data-ref=\\\"label\\\"></span> </label>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<form novalidate class=\\\"bezahlung-eintragen-form\\\" id=\\\"bezahlung-eintragen-form\\\"> <div id=\\\"betreff-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Es muss ein <label class=\\\"alert__field-label\\\" for=\\\"betreff\\\">Betreff</label> angegeben werden.</div> <div id=\\\"betrag-invalid-error\\\" class=\\\"alert alert--error\\\" hidden> Der <label class=\\\"alert__field-label\\\" for=\\\"betrag\\\">Betrag</label> ist ungültig.</div> <div id=\\\"betrag-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Es muss ein <label class=\\\"alert__field-label\\\" for=\\\"betrag\\\">Betrag</label> angegeben werden.</div> <span id=\\\"zahlende-person-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Wähle eine Person aus die bezahlt. </span> <div id=\\\"empfaenger-missing-error\\\" class=\\\"alert alert--error\\\" hidden>Wähle Personen aus für die bezahlt wird. </div> <label for=\\\"betrag\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Betrag</label> <input name=\\\"betrag\\\" id=\\\"betrag\\\" type=\\\"number\\\" novalidate step=\\\"any\\\"> <label for=\\\"zahlende-person\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Diese Person zahlt</label> <div id=\\\"zahlende-person-auswahl\\\"></div> <div class=\\\"bezahlung-eintragen-form__empfaenger-row\\\"> <label for=\\\"empfaenger\\\" class=\\\"bezahlung-eintragen-form__label\\\">für diese Personen</label> <mdc-checkbox checkbox-id=\\\"alle\\\" checkbox-name=\\\"alle\\\" id=\\\"alle-check\\\"></mdc-checkbox> <label for=\\\"alle\\\">alle</label> </div> <div id=\\\"empfaenger-auswahl\\\"></div> <label for=\\\"betreff\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Betreff</label> <input name=\\\"betreff\\\" id=\\\"betreff\\\" required=\\\"\\\" type=\\\"text\\\"> <label for=\\\"datum\\\" class=\\\"bezahlung-eintragen-form__label bezahlung-eintragen-form__row\\\">Datum</label> <input name=\\\"datum\\\" id=\\\"datum\\\" required=\\\"\\\" type=\\\"date\\\"> </form>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<app-bar></app-bar> <div id=\\\"bezahlung-eintragen__edit\\\" class=\\\"bezahlung-eintragen__edit\\\"> <div class=\\\"bezahlungen-page-menu\\\"> <a id=\\\"zurueck-zum-kontokorrent\\\" class=\\\"button\\\"> <span class=\\\"material-icons\\\"> arrow_back </span> zurück </a> <button class=\\\"button\\\" title=\\\"speichern\\\" id=\\\"bezahlung-eintragen__save\\\"> <span class=\\\"material-icons\\\"> save </span> speichern </button> </div> <div class=\\\"bezahlung-eintragen__form-container\\\" id=\\\"bezahlung-eintragen__form-container\\\"> <div id=\\\"save-error\\\" class=\\\"alert alert--error\\\" hidden>Zahlung konnte nicht gespeichert werden. </div> <bezahlung-eintragen-form> </bezahlung-eintragen-form> </div> </div> <div id=\\\"bezahlung-eintragen__saving\\\" class=\\\"bezahlung-eintragen__saving\\\"> <span class=\\\"spinner\\\"></span> <span>wird gespeichert</span> </div>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<mdc-checkbox></mdc-checkbox> <label></label>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<div class=\\\"kontokorrent-select-wrapper\\\"> <div class=\\\"kontokorrent-select\\\"> <h1 data-ref=\\\"kontokorrent-name\\\" class=\\\"kontokorrent-select__name\\\">Kontokorrent</h1> <button class=\\\"kontokorrent-select__choose\\\" title=\\\"anderen Kontokorrent wählen\\\"> <span class=\\\"material-icons\\\"> arrow_drop_down </span> </button> </div> <app-popup class=\\\"kontokorrent-select__popup\\\"> <kontokorrent-select-list></kontokorrent-select-list> <div class=\\\"kontokorrent-select__buttons\\\"> <button id=\\\"add-kontokorrent\\\" class=\\\"button\\\">weiteren hinzufügen</button> </div> </app-popup> </div>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<ol data-ref=\\\"list\\\" class=\\\"kontokorrent-select-list\\\"> </ol>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<a data-ref=\\\"link\\\" class=\\\"kontokorrent-select-list__entry\\\"> <span data-ref=\\\"name\\\"></span> </a>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<div class=\\\"mdc-touch-target-wrapper\\\"> <div class=\\\"mdc-checkbox mdc-checkbox--touch\\\"> <input type=\\\"checkbox\\\" class=\\\"mdc-checkbox__native-control\\\"/> <div class=\\\"mdc-checkbox__background\\\"> <svg class=\\\"mdc-checkbox__checkmark\\\" viewBox=\\\"0 0 24 24\\\"> <path class=\\\"mdc-checkbox__checkmark-path\\\" fill=\\\"none\\\" d=\\\"M1.73,12.91 8.1,19.28 22.79,4.59\\\"/> </svg> <div class=\\\"mdc-checkbox__mixedmark\\\"></div> </div> <div class=\\\"mdc-checkbox__ripple\\\"></div> </div> </div>\";\n// Exports\nmodule.exports = code;","import template from \"./KontokorrentSelectListEntry.html\";\nimport { KontokorrentState } from \"../../state/State\";\n\n\nexport class KontokorrentSelectListEntry extends HTMLElement {\n    private name: HTMLSpanElement;\n    private link: HTMLAnchorElement;\n    private kontokorrent: KontokorrentState;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.name = this.querySelector(`[data-ref=\"name\"]`);\n        this.link = this.querySelector(`[data-ref=\"link\"]`);\n        this.clickEvent = this.clickEvent.bind(this);\n    }\n\n    connectedCallback() {\n        this.link.addEventListener(\"click\", this.clickEvent);\n    }\n\n    private clickEvent(e: MouseEvent): void {\n        e.preventDefault();\n        this.dispatchEvent(new CustomEvent(\"gotokontokorrent\", { detail: this.kontokorrent.id, bubbles: true }));\n    }\n\n    disconnectedCallback() {\n        this.link.removeEventListener(\"click\", this.clickEvent);\n    }\n\n    update(kontokorrent: KontokorrentState, isActive: boolean) {\n        this.kontokorrent = kontokorrent;\n        this.name.innerText = kontokorrent.name;\n        this.link.href = `kontokorrents/${kontokorrent.id}`;\n        this.link.classList.toggle(\"kontokorrent-select-list__entry--active\", isActive);\n    }\n}\nexport const KontokorrentSelectListEntryTagName = \"kontokorrent-select-list-entry\";\ncustomElements.define(KontokorrentSelectListEntryTagName, KontokorrentSelectListEntry);\n","import template from \"./KontokorrentSelectList.html\";\nimport \"./KontokorrentSelectList.scss\";\nimport { KontokorrentState } from \"../../state/State\";\nimport { sortByAlphabetically } from \"../../utils/sortBy\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { KontokorrentSelectListEntry } from \"./KontokorrentSelectListEntry\";\n\nexport class KontokorrentSelectList extends HTMLElement {\n    private list: HTMLOListElement;\n    private _kontokorrents: KontokorrentState[];\n    private _activeKontokorrentId: string;\n    private kontokorrentsRenderer: ArrayToElementRenderer<KontokorrentState, HTMLLIElement, string>;\n\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.list = this.querySelector(`[data-ref=\"list\"]`);\n        this._kontokorrents = [];\n        this.kontokorrentsRenderer = new ArrayToElementRenderer(this.list,\n            (k: KontokorrentState) => k.id,\n            () => {\n                let li = document.createElement(\"li\");\n                li.appendChild(new KontokorrentSelectListEntry());\n                return li;\n            });\n    }\n\n    connectedCallback() {\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    private update() {\n        this.kontokorrentsRenderer.update(this._kontokorrents,\n            (li, kontokorrent) => {\n                let x: KontokorrentSelectListEntry = <KontokorrentSelectListEntry>li.firstChild;\n                x.update(kontokorrent, this._activeKontokorrentId == kontokorrent.id);\n            });\n    }\n\n    set kontokorrents(kontokorrents: KontokorrentState[]) {\n        this._kontokorrents = sortByAlphabetically(kontokorrents, k => k.name);\n        this.update();\n    }\n\n    set activeKontokorrentId(id: string) {\n        this._activeKontokorrentId = id;\n        this.update();\n    }\n}\nexport const KontokorrentSelectListTagName = \"kontokorrent-select-list\";\ncustomElements.define(KontokorrentSelectListTagName, KontokorrentSelectList);\n","import template from \"./KontokorrentSelect.html\";\nimport \"./KontokorrentSelect.scss\";\nimport \"./KontokorrentSelectList\";\nimport { KontokorrentState } from \"../../state/State\";\nimport { KontokorrentSelectListTagName, KontokorrentSelectList } from \"./KontokorrentSelectList\";\nimport { Popup } from \"../ui-components/popup/popup\";\nimport \"../ui-components/popup/popup\";\n\nexport class KontokorrentSelect extends HTMLElement {\n    private kontokorrentName: HTMLHeadingElement;\n    private popup: Popup;\n    private kontokorrentSelectList: KontokorrentSelectList;\n    private addButton: HTMLButtonElement;\n    private activeKontokorrentId: string;\n    private _kontokorrents: KontokorrentState[];\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.kontokorrentName = this.querySelector(`[data-ref=\"kontokorrent-name\"]`);\n        this.kontokorrentSelectList = this.querySelector(KontokorrentSelectListTagName);\n        this.addButton = this.querySelector(`#add-kontokorrent`);\n        this._kontokorrents = null;\n    }\n\n    connectedCallback() {\n        this.popup = this.querySelector(`app-popup`);\n        this.updateAttributes();\n        this.addEventListener(\"click\", e => {\n            if (!this.popup.contains(<Element>(event.target))) {\n                this.popup.toggle();\n                e.stopPropagation();\n            }\n        });\n        this.addButton.addEventListener(\"click\", e => {\n            this.dispatchEvent(new CustomEvent(\"addkontokorrent\"));\n        });\n        this.kontokorrentSelectList.addEventListener(\"gotokontokorrent\", () => {\n            this.popup.hide();\n        })\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.activeKontokorrentId = this.getAttribute(\"active-kontokorrent-id\");\n        this.kontokorrentSelectList.activeKontokorrentId = this.activeKontokorrentId;\n        this.updatesStyle();\n    }\n\n    static get observedAttributes() {\n        return [\"active-kontokorrent-id\"];\n    }\n\n    set kontokorrents(kontokorrents: KontokorrentState[]) {\n        this.kontokorrentSelectList.kontokorrents = kontokorrents;\n        this._kontokorrents = kontokorrents;\n        this.updatesStyle();\n    }\n\n    private updatesStyle() {\n        if (this._kontokorrents && this._kontokorrents.length) {\n            let activeKontokorrent = this._kontokorrents.find(k => k.id == this.activeKontokorrentId);\n            if (activeKontokorrent) {\n                this.kontokorrentName.innerText = activeKontokorrent.name;\n            }\n            else {\n                this.kontokorrentName.innerText = \"(Kontokorrent wählen)\";\n            }\n        }\n    }\n\n}\nexport const KontokorrentSelectTagName = \"kontokorrent-select\";\ncustomElements.define(KontokorrentSelectTagName, KontokorrentSelect);\n","import template from \"./AppBar.html\";\nimport \"./AppBar.scss\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { convertLinks } from \"../convertLinks\";\nimport \"../KontokorrentSelect/KontokorrentSelect\";\nimport { KontokorrentSelectTagName, KontokorrentSelect } from \"../KontokorrentSelect/KontokorrentSelect\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { AccountActionCreator, accountActionCreatorFactory } from \"../../state/actions/AccountActionCreator\";\nimport { Store } from \"../../state/Store\";\nimport { State } from \"../../state/State\";\nimport { Popup } from \"../ui-components/popup/popup\";\n\nexport class AppBar extends HTMLElement {\n    private kontokorrentSelect: KontokorrentSelect;\n    private store: Store;\n    private routingActionCreator: RoutingActionCreator;\n    private accountActionCreator: AccountActionCreator;\n    private logoutDialog: Popup;\n    private subscription: () => void;\n\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.kontokorrentSelect = this.querySelector(KontokorrentSelectTagName);\n        this.logoutDialog = this.querySelector(\"#logout-dialog\");\n    }\n\n    connectedCallback() {\n        this.querySelector(\"#logout-button\").addEventListener(\"click\", (e: MouseEvent) => {\n            this.logoutDialog.toggle();\n            e.stopPropagation();\n        });\n        this.querySelector(\"#confirm-logout\").addEventListener(\"click\", async () => {\n            await this.accountActionCreator.logout();\n        });\n        this.querySelector(\"#abort-logout\").addEventListener(\"click\", () => {\n            this.logoutDialog.hide();\n        });\n        convertLinks(this.querySelectorAll(\"a\"), this.routingActionCreator);\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.applyStoreState(this.store.state);\n        this.kontokorrentSelect.addEventListener(\"addkontokorrent\", () => {\n            this.routingActionCreator.navigateLogin();\n        });\n    }\n\n    applyStoreState(state: State): void {\n        this.kontokorrentSelect.kontokorrents = Object.values(state.kontokorrents.kontokorrents);\n        this.kontokorrentSelect.setAttribute(\"active-kontokorrent-id\", state.kontokorrents.activeKontokorrentId);\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.accountActionCreator = accountActionCreatorFactory(serviceLocator);\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n    }\n}\nexport const AppBarTagName = \"app-bar\";\ncustomElements.define(AppBarTagName, AppBar);\n","import { ApiClient } from \"../api/ApiClient\";\nimport { NeueBezahlungRequest } from \"../api/NeueBezahlungRequest\";\nimport { ServiceLocator } from \"../ServiceLocator\";\nimport { KontokorrentDatabase } from \"./KontokorrentDatabase\";\n\nexport class NeueBezahlungService {\n    constructor(private apiClient: ApiClient,\n        private db: KontokorrentDatabase) {\n    }\n\n    async bezahlungAnlegen(kontokorrentId: string, request: NeueBezahlungRequest) {\n        let aktion = await this.apiClient.neueBezahlung(kontokorrentId, request);\n        this.db.addAktionen(kontokorrentId, [aktion]);\n        return aktion;\n    }\n}\n\nexport function neueBezahlungServiceFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"NeueBezahlungService\",\n        serviceLocator => new NeueBezahlungService(serviceLocator.apiClient,\n            serviceLocator.db));\n}","import { Store } from \"../Store\";\nimport { KontokorrentDatabase } from \"../../lib/KontokorrentDatabase\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { Action } from \"../lib/Action\";\nimport { ActionNames } from \"./ActionNames\";\nimport { NeueBezahlungBackgroundSyncTag } from \"../../sw.constants\";\nimport { NeueBezahlungService, neueBezahlungServiceFactory } from \"../../lib/NeueBezahlungService\";\nimport { NeueBezahlungRequest } from \"../../api/NeueBezahlungRequest\";\nimport { v4 as uuid } from \"uuid\";\nimport { NeueBezahlungDbModel } from \"../../lib/NeueBezahlungDbModel\";\nimport { Bezahlung, BezahlungStatus } from \"../State\";\n\nexport class BezahlungKontokorrentGeandert implements Action {\n    readonly type = ActionNames.BezahlungKontokorrentGeandert;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport class NeueBezahlungAnlegen implements Action {\n    readonly type = ActionNames.NeueBezahlungAnlegen;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport class NeueBezahlungAngelegt implements Action {\n    readonly type = ActionNames.NeueBezahlungAngelegt;\n    constructor(public kontokorrentId: string, public bezahlung: Bezahlung) {\n    }\n}\n\nexport class NeueBezahlungAnlegenFailed implements Action {\n    readonly type = ActionNames.NeueBezahlungAnlegenFailed;\n    constructor(public kontokorrentId: string) {\n    }\n}\n\nexport type BezahlungActions = BezahlungKontokorrentGeandert\n    | NeueBezahlungAnlegenFailed\n    | NeueBezahlungAnlegen\n    | NeueBezahlungAngelegt;\n\nexport class BezahlungActionCreator {\n    constructor(private store: Store,\n        private db: KontokorrentDatabase,\n        private neueBezahlungService: NeueBezahlungService) {\n    }\n\n    async bezahlungEintragenGeoeffnet() {\n        let id = this.store.state.kontokorrents.activeKontokorrentId || await this.db.getZuletztGesehenerKontokorrentId();\n        this.store.dispatch(new BezahlungKontokorrentGeandert(id));\n    }\n\n    async bezahlungEintragenKontokorrentChanged(id: string) {\n        this.store.dispatch(new BezahlungKontokorrentGeandert(id));\n        await this.db.setZuletztGesehenerKontokorrentId(id);\n    }\n\n    async bezahlungHinzufuegen(kontokorrentId: string, bezahlung: { betreff: string, betrag: number, datum: Date, bezahlendePerson: string, empfaenger: string[] }) {\n        let direct = false;\n        let id = uuid();\n        let request: NeueBezahlungRequest = {\n            beschreibung: bezahlung.betreff,\n            bezahlendePersonId: bezahlung.bezahlendePerson,\n            empfaengerIds: bezahlung.empfaenger,\n            id: id,\n            wert: bezahlung.betrag,\n            zeitpunkt: bezahlung.datum\n        };\n        if (\"serviceWorker\" in navigator && \"SyncManager\" in window) {\n            let reg = await navigator.serviceWorker.ready;\n            try {\n                let zwischengespeichert: NeueBezahlungDbModel = {\n                    beschreibung: bezahlung.betreff,\n                    bezahlendePersonId: bezahlung.bezahlendePerson,\n                    empfaengerIds: bezahlung.empfaenger,\n                    id: id,\n                    wert: bezahlung.betrag,\n                    zeitpunkt: bezahlung.datum,\n                    kontokorrentId: kontokorrentId\n                }\n                await this.db.bezahlungZwischenspeichern(zwischengespeichert);\n                await reg.sync.register(NeueBezahlungBackgroundSyncTag);\n                this.store.dispatch(new NeueBezahlungAngelegt(kontokorrentId, {\n                    beschreibung: zwischengespeichert.beschreibung,\n                    bezahlendePersonId: zwischengespeichert.bezahlendePersonId,\n                    empfaengerIds: zwischengespeichert.empfaengerIds,\n                    id: zwischengespeichert.id,\n                    wert: zwischengespeichert.wert,\n                    zeitpunkt: zwischengespeichert.zeitpunkt,\n                    status: BezahlungStatus.Zwischengespeichert\n                }));\n            } catch {\n                console.warn(\"background sync not allowed\");\n                await this.db.zwischengespeicherteBezahlungErledigt(id);\n                direct = true;\n            }\n        } else {\n            console.log(\"background sync not supported\");\n            direct = true;\n        }\n        if (direct) {\n            this.store.dispatch(new NeueBezahlungAnlegen(kontokorrentId));\n            try {\n                let aktion = await this.neueBezahlungService.bezahlungAnlegen(kontokorrentId, request);\n                this.store.dispatch(new NeueBezahlungAngelegt(kontokorrentId, {\n                    beschreibung: aktion.bezahlung.beschreibung,\n                    bezahlendePersonId: aktion.bezahlung.bezahlendePersonId,\n                    empfaengerIds: aktion.bezahlung.empfaengerIds,\n                    id: aktion.bezahlung.id,\n                    wert: aktion.bezahlung.wert,\n                    zeitpunkt: aktion.bezahlung.zeitpunkt,\n                    status: BezahlungStatus.Gespeichert\n                }));\n            }\n            catch (err) {\n                console.error(err);\n                this.store.dispatch(new NeueBezahlungAnlegenFailed(kontokorrentId));\n                throw err;\n            }\n        }\n    }\n}\n\nexport function bezahlungActionCreatorFactory(serviceLocator: ServiceLocator) {\n    return serviceLocator.get(\"BezahlungActionCreator\",\n        serviceLocator => new BezahlungActionCreator(serviceLocator.store,\n            serviceLocator.db,\n            neueBezahlungServiceFactory(serviceLocator)));\n}\n","export const NeueBezahlungBackgroundSyncTag = \"NeueBezahlungBackgroundSync\";","import { Person } from \"../../state/State\";\nimport template from \"./BezahlendePersonRadioButton.html\";\nimport \"./BezahlendePersonRadioButton.scss\";\n\nexport class BezahlendePersonRadioButton extends HTMLElement {\n    private input: HTMLInputElement;\n    private personLabel: HTMLLabelElement;\n    private label: HTMLLabelElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.input = this.querySelector(\"input\");\n        this.personLabel = this.querySelector(`[data-ref=\"label\"]`);\n        this.label = this.querySelector(\"label\");\n    }\n\n    connectedCallback() {\n\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    set radioName(v: string) {\n        this.input.name = v;\n    }\n\n    set person(value: Person) {\n        this.input.value = value.id;\n        this.personLabel.innerText = value.name;\n        this.input.id = value.id;\n        this.label.setAttribute(\"for\", value.id);\n    }\n}\n\ncustomElements.define(\"bezahlende-person-radio-button\", BezahlendePersonRadioButton);\n","import { ReuseableTemplate } from \"../../utils/ReuseableTemplate\";\nimport templateContent from \"./MdcCheckbox.html\";\nimport \"./MdcCheckbox.scss\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport const CheckboxIdAttribute = \"checkbox-id\";\nexport const CheckboxNameAttribute = \"checkbox-name\";\n\nexport class MdcCheckbox extends HTMLElement {\n    private nativeControl: HTMLInputElement;\n\n    constructor() {\n        super();\n        this.appendChild(template.get());\n        this.nativeControl = this.querySelector(\".mdc-checkbox__native-control\");\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n\n    attributeChangedCallback() {\n        this.updateAttributes();\n    }\n\n    private updateAttributes() {\n        this.nativeControl.id = this.getAttribute(CheckboxIdAttribute);\n        this.nativeControl.name = this.getAttribute(CheckboxNameAttribute);\n    }\n\n    static get observedAttributes() {\n        return [CheckboxIdAttribute, CheckboxNameAttribute];\n    }\n}\n\ncustomElements.define(\"mdc-checkbox\", MdcCheckbox);\n","import templateContent from \"./EmpfaengerCheckbox.html\";\nimport \"./EmpfaengerCheckbox.scss\";\nimport \"../MdcCheckbox/MdcCheckbox\";\nimport { MdcCheckbox } from \"../MdcCheckbox/MdcCheckbox\";\nimport { Person } from \"../../state/State\";\nimport { ReuseableTemplate } from \"../../utils/ReuseableTemplate\";\n\nconst template = new ReuseableTemplate(templateContent);\n\nexport class EmpfaengerCheckbox extends HTMLElement {\n    private mdcCheckBox: MdcCheckbox;\n    private label: HTMLLabelElement;\n\n    constructor() {\n        super();\n        this.appendChild(template.get());\n        this.mdcCheckBox = this.querySelector(\"mdc-checkbox\");\n        this.label = this.querySelector(\"label\");\n    }\n\n    set person(value: Person) {\n        this.label.innerText = value.name;\n        const id = `empfaenger-${value.id}`;\n        this.label.setAttribute(\"for\", id);\n        this.mdcCheckBox.setAttribute(\"checkbox-id\", id);\n        this.mdcCheckBox.setAttribute(\"checkbox-name\", id);\n    }\n\n    connectedCallback() {\n\n    }\n\n    disconnectedCallback() {\n\n    }\n}\n\ncustomElements.define(\"empfaenger-checkbox\", EmpfaengerCheckbox);\n","import { Person } from \"../../state/State\";\nimport template from \"./BezahlungEintragenForm.html\";\nimport \"./BezahlungEintragenForm.scss\";\nimport { ArrayToElementRenderer } from \"../../utils/ArrayToElementRenderer\";\nimport { BezahlendePersonRadioButton } from \"../BezahlendePersonRadioButton/BezahlendePersonRadioButton\";\nimport { EmpfaengerCheckbox } from \"../EmpfaengerCheckbox/EmpfaengerCheckbox\";\nimport { toDateInputValue } from \"../../utils/toDateInputValue\";\nimport { endOfDay, isSameDay } from \"date-fns\";\nimport { MdcCheckbox } from \"../MdcCheckbox/MdcCheckbox\";\n\nexport class BezahlungEintragenForm extends HTMLElement {\n    private zahlendePersonRenderer: ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>;\n    private empfaengerRenderer: ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>;\n    private datum: HTMLInputElement;\n    private betreff: HTMLInputElement;\n    private betrag: HTMLInputElement;\n    private zahlendePersonMissingError: HTMLSpanElement;\n    private betreffMissingError: HTMLDivElement;\n    private betragMissingError: HTMLDivElement;\n    private empfaengerMissingError: HTMLDivElement;\n    private validationRequested: boolean = false;\n    private form: HTMLFormElement;\n    private formInputListener: () => void;\n    private betragInvalidError: HTMLDivElement;\n    private empfaengerAuswahl: HTMLDivElement;\n    private _personen: Person[];\n    private alleCheck: MdcCheckbox;\n    private alleClickListener: () => void;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.empfaengerAuswahl = this.querySelector(\"#empfaenger-auswahl\");\n        this.zahlendePersonRenderer = new ArrayToElementRenderer<Person, BezahlendePersonRadioButton, string>(\n            this.querySelector(\"#zahlende-person-auswahl\"),\n            p => p.id,\n            p => new BezahlendePersonRadioButton());\n        this.empfaengerRenderer = new ArrayToElementRenderer<Person, EmpfaengerCheckbox, string>(\n            this.empfaengerAuswahl,\n            p => p.id,\n            p => new EmpfaengerCheckbox());\n        this.datum = this.querySelector(\"#datum\");\n        this.datum.value = toDateInputValue(new Date());\n        this.betrag = this.querySelector(\"#betrag\");\n        this.betreff = this.querySelector(\"#betreff\");\n        this.zahlendePersonMissingError = this.querySelector(\"#zahlende-person-missing-error\");\n        this.betreffMissingError = this.querySelector(\"#betreff-missing-error\");\n        this.betragMissingError = this.querySelector(\"#betrag-missing-error\");\n        this.betragInvalidError = this.querySelector(\"#betrag-invalid-error\");\n        this.empfaengerMissingError = this.querySelector(\"#empfaenger-missing-error\");\n        this.form = this.querySelector(\"#bezahlung-eintragen-form\");\n        this.alleCheck = this.querySelector(\"#alle-check\");\n    }\n\n    connectedCallback() {\n        this.formInputListener = () => this.onFormInput();\n        this.form.addEventListener(\"input\", this.formInputListener);\n        this.betrag.focus();\n        this.alleClickListener = () => this.alleClick();\n        this.alleCheck.addEventListener(\"input\", this.alleClickListener);\n    }\n\n    private alleClick() {\n        let checked = (this.form[\"alle\"] as HTMLInputElement).checked;\n        for (let c of this.empfaengerCheckboxen) {\n            c.checked = checked;\n        }\n    }\n\n    disconnectedCallback() {\n        this.form.removeEventListener(\"input\", this.formInputListener);\n        this.alleCheck.removeEventListener(\"input\", this.alleClickListener);\n    }\n\n    onFormInput() {\n        this.validateWhileManipulating();\n    }\n\n    validate() {\n        this.validationRequested = true;\n        let betrag = this.parseBetrag();\n        let betragValid = betrag.valid;\n        this.betragInvalidError.hidden = betrag.valid || betrag.empty;\n        let valid = this.validateWhileManipulating() && betragValid;\n        return valid;\n    }\n\n    private getDatum() {\n        let d = this.datum.valueAsDate;\n        if (!d || isSameDay(d, new Date())) {\n            return new Date();\n        }\n        return endOfDay(d);\n    }\n\n    getData() {\n        return {\n            betrag: this.parseBetrag().value,\n            betreff: this.betreff.value,\n            empfaenger: this.selectedEmpfaenger,\n            bezahlendePerson: this.bezahlendePerson.value,\n            datum: this.getDatum()\n        }\n    }\n\n    private parseBetrag() {\n        this.betrag.setAttribute(\"type\", \"text\");\n        let betrag = this.betrag.value;\n        this.betrag.setAttribute(\"type\", \"number\");\n        if (betrag == \"\") {\n            return { valid: false, empty: true };\n        }\n        betrag = betrag.replace(\",\", \".\");\n        betrag = betrag.replace(/ /g, \"\");\n        let betragFloat = parseFloat(betrag);\n        if (isNaN(betragFloat)) {\n            return { valid: false, empty: false };\n        }\n        return { valid: true, value: betragFloat };\n    }\n\n    private get bezahlendePerson(): HTMLInputElement {\n        return this.form[\"bezahlende-person\"];\n    }\n\n    private get empfaengerCheckboxen(): HTMLInputElement[] {\n        return this._personen.map(p => (this.form[\"empfaenger-\" + p.id] as HTMLInputElement));\n    }\n\n    private get selectedEmpfaenger(): string[] {\n        return this._personen.filter(p => (this.form[\"empfaenger-\" + p.id] as HTMLInputElement).checked)\n            .map(p => p.id);\n    }\n\n    private validateWhileManipulating() {\n        let validity = {\n            betragValid: !!this.betrag.value,\n            betreffValid: !!this.betreff.value,\n            zahlendePersonValid: !!this.bezahlendePerson.value,\n            empfaengerValid: this.selectedEmpfaenger.length > 0\n        };\n        this.betragMissingError.hidden = !this.validationRequested || validity.betragValid;\n        this.betreffMissingError.hidden = !this.validationRequested || validity.betreffValid;\n        this.zahlendePersonMissingError.hidden = !this.validationRequested || validity.zahlendePersonValid;\n        this.empfaengerMissingError.hidden = !this.validationRequested || validity.empfaengerValid;\n        return !Object.values(validity).some(v => v == false);\n    }\n\n    set personen(value: Person[]) {\n        this._personen = value;\n        this.zahlendePersonRenderer.update(value, (element, person) => {\n            element.person = person;\n            element.radioName = \"bezahlende-person\";\n        });\n        this.empfaengerRenderer.update(value, (element, person) => {\n            element.person = person;\n        });\n    }\n}\nexport const BezahlungEintragenFormTagName = \"bezahlung-eintragen-form\";\ncustomElements.define(BezahlungEintragenFormTagName, BezahlungEintragenForm);\n","export function toDateInputValue(d: Date) {\n    var local = new Date(d);\n    local.setMinutes(d.getMinutes() - d.getTimezoneOffset());\n    return local.toJSON().slice(0, 10);\n}","import startOfDay from '../startOfDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * var result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import template from \"./BezahlungEintragenPage.html\";\nimport { Store } from \"../../state/Store\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { RoutingActionCreator, routingActionCreatorFactory } from \"../../state/actions/RoutingActionCreator\";\nimport { AppBar, AppBarTagName } from \"../AppBar/AppBar\";\nimport \"./BezahlungEintragenPage.scss\";\nimport { BezahlungActionCreator, bezahlungActionCreatorFactory } from \"../../state/actions/BezahlungActionCreator\";\nimport { BezahlungAnlegenStatus, State } from \"../../state/State\";\nimport { convertLinks } from \"../convertLinks\";\nimport \"../BezahlungEintragenForm/BezahlungEintragenForm\";\nimport { BezahlungEintragenForm, BezahlungEintragenFormTagName } from \"../BezahlungEintragenForm/BezahlungEintragenForm\";\nimport { th } from \"date-fns/locale\";\n\nexport class BezahlungEintragenPage extends HTMLElement {\n    private store: Store;\n    private subscription: () => void;\n    private routingActionCreator: RoutingActionCreator;\n    private appBar: AppBar;\n    private bezahlungActionCreator: BezahlungActionCreator;\n    private zurueckLink: HTMLAnchorElement;\n    private bezahlungEintragenForm: BezahlungEintragenForm;\n    private saveButton: HTMLButtonElement;\n    private saveEventListener: () => void;\n    private kontokorrentId: string;\n    private editingSection: HTMLDivElement;\n    private savingSection: HTMLDivElement;\n    private saveError: HTMLDivElement;\n    private formContainer : HTMLDivElement;\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.zurueckLink = this.querySelector(\"#zurueck-zum-kontokorrent\");\n        this.appBar = this.querySelector(AppBarTagName);\n        this.bezahlungEintragenForm = this.querySelector(BezahlungEintragenFormTagName);\n        this.saveButton = this.querySelector(\"#bezahlung-eintragen__save\");\n        this.editingSection = this.querySelector(\"#bezahlung-eintragen__edit\");\n        this.savingSection = this.querySelector(\"#bezahlung-eintragen__saving\");\n        this.saveError = this.querySelector(\"#save-error\");\n        this.formContainer = this.querySelector(\"#bezahlung-eintragen__form-container\");\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = routingActionCreatorFactory(serviceLocator);\n        this.bezahlungActionCreator = bezahlungActionCreatorFactory(serviceLocator);\n        this.appBar.addServices(serviceLocator);\n    }\n\n    connectedCallback() {\n        this.subscription = this.store.subscribe(\"kontokorrents\", s => this.applyStoreState(s));\n        this.appBar.addEventListener(\"gotokontokorrent\", (e: CustomEvent) => {\n            this.bezahlungActionCreator.bezahlungEintragenKontokorrentChanged(e.detail);\n        });\n        this.bezahlungActionCreator.bezahlungEintragenGeoeffnet();\n        convertLinks([this.zurueckLink], this.routingActionCreator);\n        this.applyStoreState(this.store.state);\n        this.saveEventListener = () => this.save();\n        this.saveButton.addEventListener(\"click\", this.saveEventListener);\n    }\n\n    async save() {\n        if (this.bezahlungEintragenForm.validate()) {\n            let data = this.bezahlungEintragenForm.getData();\n            await this.bezahlungActionCreator.bezahlungHinzufuegen(this.kontokorrentId, data);\n            this.routingActionCreator.navigateKontokorrent(this.kontokorrentId, true);\n        }\n        else {\n            this.formContainer.scrollTop = 0;\n        }\n    }\n\n    private applyStoreState(s: State) {\n        this.zurueckLink.href = s.kontokorrents.activeKontokorrentId ? `kontokorrents/${s.kontokorrents.activeKontokorrentId}` : null;\n        if (s.kontokorrents.activeKontokorrentId) {\n            this.bezahlungEintragenForm.personen = s.kontokorrents.kontokorrents[s.kontokorrents.activeKontokorrentId].personen;\n            this.editingSection.style.display = s.kontokorrents.kontokorrents[s.kontokorrents.activeKontokorrentId].bezahlungAnlegen == BezahlungAnlegenStatus.Anlegen ? \"none\" : \"flex\";\n            this.savingSection.style.display = s.kontokorrents.kontokorrents[s.kontokorrents.activeKontokorrentId].bezahlungAnlegen != BezahlungAnlegenStatus.Anlegen ? \"none\" : \"flex\";\n            this.saveError.hidden = s.kontokorrents.kontokorrents[s.kontokorrents.activeKontokorrentId].bezahlungAnlegen != BezahlungAnlegenStatus.Failed;\n        }\n        this.kontokorrentId = s.kontokorrents.activeKontokorrentId;\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n        this.saveButton.removeEventListener(\"click\", this.saveEventListener);\n    }\n}\n\ncustomElements.define('bezahlung-eintragen-page', BezahlungEintragenPage);\n","import { RoutingActionCreator } from \"../state/actions/RoutingActionCreator\";\n\nexport function convertLinks(elements: Array<HTMLAnchorElement> | NodeListOf<HTMLAnchorElement>, routingActionCreator: RoutingActionCreator) {\n    elements.forEach((e: HTMLAnchorElement) => {\n        e.addEventListener(\"click\", ev => {\n            ev.preventDefault();\n            routingActionCreator.navigate(e.getAttribute(\"href\"));\n        });\n    });\n}","export class Popup extends HTMLElement {\n    private popupShown: boolean = false;\n    constructor() {\n        super();\n        this.keyListener = this.keyListener.bind(this);\n        this.clickListener = this.clickListener.bind(this);\n    }\n\n    connectedCallback() {\n        this.updateStyles();\n    }\n\n    private keyListener(ev: KeyboardEvent) {\n        if (ev.key == \"Escape\") {\n            this.hide();\n        }\n    }\n\n    private clickListener(ev: MouseEvent | TouchEvent) {\n        if (!this.contains(<Element>(event.target))) {\n            this.hide();\n        }\n    }\n\n    public hide() {\n        if (this.popupShown) {\n            document.removeEventListener(\"keydown\", this.keyListener);\n            document.removeEventListener(\"click\", this.clickListener);\n            this.popupShown = false;\n            this.updateStyles();\n        }\n    }\n\n    public show() {\n        if (!this.popupShown) {\n            document.addEventListener(\"keydown\", this.keyListener);\n            document.addEventListener(\"click\", this.clickListener);\n            this.popupShown = true;\n            this.updateStyles();\n        }\n    }\n\n    private updateStyles() {\n        this.style.display = this.popupShown ? \"block\" : \"none\";\n    }\n\n    public toggle() {\n        if (!this.popupShown) {\n            this.show();\n        }\n        else {\n            this.hide();\n\n        }\n    }\n\n    disconnectedCallback() {\n        this.hide();\n    }\n}\ncustomElements.define(\"app-popup\", Popup);\n","export class ArrayToElementRenderer<T, E extends Element, K>{\n    private keyToElement: Map<K, E>;\n    private elementToKey: WeakMap<E, K>;\n    \n    constructor(private listElement: HTMLElement,\n        private keySelector: (x: T) => K,\n        private createElement: (x: T) => E) {\n        this.keyToElement = new Map<K, E>();\n        this.elementToKey = new WeakMap<E, K>();\n    }\n\n    update(list: T[], updateElement: (x: E, data: T) => void) {\n        let keyCache = new Map<T, K>();\n        let getKey = (d: T) => keyCache.get(d) || (() => {\n            let key = this.keySelector(d);\n            keyCache.set(d, key);\n            return key;\n        })();\n        for (let x of Array.from(this.listElement.children)) {\n            let el: E = <E>x;\n            let data = list.find(i => this.elementToKey.get(el) == getKey(i));\n            if (data) {\n                updateElement(<E>el, data);\n            }\n            else {\n                this.listElement.removeChild(el);\n            }\n        }\n        let before: Element = null;\n        let nextKeyToElement = new Map<K, E>();\n        for (let t of list) {\n            let key = getKey(t);\n            let childElement: E = this.keyToElement.get(key);\n            if (!childElement) {\n                childElement = this.createElement(t);\n                updateElement(childElement, t);\n                this.elementToKey.set(childElement, key);\n            }\n            nextKeyToElement.set(key, childElement);\n            if (null == before && childElement != this.listElement.firstElementChild) {\n                this.listElement.prepend(childElement);\n            }\n            else if (null != before && before.nextElementSibling != childElement) {\n                before.insertAdjacentElement(\"afterend\", childElement);\n            }\n            before = childElement;\n        }\n        this.keyToElement = nextKeyToElement;\n    }\n\n}","export class ReuseableTemplate {\n    private instance: HTMLTemplateElement;\n    constructor(private readonly template: string) {\n    }\n\n    get(): DocumentFragment {\n        if (null == this.instance) {\n            this.instance = document.createElement(\"template\");\n            this.instance.innerHTML = this.template;\n        }\n        return document.importNode(this.instance.content, true);\n    }\n}\n"],"sourceRoot":""}