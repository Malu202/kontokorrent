{"version":3,"sources":["webpack:///./src/components/CreateKontokorrent/CreateKontokorrent.html","webpack:///./src/components/PersonenListe/PersonenListe.html","webpack:///./src/components/PersonenListe/PersonenListenEintrag.html","webpack:///./src/components/PersonenListe/PersonenListenEintrag.ts","webpack:///./src/components/PersonenListe/PersonenListe.ts","webpack:///./src/components/CreateKontokorrent/CreateKontokorrent.ts"],"names":["module","exports","HTMLElement","super","this","innerHTML","removeButton","querySelector","nameInput","addEventListener","dispatchEvent","Event","CustomEvent","value","customElements","define","names","personenListe","querySelectorAll","forEach","v","push","name","addPersonButton","li","document","createElement","e","appendChild","removeChild","kontokorrentId","oeffentlicherNameManuell","serviceLocator","store","routingActionCreator","RoutingActionCreator","locate","accountActionCreator","AccountActionCreator","kontokorrentsActionCreator","KontokorrentsActionCreator","emptyNameError","eventCreateError","personCountError","eventNameError","createButton","eventName","creating","oeffentlicherName","oeffentlich","oeffentlichBox","oeffentlicherNameError","eventNameDuplicate","accountCreationFailed","personNameDuplicateError","createEvent","bind","style","display","checked","subscription","subscribe","state","applyStoreState","personNames","personen","personCountOk","length","personNameError","some","test","item","index","indexOf","ensureAccount","kontokorrentErstellen","navigateKontokorrent","kontokorrents","account","accountCreating","creationFailed","exists"],"mappings":"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","file":"5.9e96275df9d9ce553db1.bundle.js","sourcesContent":["// Module\nvar code = \"<h1>Event erstellen</h1> <label for=event-name>Eventname</label> <input type=text id=event-name name=event-name> <label for=event-name>Oeffentlich</label> <input type=checkbox id=oeffentlich name=oeffentlich checked=checked> <div id=oeffentlich-box> <label for=oeffentlicher-name>Öffentlicher Name</label> <input type=text id=oeffentlicher-name name=oeffentlicher-name> </div> <div id=empty-name-error style=display:none>Für alle Personen Namen angeben</div> <div id=person-count-error style=display:none>Mindestens zwei Personen angeben</div> <div id=event-create-error style=display:none>Kontokorrent konnte nicht erstellt werden</div> <div id=event-name-duplicate style=display:none>Ein Kontokorrent mit diesem Namen exisitert bereits</div> <div id=event-name-error style=display:none>Eventname angeben</div> <div id=oeffentlicher-name-error style=display:none>Öfferntlicher Name: Nur Kleinbuchstaben und Zahlen</div> <div id=person-name-duplicate-error style=display:none>Personennamen müssen unterschiedlich sein</div> <div id=creating style=display:none>Wird erstellt</div> <div id=account-creation-failed style=display:none>Account konnte nicht erstellt werden</div> <app-personen-liste id=personen-liste></app-personen-liste> <button id=create-button>Erstellen</button>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<ul id=personen-liste class=\\\"mdc-list mdc-list--non-interactive\\\"> </ul> <button type=button id=add-person>Person hinzufügen</button>\";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<input type=text id=name placehoder=Name /> <button id=remove>entfernen</button>\";\n// Exports\nmodule.exports = code;","import template from \"./PersonenListenEintrag.html\";\n\nexport class PersonenListenEintrag extends HTMLElement {\n    private removeButton: HTMLButtonElement;\n    private nameInput: HTMLInputElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n    }\n\n    connectedCallback() {\n        let element = this;\n        this.removeButton = element.querySelector(\"#remove\");\n        this.nameInput = element.querySelector(\"#name\");\n        this.nameInput.addEventListener(\"change\", () => {\n            this.dispatchEvent(new Event(\"change\"));\n        });\n        this.removeButton.addEventListener(\"click\", () => {\n            this.dispatchEvent(new CustomEvent(\"onremove\"));\n        })\n    }\n\n    get name(){\n        return this.nameInput.value;\n    }\n\n    disconnectedCallback() {\n\n    }\n\n}\nexport const PersonenListenEintragTagName = 'app-personen-listen-eintrag'; \ncustomElements.define(PersonenListenEintragTagName, PersonenListenEintrag);\n","import template from \"./PersonenListe.html\";\nimport { PersonenListenEintrag, PersonenListenEintragTagName } from \"./PersonenListenEintrag\";\n\nexport class PersonenListe extends HTMLElement {\n    private addPersonButton: HTMLButtonElement;\n    private personenListe: HTMLUListElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n    }\n\n    get personen() {\n        let names: string[] = [];\n        this.personenListe.querySelectorAll(PersonenListenEintragTagName).forEach((v: PersonenListenEintrag) => names.push(v.name));\n        return names;\n    }\n\n    connectedCallback() {\n        let element = this;\n        this.addPersonButton = element.querySelector(\"#add-person\");\n        this.personenListe = element.querySelector(\"#personen-liste\");\n        this.addPersonButton.addEventListener(\"click\", () => {\n            let li = document.createElement(\"li\");\n            let e = new PersonenListenEintrag();\n            li.appendChild(e);\n            this.personenListe.appendChild(li);\n            e.addEventListener(\"onremove\", () => {\n                this.personenListe.removeChild(li);\n            });\n        });\n    }\n\n    disconnectedCallback() {\n\n    }\n\n}\n\ncustomElements.define('app-personen-liste', PersonenListe);\n","import template from \"./CreateKontokorrent.html\";\nimport { Store } from \"../../state/Store\";\nimport { ServiceLocator } from \"../../ServiceLocator\";\nimport { RoutingActionCreator } from \"../../state/actions/RoutingActionCreator\";\nimport { State } from \"../../state/State\";\nimport { AccountActionCreator } from \"../../state/actions/AccountActionCreator\";\nimport \"../PersonenListe/PersonenListe\";\nimport { PersonenListe } from \"../PersonenListe/PersonenListe\";\nimport { v4 as uuid } from \"uuid\";\nimport { KontokorrentsActionCreator } from \"../../state/actions/KontokorrentsActionCreator\";\n\nexport class CreateKontokorrent extends HTMLElement {\n    store: Store;\n    subscription: () => void;\n    routingActionCreator: RoutingActionCreator;\n    private accountActionCreator: AccountActionCreator;\n\n\n    private personenListe: PersonenListe;\n    private emptyNameError: HTMLDivElement;\n    private eventCreateError: HTMLDivElement;\n    private personCountError: HTMLDivElement;\n    private eventNameError: HTMLDivElement;\n    private createButton: HTMLButtonElement;\n    private eventName: HTMLInputElement;\n    private readonly kontokorrentId: string;\n    private creating: HTMLDivElement;\n    private oeffentlicherName: HTMLInputElement;\n    private oeffentlich: HTMLInputElement;\n    private oeffentlichBox: HTMLDivElement;\n    private oeffentlicherNameManuell: boolean;\n    private oeffentlicherNameError: HTMLDivElement;\n    private eventNameDuplicate: HTMLDivElement;\n    private kontokorrentsActionCreator: KontokorrentsActionCreator;\n    private accountCreationFailed: HTMLDivElement;\n    private personNameDuplicateError: HTMLDivElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.kontokorrentId = uuid();\n        this.oeffentlicherNameManuell = false;\n    }\n\n    addServices(serviceLocator: ServiceLocator) {\n        this.store = serviceLocator.store;\n        this.routingActionCreator = RoutingActionCreator.locate(serviceLocator);\n        this.accountActionCreator = AccountActionCreator.locate(serviceLocator);\n        this.kontokorrentsActionCreator = KontokorrentsActionCreator.locate(serviceLocator);\n    }\n\n    connectedCallback() {\n        let element = this;\n        this.personenListe = element.querySelector(\"#personen-liste\");\n        this.emptyNameError = element.querySelector(\"#empty-name-error\");\n        this.eventCreateError = element.querySelector(\"#event-create-error\");\n        this.personCountError = element.querySelector(\"#person-count-error\");\n        this.eventNameError = element.querySelector(\"#event-name-error\");\n        this.createButton = element.querySelector(\"#create-button\");\n        this.eventName = element.querySelector(\"#event-name\");\n        this.creating = element.querySelector(\"#creating\");\n        this.oeffentlicherName = element.querySelector(\"#oeffentlicher-name\");\n        this.oeffentlich = element.querySelector(\"#oeffentlich\");\n        this.oeffentlichBox = element.querySelector(\"#oeffentlich-box\");\n        this.oeffentlicherNameError = element.querySelector(\"#oeffentlicher-name-error\");\n        this.eventNameDuplicate = element.querySelector(\"#event-name-duplicate\");\n        this.accountCreationFailed = element.querySelector(\"#account-creation-failed\");\n        this.personNameDuplicateError = element.querySelector(\"#person-name-duplicate-error\");\n\n\n        this.createButton.addEventListener(\"click\", this.createEvent.bind(this));\n\n        this.oeffentlich.addEventListener(\"change\", () => {\n            this.oeffentlichBox.style.display = this.oeffentlich.checked ? \"block\" : \"none\";\n        });\n\n        this.eventName.addEventListener(\"change\", () => {\n            if (!this.oeffentlicherNameManuell) {\n                this.oeffentlicherName.value = this.eventName.value;\n            }\n        });\n\n        this.oeffentlicherName.addEventListener(\"change\", () => {\n            this.oeffentlicherNameManuell = true;\n        });\n\n        this.subscription = this.store.subscribe(null, state => this.applyStoreState(state));\n        this.applyStoreState(this.store.state);\n    }\n\n    async createEvent() {\n        let eventName = this.eventName.value;\n        let personNames = this.personenListe.personen;\n        this.eventNameError.style.display = eventName ? \"none\" : \"block\";\n        let personCountOk = personNames.length >= 2;\n        this.personCountError.style.display = personCountOk ? \"none\" : \"block\";\n        let personNameError = personNames.some(v => !v);\n        this.emptyNameError.style.display = personNameError ? \"block\" : \"none\";\n        let oeffentlicherNameError = this.oeffentlich.checked && (!this.oeffentlicherName.value || !/^[a-z0-9]+$/.test(this.oeffentlicherName.value));\n        this.oeffentlicherNameError.style.display = oeffentlicherNameError ? \"block\" : \"none\";\n        let personNameDuplicateError = (personNames.some((item, index) => personNames.indexOf(item) != index));\n        this.personNameDuplicateError.style.display = personNameDuplicateError ? \"block\" : \"none\";\n        if (eventName && personCountOk && !personNameError && !oeffentlicherNameError && !personNameDuplicateError) {\n            if (await this.accountActionCreator.ensureAccount()) {\n                if (await this.kontokorrentsActionCreator.kontokorrentErstellen(this.kontokorrentId, this.eventName.value, this.oeffentlich.checked ? this.oeffentlicherName.value : null, personNames)) {\n                    this.routingActionCreator.navigateKontokorrent(this.kontokorrentId);\n                };\n            }\n        }\n    }\n\n    private applyStoreState(state: State) {\n        this.creating.style.display = state.kontokorrents.creating || state.account.accountCreating ? \"block\" : \"none\";\n        this.eventCreateError.style.display = state.kontokorrents.creationFailed ? \"block\" : \"none\";\n        this.eventNameDuplicate.style.display = state.kontokorrents.creationFailed && state.kontokorrents.creationFailed.exists ? \"block\" : \"none\";\n        this.accountCreationFailed.style.display = !state.account.accountCreating && state.account.accountCreationFailed ?\n            \"block\" : \"none\";\n    }\n\n    disconnectedCallback() {\n        this.subscription();\n    }\n}\n\ncustomElements.define('app-create-event', CreateKontokorrent);"],"sourceRoot":""}